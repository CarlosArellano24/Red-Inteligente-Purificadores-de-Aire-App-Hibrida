/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@firebase/app/dist/index.esm2017.js":
/*!**********************************************************!*\
  !*** ./node_modules/@firebase/app/dist/index.esm2017.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FirebaseError\": () => (/* reexport safe */ _firebase_util__WEBPACK_IMPORTED_MODULE_2__.FirebaseError),\n/* harmony export */   \"SDK_VERSION\": () => (/* binding */ SDK_VERSION),\n/* harmony export */   \"_DEFAULT_ENTRY_NAME\": () => (/* binding */ DEFAULT_ENTRY_NAME),\n/* harmony export */   \"_addComponent\": () => (/* binding */ _addComponent),\n/* harmony export */   \"_addOrOverwriteComponent\": () => (/* binding */ _addOrOverwriteComponent),\n/* harmony export */   \"_apps\": () => (/* binding */ _apps),\n/* harmony export */   \"_clearComponents\": () => (/* binding */ _clearComponents),\n/* harmony export */   \"_components\": () => (/* binding */ _components),\n/* harmony export */   \"_getProvider\": () => (/* binding */ _getProvider),\n/* harmony export */   \"_registerComponent\": () => (/* binding */ _registerComponent),\n/* harmony export */   \"_removeServiceInstance\": () => (/* binding */ _removeServiceInstance),\n/* harmony export */   \"deleteApp\": () => (/* binding */ deleteApp),\n/* harmony export */   \"getApp\": () => (/* binding */ getApp),\n/* harmony export */   \"getApps\": () => (/* binding */ getApps),\n/* harmony export */   \"initializeApp\": () => (/* binding */ initializeApp),\n/* harmony export */   \"onLog\": () => (/* binding */ onLog),\n/* harmony export */   \"registerVersion\": () => (/* binding */ registerVersion),\n/* harmony export */   \"setLogLevel\": () => (/* binding */ setLogLevel)\n/* harmony export */ });\n/* harmony import */ var _firebase_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/component */ \"./node_modules/@firebase/component/dist/index.esm.js\");\n/* harmony import */ var _firebase_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @firebase/logger */ \"./node_modules/@firebase/logger/dist/index.esm2017.js\");\n/* harmony import */ var _firebase_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @firebase/util */ \"./node_modules/@firebase/util/dist/index.esm2017.js\");\n\n\n\n\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PlatformLoggerServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    // In initial implementation, this will be called by installations on\r\n    // auth token refresh, and installations will send this string.\r\n    getPlatformInfoString() {\r\n        const providers = this.container.getProviders();\r\n        // Loop through providers and get library/version pairs from any that are\r\n        // version components.\r\n        return providers\r\n            .map(provider => {\r\n            if (isVersionServiceProvider(provider)) {\r\n                const service = provider.getImmediate();\r\n                return `${service.library}/${service.version}`;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        })\r\n            .filter(logString => logString)\r\n            .join(' ');\r\n    }\r\n}\r\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\r\nfunction isVersionServiceProvider(provider) {\r\n    const component = provider.getComponent();\r\n    return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* VERSION */;\r\n}\n\nconst name$o = \"@firebase/app\";\nconst version$1 = \"0.7.5\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new _firebase_logger__WEBPACK_IMPORTED_MODULE_1__.Logger('@firebase/app');\n\nconst name$n = \"@firebase/app-compat\";\n\nconst name$m = \"@firebase/analytics-compat\";\n\nconst name$l = \"@firebase/analytics\";\n\nconst name$k = \"@firebase/app-check-compat\";\n\nconst name$j = \"@firebase/app-check\";\n\nconst name$i = \"@firebase/auth\";\n\nconst name$h = \"@firebase/auth-compat\";\n\nconst name$g = \"@firebase/database\";\n\nconst name$f = \"@firebase/database-compat\";\n\nconst name$e = \"@firebase/functions\";\n\nconst name$d = \"@firebase/functions-compat\";\n\nconst name$c = \"@firebase/installations\";\n\nconst name$b = \"@firebase/installations-compat\";\n\nconst name$a = \"@firebase/messaging\";\n\nconst name$9 = \"@firebase/messaging-compat\";\n\nconst name$8 = \"@firebase/performance\";\n\nconst name$7 = \"@firebase/performance-compat\";\n\nconst name$6 = \"@firebase/remote-config\";\n\nconst name$5 = \"@firebase/remote-config-compat\";\n\nconst name$4 = \"@firebase/storage\";\n\nconst name$3 = \"@firebase/storage-compat\";\n\nconst name$2 = \"@firebase/firestore\";\n\nconst name$1 = \"@firebase/firestore-compat\";\n\nconst name = \"firebase\";\nconst version = \"9.2.0\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\nconst PLATFORM_LOG_STRING = {\r\n    [name$o]: 'fire-core',\r\n    [name$n]: 'fire-core-compat',\r\n    [name$l]: 'fire-analytics',\r\n    [name$m]: 'fire-analytics-compat',\r\n    [name$j]: 'fire-app-check',\r\n    [name$k]: 'fire-app-check-compat',\r\n    [name$i]: 'fire-auth',\r\n    [name$h]: 'fire-auth-compat',\r\n    [name$g]: 'fire-rtdb',\r\n    [name$f]: 'fire-rtdb-compat',\r\n    [name$e]: 'fire-fn',\r\n    [name$d]: 'fire-fn-compat',\r\n    [name$c]: 'fire-iid',\r\n    [name$b]: 'fire-iid-compat',\r\n    [name$a]: 'fire-fcm',\r\n    [name$9]: 'fire-fcm-compat',\r\n    [name$8]: 'fire-perf',\r\n    [name$7]: 'fire-perf-compat',\r\n    [name$6]: 'fire-rc',\r\n    [name$5]: 'fire-rc-compat',\r\n    [name$4]: 'fire-gcs',\r\n    [name$3]: 'fire-gcs-compat',\r\n    [name$2]: 'fire-fst',\r\n    [name$1]: 'fire-fst-compat',\r\n    'fire-js': 'fire-js',\r\n    [name]: 'fire-js-all'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nconst _apps = new Map();\r\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst _components = new Map();\r\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\r\nfunction _addComponent(app, component) {\r\n    try {\r\n        app.container.addComponent(component);\r\n    }\r\n    catch (e) {\r\n        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\r\n    }\r\n}\r\n/**\r\n *\r\n * @internal\r\n */\r\nfunction _addOrOverwriteComponent(app, component) {\r\n    app.container.addOrOverwriteComponent(component);\r\n}\r\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\r\nfunction _registerComponent(component) {\r\n    const componentName = component.name;\r\n    if (_components.has(componentName)) {\r\n        logger.debug(`There were multiple attempts to register component ${componentName}.`);\r\n        return false;\r\n    }\r\n    _components.set(componentName, component);\r\n    // add the component to existing app instances\r\n    for (const app of _apps.values()) {\r\n        _addComponent(app, component);\r\n    }\r\n    return true;\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\r\nfunction _getProvider(app, name) {\r\n    return app.container.getProvider(name);\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\r\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\r\n    _getProvider(app, name).clearInstance(instanceIdentifier);\r\n}\r\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\r\nfunction _clearComponents() {\r\n    _components.clear();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"no-app\" /* NO_APP */]: \"No Firebase App '{$appName}' has been created - \" +\r\n        'call Firebase App.initializeApp()',\r\n    [\"bad-app-name\" /* BAD_APP_NAME */]: \"Illegal App name: '{$appName}\",\r\n    [\"duplicate-app\" /* DUPLICATE_APP */]: \"Firebase App named '{$appName}' already exists with different options or config\",\r\n    [\"app-deleted\" /* APP_DELETED */]: \"Firebase App named '{$appName}' already deleted\",\r\n    [\"invalid-app-argument\" /* INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +\r\n        'Firebase App instance.',\r\n    [\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.'\r\n};\r\nconst ERROR_FACTORY = new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.ErrorFactory('app', 'Firebase', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FirebaseAppImpl {\r\n    constructor(options, config, container) {\r\n        this._isDeleted = false;\r\n        this._options = Object.assign({}, options);\r\n        this._config = Object.assign({}, config);\r\n        this._name = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled;\r\n        this._container = container;\r\n        this.container.addComponent(new _firebase_component__WEBPACK_IMPORTED_MODULE_0__.Component('app', () => this, \"PUBLIC\" /* PUBLIC */));\r\n    }\r\n    get automaticDataCollectionEnabled() {\r\n        this.checkDestroyed();\r\n        return this._automaticDataCollectionEnabled;\r\n    }\r\n    set automaticDataCollectionEnabled(val) {\r\n        this.checkDestroyed();\r\n        this._automaticDataCollectionEnabled = val;\r\n    }\r\n    get name() {\r\n        this.checkDestroyed();\r\n        return this._name;\r\n    }\r\n    get options() {\r\n        this.checkDestroyed();\r\n        return this._options;\r\n    }\r\n    get config() {\r\n        this.checkDestroyed();\r\n        return this._config;\r\n    }\r\n    get container() {\r\n        return this._container;\r\n    }\r\n    get isDeleted() {\r\n        return this._isDeleted;\r\n    }\r\n    set isDeleted(val) {\r\n        this._isDeleted = val;\r\n    }\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    checkDestroyed() {\r\n        if (this.isDeleted) {\r\n            throw ERROR_FACTORY.create(\"app-deleted\" /* APP_DELETED */, { appName: this._name });\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\r\nconst SDK_VERSION = version;\r\nfunction initializeApp(options, rawConfig = {}) {\r\n    if (typeof rawConfig !== 'object') {\r\n        const name = rawConfig;\r\n        rawConfig = { name };\r\n    }\r\n    const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);\r\n    const name = config.name;\r\n    if (typeof name !== 'string' || !name) {\r\n        throw ERROR_FACTORY.create(\"bad-app-name\" /* BAD_APP_NAME */, {\r\n            appName: String(name)\r\n        });\r\n    }\r\n    const existingApp = _apps.get(name);\r\n    if (existingApp) {\r\n        // return the existing app if options and config deep equal the ones in the existing app.\r\n        if ((0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.deepEqual)(options, existingApp.options) &&\r\n            (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.deepEqual)(config, existingApp.config)) {\r\n            return existingApp;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"duplicate-app\" /* DUPLICATE_APP */, { appName: name });\r\n        }\r\n    }\r\n    const container = new _firebase_component__WEBPACK_IMPORTED_MODULE_0__.ComponentContainer(name);\r\n    for (const component of _components.values()) {\r\n        container.addComponent(component);\r\n    }\r\n    const newApp = new FirebaseAppImpl(options, config, container);\r\n    _apps.set(name, newApp);\r\n    return newApp;\r\n}\r\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\r\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\r\n    const app = _apps.get(name);\r\n    if (!app) {\r\n        throw ERROR_FACTORY.create(\"no-app\" /* NO_APP */, { appName: name });\r\n    }\r\n    return app;\r\n}\r\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\r\nfunction getApps() {\r\n    return Array.from(_apps.values());\r\n}\r\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\r\nasync function deleteApp(app) {\r\n    const name = app.name;\r\n    if (_apps.has(name)) {\r\n        _apps.delete(name);\r\n        await Promise.all(app.container\r\n            .getProviders()\r\n            .map(provider => provider.delete()));\r\n        app.isDeleted = true;\r\n    }\r\n}\r\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\r\nfunction registerVersion(libraryKeyOrName, version, variant) {\r\n    var _a;\r\n    // TODO: We can use this check to whitelist strings when/if we set up\r\n    // a good whitelist system.\r\n    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\r\n    if (variant) {\r\n        library += `-${variant}`;\r\n    }\r\n    const libraryMismatch = library.match(/\\s|\\//);\r\n    const versionMismatch = version.match(/\\s|\\//);\r\n    if (libraryMismatch || versionMismatch) {\r\n        const warning = [\r\n            `Unable to register library \"${library}\" with version \"${version}\":`\r\n        ];\r\n        if (libraryMismatch) {\r\n            warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        if (libraryMismatch && versionMismatch) {\r\n            warning.push('and');\r\n        }\r\n        if (versionMismatch) {\r\n            warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        logger.warn(warning.join(' '));\r\n        return;\r\n    }\r\n    _registerComponent(new _firebase_component__WEBPACK_IMPORTED_MODULE_0__.Component(`${library}-version`, () => ({ library, version }), \"VERSION\" /* VERSION */));\r\n}\r\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\r\nfunction onLog(logCallback, options) {\r\n    if (logCallback !== null && typeof logCallback !== 'function') {\r\n        throw ERROR_FACTORY.create(\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */);\r\n    }\r\n    (0,_firebase_logger__WEBPACK_IMPORTED_MODULE_1__.setUserLogHandler)(logCallback, options);\r\n}\r\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\r\nfunction setLogLevel(logLevel) {\r\n    (0,_firebase_logger__WEBPACK_IMPORTED_MODULE_1__.setLogLevel)(logLevel);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerCoreComponents(variant) {\r\n    _registerComponent(new _firebase_component__WEBPACK_IMPORTED_MODULE_0__.Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\r\n    // Register `app` package.\r\n    registerVersion(name$o, version$1, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name$o, version$1, 'esm2017');\r\n    // Register platform SDK identifier (no version).\r\n    registerVersion('fire-js', '');\r\n}\n\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\r\nregisterCoreComponents('');\n\n\n//# sourceMappingURL=index.esm2017.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@firebase/app/dist/index.esm2017.js\n");

/***/ }),

/***/ "./node_modules/@firebase/auth/dist/esm2017/index-238d6fa9.js":
/*!********************************************************************!*\
  !*** ./node_modules/@firebase/auth/dist/esm2017/index-238d6fa9.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"$\": () => (/* binding */ sendPasswordResetEmail),\n/* harmony export */   \"A\": () => (/* binding */ ActionCodeOperation),\n/* harmony export */   \"B\": () => (/* binding */ prodErrorMap),\n/* harmony export */   \"C\": () => (/* binding */ AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY),\n/* harmony export */   \"D\": () => (/* binding */ initializeAuth),\n/* harmony export */   \"E\": () => (/* binding */ connectAuthEmulator),\n/* harmony export */   \"F\": () => (/* binding */ FactorId),\n/* harmony export */   \"G\": () => (/* binding */ AuthCredential),\n/* harmony export */   \"H\": () => (/* binding */ EmailAuthCredential),\n/* harmony export */   \"I\": () => (/* binding */ OAuthCredential),\n/* harmony export */   \"J\": () => (/* binding */ PhoneAuthCredential),\n/* harmony export */   \"K\": () => (/* binding */ inMemoryPersistence),\n/* harmony export */   \"L\": () => (/* binding */ EmailAuthProvider),\n/* harmony export */   \"M\": () => (/* binding */ FacebookAuthProvider),\n/* harmony export */   \"N\": () => (/* binding */ GoogleAuthProvider),\n/* harmony export */   \"O\": () => (/* binding */ OperationType),\n/* harmony export */   \"P\": () => (/* binding */ PhoneAuthProvider),\n/* harmony export */   \"Q\": () => (/* binding */ GithubAuthProvider),\n/* harmony export */   \"R\": () => (/* binding */ RecaptchaVerifier),\n/* harmony export */   \"S\": () => (/* binding */ SignInMethod),\n/* harmony export */   \"T\": () => (/* binding */ OAuthProvider),\n/* harmony export */   \"U\": () => (/* binding */ SAMLAuthProvider),\n/* harmony export */   \"V\": () => (/* binding */ TwitterAuthProvider),\n/* harmony export */   \"W\": () => (/* binding */ signInAnonymously),\n/* harmony export */   \"X\": () => (/* binding */ signInWithCredential),\n/* harmony export */   \"Y\": () => (/* binding */ linkWithCredential),\n/* harmony export */   \"Z\": () => (/* binding */ reauthenticateWithCredential),\n/* harmony export */   \"_\": () => (/* binding */ signInWithCustomToken),\n/* harmony export */   \"a\": () => (/* binding */ browserSessionPersistence),\n/* harmony export */   \"a0\": () => (/* binding */ confirmPasswordReset),\n/* harmony export */   \"a1\": () => (/* binding */ applyActionCode),\n/* harmony export */   \"a2\": () => (/* binding */ checkActionCode),\n/* harmony export */   \"a3\": () => (/* binding */ verifyPasswordResetCode),\n/* harmony export */   \"a4\": () => (/* binding */ createUserWithEmailAndPassword),\n/* harmony export */   \"a5\": () => (/* binding */ signInWithEmailAndPassword),\n/* harmony export */   \"a6\": () => (/* binding */ sendSignInLinkToEmail),\n/* harmony export */   \"a7\": () => (/* binding */ isSignInWithEmailLink),\n/* harmony export */   \"a8\": () => (/* binding */ signInWithEmailLink),\n/* harmony export */   \"a9\": () => (/* binding */ fetchSignInMethodsForEmail),\n/* harmony export */   \"aA\": () => (/* binding */ _getRedirectResult),\n/* harmony export */   \"aB\": () => (/* binding */ _clearRedirectOutcomes),\n/* harmony export */   \"aC\": () => (/* binding */ _castAuth),\n/* harmony export */   \"aD\": () => (/* binding */ UserImpl),\n/* harmony export */   \"aE\": () => (/* binding */ AuthImpl),\n/* harmony export */   \"aF\": () => (/* binding */ _getClientVersion),\n/* harmony export */   \"aG\": () => (/* binding */ _generateEventId),\n/* harmony export */   \"aH\": () => (/* binding */ AuthPopup),\n/* harmony export */   \"aI\": () => (/* binding */ FetchProvider),\n/* harmony export */   \"aJ\": () => (/* binding */ SAMLAuthCredential),\n/* harmony export */   \"aa\": () => (/* binding */ sendEmailVerification),\n/* harmony export */   \"ab\": () => (/* binding */ verifyBeforeUpdateEmail),\n/* harmony export */   \"ac\": () => (/* binding */ ActionCodeURL),\n/* harmony export */   \"ad\": () => (/* binding */ parseActionCodeURL),\n/* harmony export */   \"ae\": () => (/* binding */ updateProfile),\n/* harmony export */   \"af\": () => (/* binding */ updateEmail),\n/* harmony export */   \"ag\": () => (/* binding */ updatePassword),\n/* harmony export */   \"ah\": () => (/* binding */ getIdToken),\n/* harmony export */   \"ai\": () => (/* binding */ getIdTokenResult),\n/* harmony export */   \"aj\": () => (/* binding */ unlink),\n/* harmony export */   \"ak\": () => (/* binding */ getAdditionalUserInfo),\n/* harmony export */   \"al\": () => (/* binding */ reload),\n/* harmony export */   \"am\": () => (/* binding */ getMultiFactorResolver),\n/* harmony export */   \"an\": () => (/* binding */ multiFactor),\n/* harmony export */   \"ao\": () => (/* binding */ _isIOS7Or8),\n/* harmony export */   \"ap\": () => (/* binding */ debugAssert),\n/* harmony export */   \"aq\": () => (/* binding */ _isIOS),\n/* harmony export */   \"ar\": () => (/* binding */ _isAndroid),\n/* harmony export */   \"as\": () => (/* binding */ _fail),\n/* harmony export */   \"at\": () => (/* binding */ _getRedirectUrl),\n/* harmony export */   \"au\": () => (/* binding */ _getProjectConfig),\n/* harmony export */   \"av\": () => (/* binding */ _createError),\n/* harmony export */   \"aw\": () => (/* binding */ _assert),\n/* harmony export */   \"ax\": () => (/* binding */ _getInstance),\n/* harmony export */   \"ay\": () => (/* binding */ _persistenceKeyName),\n/* harmony export */   \"az\": () => (/* binding */ AuthEventManager),\n/* harmony export */   \"b\": () => (/* binding */ browserLocalPersistence),\n/* harmony export */   \"c\": () => (/* binding */ signInWithPopup),\n/* harmony export */   \"d\": () => (/* binding */ linkWithPopup),\n/* harmony export */   \"e\": () => (/* binding */ reauthenticateWithPopup),\n/* harmony export */   \"f\": () => (/* binding */ signInWithRedirect),\n/* harmony export */   \"g\": () => (/* binding */ linkWithRedirect),\n/* harmony export */   \"h\": () => (/* binding */ reauthenticateWithRedirect),\n/* harmony export */   \"i\": () => (/* binding */ indexedDBLocalPersistence),\n/* harmony export */   \"j\": () => (/* binding */ getRedirectResult),\n/* harmony export */   \"k\": () => (/* binding */ browserPopupRedirectResolver),\n/* harmony export */   \"l\": () => (/* binding */ linkWithPhoneNumber),\n/* harmony export */   \"m\": () => (/* binding */ PhoneMultiFactorGenerator),\n/* harmony export */   \"n\": () => (/* binding */ getAuth),\n/* harmony export */   \"o\": () => (/* binding */ ProviderId),\n/* harmony export */   \"p\": () => (/* binding */ setPersistence),\n/* harmony export */   \"q\": () => (/* binding */ onIdTokenChanged),\n/* harmony export */   \"r\": () => (/* binding */ reauthenticateWithPhoneNumber),\n/* harmony export */   \"s\": () => (/* binding */ signInWithPhoneNumber),\n/* harmony export */   \"t\": () => (/* binding */ onAuthStateChanged),\n/* harmony export */   \"u\": () => (/* binding */ updatePhoneNumber),\n/* harmony export */   \"v\": () => (/* binding */ useDeviceLanguage),\n/* harmony export */   \"w\": () => (/* binding */ updateCurrentUser),\n/* harmony export */   \"x\": () => (/* binding */ signOut),\n/* harmony export */   \"y\": () => (/* binding */ deleteUser),\n/* harmony export */   \"z\": () => (/* binding */ debugErrorMap)\n/* harmony export */ });\n/* harmony import */ var _firebase_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/util */ \"./node_modules/@firebase/util/dist/index.esm2017.js\");\n/* harmony import */ var _firebase_app__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @firebase/app */ \"./node_modules/@firebase/app/dist/index.esm2017.js\");\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _firebase_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @firebase/logger */ \"./node_modules/@firebase/logger/dist/index.esm2017.js\");\n/* harmony import */ var _firebase_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @firebase/component */ \"./node_modules/@firebase/component/dist/index.esm.js\");\n\n\n\n\n\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An enum of factors that may be used for multifactor authentication.\r\n *\r\n * @public\r\n */\r\nconst FactorId = {\r\n    /** Phone as second factor */\r\n    PHONE: 'phone'\r\n};\r\n/**\r\n * Enumeration of supported providers.\r\n *\r\n * @public\r\n */\r\nconst ProviderId = {\r\n    /** Facebook provider ID */\r\n    FACEBOOK: 'facebook.com',\r\n    /** GitHub provider ID */\r\n    GITHUB: 'github.com',\r\n    /** Google provider ID */\r\n    GOOGLE: 'google.com',\r\n    /** Password provider */\r\n    PASSWORD: 'password',\r\n    /** Phone provider */\r\n    PHONE: 'phone',\r\n    /** Twitter provider ID */\r\n    TWITTER: 'twitter.com'\r\n};\r\n/**\r\n * Enumeration of supported sign-in methods.\r\n *\r\n * @public\r\n */\r\nconst SignInMethod = {\r\n    /** Email link sign in method */\r\n    EMAIL_LINK: 'emailLink',\r\n    /** Email/password sign in method */\r\n    EMAIL_PASSWORD: 'password',\r\n    /** Facebook sign in method */\r\n    FACEBOOK: 'facebook.com',\r\n    /** GitHub sign in method */\r\n    GITHUB: 'github.com',\r\n    /** Google sign in method */\r\n    GOOGLE: 'google.com',\r\n    /** Phone sign in method */\r\n    PHONE: 'phone',\r\n    /** Twitter sign in method */\r\n    TWITTER: 'twitter.com'\r\n};\r\n/**\r\n * Enumeration of supported operation types.\r\n *\r\n * @public\r\n */\r\nconst OperationType = {\r\n    /** Operation involving linking an additional provider to an already signed-in user. */\r\n    LINK: 'link',\r\n    /** Operation involving using a provider to reauthenticate an already signed-in user. */\r\n    REAUTHENTICATE: 'reauthenticate',\r\n    /** Operation involving signing in a user. */\r\n    SIGN_IN: 'signIn'\r\n};\r\n/**\r\n * An enumeration of the possible email action types.\r\n *\r\n * @public\r\n */\r\nconst ActionCodeOperation = {\r\n    /** The email link sign-in action. */\r\n    EMAIL_SIGNIN: 'EMAIL_SIGNIN',\r\n    /** The password reset action. */\r\n    PASSWORD_RESET: 'PASSWORD_RESET',\r\n    /** The email revocation action. */\r\n    RECOVER_EMAIL: 'RECOVER_EMAIL',\r\n    /** The revert second factor addition email action. */\r\n    REVERT_SECOND_FACTOR_ADDITION: 'REVERT_SECOND_FACTOR_ADDITION',\r\n    /** The revert second factor addition email action. */\r\n    VERIFY_AND_CHANGE_EMAIL: 'VERIFY_AND_CHANGE_EMAIL',\r\n    /** The email verification action. */\r\n    VERIFY_EMAIL: 'VERIFY_EMAIL'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction _debugErrorMap() {\r\n    return {\r\n        [\"admin-restricted-operation\" /* ADMIN_ONLY_OPERATION */]: 'This operation is restricted to administrators only.',\r\n        [\"argument-error\" /* ARGUMENT_ERROR */]: '',\r\n        [\"app-not-authorized\" /* APP_NOT_AUTHORIZED */]: \"This app, identified by the domain where it's hosted, is not \" +\r\n            'authorized to use Firebase Authentication with the provided API key. ' +\r\n            'Review your key configuration in the Google API console.',\r\n        [\"app-not-installed\" /* APP_NOT_INSTALLED */]: 'The requested mobile application corresponding to the identifier (' +\r\n            'Android package name or iOS bundle ID) provided is not installed on ' +\r\n            'this device.',\r\n        [\"captcha-check-failed\" /* CAPTCHA_CHECK_FAILED */]: 'The reCAPTCHA response token provided is either invalid, expired, ' +\r\n            'already used or the domain associated with it does not match the list ' +\r\n            'of whitelisted domains.',\r\n        [\"code-expired\" /* CODE_EXPIRED */]: 'The SMS code has expired. Please re-send the verification code to try ' +\r\n            'again.',\r\n        [\"cordova-not-ready\" /* CORDOVA_NOT_READY */]: 'Cordova framework is not ready.',\r\n        [\"cors-unsupported\" /* CORS_UNSUPPORTED */]: 'This browser is not supported.',\r\n        [\"credential-already-in-use\" /* CREDENTIAL_ALREADY_IN_USE */]: 'This credential is already associated with a different user account.',\r\n        [\"custom-token-mismatch\" /* CREDENTIAL_MISMATCH */]: 'The custom token corresponds to a different audience.',\r\n        [\"requires-recent-login\" /* CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: 'This operation is sensitive and requires recent authentication. Log in ' +\r\n            'again before retrying this request.',\r\n        [\"dependent-sdk-initialized-before-auth\" /* DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' +\r\n            'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' +\r\n            'starting any other Firebase SDK.',\r\n        [\"dynamic-link-not-activated\" /* DYNAMIC_LINK_NOT_ACTIVATED */]: 'Please activate Dynamic Links in the Firebase Console and agree to the terms and ' +\r\n            'conditions.',\r\n        [\"email-change-needs-verification\" /* EMAIL_CHANGE_NEEDS_VERIFICATION */]: 'Multi-factor users must always have a verified email.',\r\n        [\"email-already-in-use\" /* EMAIL_EXISTS */]: 'The email address is already in use by another account.',\r\n        [\"emulator-config-failed\" /* EMULATOR_CONFIG_FAILED */]: 'Auth instance has already been used to make a network call. Auth can ' +\r\n            'no longer be configured to use the emulator. Try calling ' +\r\n            '\"connectAuthEmulator()\" sooner.',\r\n        [\"expired-action-code\" /* EXPIRED_OOB_CODE */]: 'The action code has expired.',\r\n        [\"cancelled-popup-request\" /* EXPIRED_POPUP_REQUEST */]: 'This operation has been cancelled due to another conflicting popup being opened.',\r\n        [\"internal-error\" /* INTERNAL_ERROR */]: 'An internal AuthError has occurred.',\r\n        [\"invalid-app-credential\" /* INVALID_APP_CREDENTIAL */]: 'The phone verification request contains an invalid application verifier.' +\r\n            ' The reCAPTCHA token response is either invalid or expired.',\r\n        [\"invalid-app-id\" /* INVALID_APP_ID */]: 'The mobile app identifier is not registed for the current project.',\r\n        [\"invalid-user-token\" /* INVALID_AUTH */]: \"This user's credential isn't valid for this project. This can happen \" +\r\n            \"if the user's token has been tampered with, or if the user isn't for \" +\r\n            'the project associated with this API key.',\r\n        [\"invalid-auth-event\" /* INVALID_AUTH_EVENT */]: 'An internal AuthError has occurred.',\r\n        [\"invalid-verification-code\" /* INVALID_CODE */]: 'The SMS verification code used to create the phone auth credential is ' +\r\n            'invalid. Please resend the verification code sms and be sure to use the ' +\r\n            'verification code provided by the user.',\r\n        [\"invalid-continue-uri\" /* INVALID_CONTINUE_URI */]: 'The continue URL provided in the request is invalid.',\r\n        [\"invalid-cordova-configuration\" /* INVALID_CORDOVA_CONFIGURATION */]: 'The following Cordova plugins must be installed to enable OAuth sign-in: ' +\r\n            'cordova-plugin-buildinfo, cordova-universal-links-plugin, ' +\r\n            'cordova-plugin-browsertab, cordova-plugin-inappbrowser and ' +\r\n            'cordova-plugin-customurlscheme.',\r\n        [\"invalid-custom-token\" /* INVALID_CUSTOM_TOKEN */]: 'The custom token format is incorrect. Please check the documentation.',\r\n        [\"invalid-dynamic-link-domain\" /* INVALID_DYNAMIC_LINK_DOMAIN */]: 'The provided dynamic link domain is not configured or authorized for the current project.',\r\n        [\"invalid-email\" /* INVALID_EMAIL */]: 'The email address is badly formatted.',\r\n        [\"invalid-emulator-scheme\" /* INVALID_EMULATOR_SCHEME */]: 'Emulator URL must start with a valid scheme (http:// or https://).',\r\n        [\"invalid-api-key\" /* INVALID_API_KEY */]: 'Your API key is invalid, please check you have copied it correctly.',\r\n        [\"invalid-cert-hash\" /* INVALID_CERT_HASH */]: 'The SHA-1 certificate hash provided is invalid.',\r\n        [\"invalid-credential\" /* INVALID_IDP_RESPONSE */]: 'The supplied auth credential is malformed or has expired.',\r\n        [\"invalid-message-payload\" /* INVALID_MESSAGE_PAYLOAD */]: 'The email template corresponding to this action contains invalid characters in its message. ' +\r\n            'Please fix by going to the Auth email templates section in the Firebase Console.',\r\n        [\"invalid-multi-factor-session\" /* INVALID_MFA_SESSION */]: 'The request does not contain a valid proof of first factor successful sign-in.',\r\n        [\"invalid-oauth-provider\" /* INVALID_OAUTH_PROVIDER */]: 'EmailAuthProvider is not supported for this operation. This operation ' +\r\n            'only supports OAuth providers.',\r\n        [\"invalid-oauth-client-id\" /* INVALID_OAUTH_CLIENT_ID */]: 'The OAuth client ID provided is either invalid or does not match the ' +\r\n            'specified API key.',\r\n        [\"unauthorized-domain\" /* INVALID_ORIGIN */]: 'This domain is not authorized for OAuth operations for your Firebase ' +\r\n            'project. Edit the list of authorized domains from the Firebase console.',\r\n        [\"invalid-action-code\" /* INVALID_OOB_CODE */]: 'The action code is invalid. This can happen if the code is malformed, ' +\r\n            'expired, or has already been used.',\r\n        [\"wrong-password\" /* INVALID_PASSWORD */]: 'The password is invalid or the user does not have a password.',\r\n        [\"invalid-persistence-type\" /* INVALID_PERSISTENCE */]: 'The specified persistence type is invalid. It can only be local, session or none.',\r\n        [\"invalid-phone-number\" /* INVALID_PHONE_NUMBER */]: 'The format of the phone number provided is incorrect. Please enter the ' +\r\n            'phone number in a format that can be parsed into E.164 format. E.164 ' +\r\n            'phone numbers are written in the format [+][country code][subscriber ' +\r\n            'number including area code].',\r\n        [\"invalid-provider-id\" /* INVALID_PROVIDER_ID */]: 'The specified provider ID is invalid.',\r\n        [\"invalid-recipient-email\" /* INVALID_RECIPIENT_EMAIL */]: 'The email corresponding to this action failed to send as the provided ' +\r\n            'recipient email address is invalid.',\r\n        [\"invalid-sender\" /* INVALID_SENDER */]: 'The email template corresponding to this action contains an invalid sender email or name. ' +\r\n            'Please fix by going to the Auth email templates section in the Firebase Console.',\r\n        [\"invalid-verification-id\" /* INVALID_SESSION_INFO */]: 'The verification ID used to create the phone auth credential is invalid.',\r\n        [\"invalid-tenant-id\" /* INVALID_TENANT_ID */]: \"The Auth instance's tenant ID is invalid.\",\r\n        [\"missing-android-pkg-name\" /* MISSING_ANDROID_PACKAGE_NAME */]: 'An Android Package Name must be provided if the Android App is required to be installed.',\r\n        [\"auth-domain-config-required\" /* MISSING_AUTH_DOMAIN */]: 'Be sure to include authDomain when calling firebase.initializeApp(), ' +\r\n            'by following the instructions in the Firebase console.',\r\n        [\"missing-app-credential\" /* MISSING_APP_CREDENTIAL */]: 'The phone verification request is missing an application verifier ' +\r\n            'assertion. A reCAPTCHA response token needs to be provided.',\r\n        [\"missing-verification-code\" /* MISSING_CODE */]: 'The phone auth credential was created with an empty SMS verification code.',\r\n        [\"missing-continue-uri\" /* MISSING_CONTINUE_URI */]: 'A continue URL must be provided in the request.',\r\n        [\"missing-iframe-start\" /* MISSING_IFRAME_START */]: 'An internal AuthError has occurred.',\r\n        [\"missing-ios-bundle-id\" /* MISSING_IOS_BUNDLE_ID */]: 'An iOS Bundle ID must be provided if an App Store ID is provided.',\r\n        [\"missing-or-invalid-nonce\" /* MISSING_OR_INVALID_NONCE */]: 'The request does not contain a valid nonce. This can occur if the ' +\r\n            'SHA-256 hash of the provided raw nonce does not match the hashed nonce ' +\r\n            'in the ID token payload.',\r\n        [\"missing-multi-factor-info\" /* MISSING_MFA_INFO */]: 'No second factor identifier is provided.',\r\n        [\"missing-multi-factor-session\" /* MISSING_MFA_SESSION */]: 'The request is missing proof of first factor successful sign-in.',\r\n        [\"missing-phone-number\" /* MISSING_PHONE_NUMBER */]: 'To send verification codes, provide a phone number for the recipient.',\r\n        [\"missing-verification-id\" /* MISSING_SESSION_INFO */]: 'The phone auth credential was created with an empty verification ID.',\r\n        [\"app-deleted\" /* MODULE_DESTROYED */]: 'This instance of FirebaseApp has been deleted.',\r\n        [\"multi-factor-info-not-found\" /* MFA_INFO_NOT_FOUND */]: 'The user does not have a second factor matching the identifier provided.',\r\n        [\"multi-factor-auth-required\" /* MFA_REQUIRED */]: 'Proof of ownership of a second factor is required to complete sign-in.',\r\n        [\"account-exists-with-different-credential\" /* NEED_CONFIRMATION */]: 'An account already exists with the same email address but different ' +\r\n            'sign-in credentials. Sign in using a provider associated with this ' +\r\n            'email address.',\r\n        [\"network-request-failed\" /* NETWORK_REQUEST_FAILED */]: 'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.',\r\n        [\"no-auth-event\" /* NO_AUTH_EVENT */]: 'An internal AuthError has occurred.',\r\n        [\"no-such-provider\" /* NO_SUCH_PROVIDER */]: 'User was not linked to an account with the given provider.',\r\n        [\"null-user\" /* NULL_USER */]: 'A null user object was provided as the argument for an operation which ' +\r\n            'requires a non-null user object.',\r\n        [\"operation-not-allowed\" /* OPERATION_NOT_ALLOWED */]: 'The given sign-in provider is disabled for this Firebase project. ' +\r\n            'Enable it in the Firebase console, under the sign-in method tab of the ' +\r\n            'Auth section.',\r\n        [\"operation-not-supported-in-this-environment\" /* OPERATION_NOT_SUPPORTED */]: 'This operation is not supported in the environment this application is ' +\r\n            'running on. \"location.protocol\" must be http, https or chrome-extension' +\r\n            ' and web storage must be enabled.',\r\n        [\"popup-blocked\" /* POPUP_BLOCKED */]: 'Unable to establish a connection with the popup. It may have been blocked by the browser.',\r\n        [\"popup-closed-by-user\" /* POPUP_CLOSED_BY_USER */]: 'The popup has been closed by the user before finalizing the operation.',\r\n        [\"provider-already-linked\" /* PROVIDER_ALREADY_LINKED */]: 'User can only be linked to one identity for the given provider.',\r\n        [\"quota-exceeded\" /* QUOTA_EXCEEDED */]: \"The project's quota for this operation has been exceeded.\",\r\n        [\"redirect-cancelled-by-user\" /* REDIRECT_CANCELLED_BY_USER */]: 'The redirect operation has been cancelled by the user before finalizing.',\r\n        [\"redirect-operation-pending\" /* REDIRECT_OPERATION_PENDING */]: 'A redirect sign-in operation is already pending.',\r\n        [\"rejected-credential\" /* REJECTED_CREDENTIAL */]: 'The request contains malformed or mismatching credentials.',\r\n        [\"second-factor-already-in-use\" /* SECOND_FACTOR_ALREADY_ENROLLED */]: 'The second factor is already enrolled on this account.',\r\n        [\"maximum-second-factor-count-exceeded\" /* SECOND_FACTOR_LIMIT_EXCEEDED */]: 'The maximum allowed number of second factors on a user has been exceeded.',\r\n        [\"tenant-id-mismatch\" /* TENANT_ID_MISMATCH */]: \"The provided tenant ID does not match the Auth instance's tenant ID\",\r\n        [\"timeout\" /* TIMEOUT */]: 'The operation has timed out.',\r\n        [\"user-token-expired\" /* TOKEN_EXPIRED */]: \"The user's credential is no longer valid. The user must sign in again.\",\r\n        [\"too-many-requests\" /* TOO_MANY_ATTEMPTS_TRY_LATER */]: 'We have blocked all requests from this device due to unusual activity. ' +\r\n            'Try again later.',\r\n        [\"unauthorized-continue-uri\" /* UNAUTHORIZED_DOMAIN */]: 'The domain of the continue URL is not whitelisted.  Please whitelist ' +\r\n            'the domain in the Firebase console.',\r\n        [\"unsupported-first-factor\" /* UNSUPPORTED_FIRST_FACTOR */]: 'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.',\r\n        [\"unsupported-persistence-type\" /* UNSUPPORTED_PERSISTENCE */]: 'The current environment does not support the specified persistence type.',\r\n        [\"unsupported-tenant-operation\" /* UNSUPPORTED_TENANT_OPERATION */]: 'This operation is not supported in a multi-tenant context.',\r\n        [\"unverified-email\" /* UNVERIFIED_EMAIL */]: 'The operation requires a verified email.',\r\n        [\"user-cancelled\" /* USER_CANCELLED */]: 'The user did not grant your application the permissions it requested.',\r\n        [\"user-not-found\" /* USER_DELETED */]: 'There is no user record corresponding to this identifier. The user may ' +\r\n            'have been deleted.',\r\n        [\"user-disabled\" /* USER_DISABLED */]: 'The user account has been disabled by an administrator.',\r\n        [\"user-mismatch\" /* USER_MISMATCH */]: 'The supplied credentials do not correspond to the previously signed in user.',\r\n        [\"user-signed-out\" /* USER_SIGNED_OUT */]: '',\r\n        [\"weak-password\" /* WEAK_PASSWORD */]: 'The password must be 6 characters long or more.',\r\n        [\"web-storage-unsupported\" /* WEB_STORAGE_UNSUPPORTED */]: 'This browser is not supported or 3rd party cookies and data may be disabled.',\r\n        [\"already-initialized\" /* ALREADY_INITIALIZED */]: 'initializeAuth() has already been called with ' +\r\n            'different options. To avoid this error, call initializeAuth() with the ' +\r\n            'same options as when it was originally called, or call getAuth() to return the' +\r\n            ' already initialized instance.'\r\n    };\r\n}\r\nfunction _prodErrorMap() {\r\n    // We will include this one message in the prod error map since by the very\r\n    // nature of this error, developers will never be able to see the message\r\n    // using the debugErrorMap (which is installed during auth initialization).\r\n    return {\r\n        [\"dependent-sdk-initialized-before-auth\" /* DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' +\r\n            'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' +\r\n            'starting any other Firebase SDK.'\r\n    };\r\n}\r\n/**\r\n * A verbose error map with detailed descriptions for most error codes.\r\n *\r\n * See discussion at {@link AuthErrorMap}\r\n *\r\n * @public\r\n */\r\nconst debugErrorMap = _debugErrorMap;\r\n/**\r\n * A minimal error map with all verbose error messages stripped.\r\n *\r\n * See discussion at {@link AuthErrorMap}\r\n *\r\n * @public\r\n */\r\nconst prodErrorMap = _prodErrorMap;\r\nconst _DEFAULT_AUTH_ERROR_FACTORY = new _firebase_util__WEBPACK_IMPORTED_MODULE_0__.ErrorFactory('auth', 'Firebase', _prodErrorMap());\r\n/**\r\n * A map of potential `Auth` error codes, for easier comparison with errors\r\n * thrown by the SDK.\r\n *\r\n * @remarks\r\n * Note that you can't tree-shake individual keys\r\n * in the map, so by using the map you might substantially increase your\r\n * bundle size.\r\n *\r\n * @public\r\n */\r\nconst AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = {\r\n    ADMIN_ONLY_OPERATION: 'auth/admin-restricted-operation',\r\n    ARGUMENT_ERROR: 'auth/argument-error',\r\n    APP_NOT_AUTHORIZED: 'auth/app-not-authorized',\r\n    APP_NOT_INSTALLED: 'auth/app-not-installed',\r\n    CAPTCHA_CHECK_FAILED: 'auth/captcha-check-failed',\r\n    CODE_EXPIRED: 'auth/code-expired',\r\n    CORDOVA_NOT_READY: 'auth/cordova-not-ready',\r\n    CORS_UNSUPPORTED: 'auth/cors-unsupported',\r\n    CREDENTIAL_ALREADY_IN_USE: 'auth/credential-already-in-use',\r\n    CREDENTIAL_MISMATCH: 'auth/custom-token-mismatch',\r\n    CREDENTIAL_TOO_OLD_LOGIN_AGAIN: 'auth/requires-recent-login',\r\n    DEPENDENT_SDK_INIT_BEFORE_AUTH: 'auth/dependent-sdk-initialized-before-auth',\r\n    DYNAMIC_LINK_NOT_ACTIVATED: 'auth/dynamic-link-not-activated',\r\n    EMAIL_CHANGE_NEEDS_VERIFICATION: 'auth/email-change-needs-verification',\r\n    EMAIL_EXISTS: 'auth/email-already-in-use',\r\n    EMULATOR_CONFIG_FAILED: 'auth/emulator-config-failed',\r\n    EXPIRED_OOB_CODE: 'auth/expired-action-code',\r\n    EXPIRED_POPUP_REQUEST: 'auth/cancelled-popup-request',\r\n    INTERNAL_ERROR: 'auth/internal-error',\r\n    INVALID_API_KEY: 'auth/invalid-api-key',\r\n    INVALID_APP_CREDENTIAL: 'auth/invalid-app-credential',\r\n    INVALID_APP_ID: 'auth/invalid-app-id',\r\n    INVALID_AUTH: 'auth/invalid-user-token',\r\n    INVALID_AUTH_EVENT: 'auth/invalid-auth-event',\r\n    INVALID_CERT_HASH: 'auth/invalid-cert-hash',\r\n    INVALID_CODE: 'auth/invalid-verification-code',\r\n    INVALID_CONTINUE_URI: 'auth/invalid-continue-uri',\r\n    INVALID_CORDOVA_CONFIGURATION: 'auth/invalid-cordova-configuration',\r\n    INVALID_CUSTOM_TOKEN: 'auth/invalid-custom-token',\r\n    INVALID_DYNAMIC_LINK_DOMAIN: 'auth/invalid-dynamic-link-domain',\r\n    INVALID_EMAIL: 'auth/invalid-email',\r\n    INVALID_EMULATOR_SCHEME: 'auth/invalid-emulator-scheme',\r\n    INVALID_IDP_RESPONSE: 'auth/invalid-credential',\r\n    INVALID_MESSAGE_PAYLOAD: 'auth/invalid-message-payload',\r\n    INVALID_MFA_SESSION: 'auth/invalid-multi-factor-session',\r\n    INVALID_OAUTH_CLIENT_ID: 'auth/invalid-oauth-client-id',\r\n    INVALID_OAUTH_PROVIDER: 'auth/invalid-oauth-provider',\r\n    INVALID_OOB_CODE: 'auth/invalid-action-code',\r\n    INVALID_ORIGIN: 'auth/unauthorized-domain',\r\n    INVALID_PASSWORD: 'auth/wrong-password',\r\n    INVALID_PERSISTENCE: 'auth/invalid-persistence-type',\r\n    INVALID_PHONE_NUMBER: 'auth/invalid-phone-number',\r\n    INVALID_PROVIDER_ID: 'auth/invalid-provider-id',\r\n    INVALID_RECIPIENT_EMAIL: 'auth/invalid-recipient-email',\r\n    INVALID_SENDER: 'auth/invalid-sender',\r\n    INVALID_SESSION_INFO: 'auth/invalid-verification-id',\r\n    INVALID_TENANT_ID: 'auth/invalid-tenant-id',\r\n    MFA_INFO_NOT_FOUND: 'auth/multi-factor-info-not-found',\r\n    MFA_REQUIRED: 'auth/multi-factor-auth-required',\r\n    MISSING_ANDROID_PACKAGE_NAME: 'auth/missing-android-pkg-name',\r\n    MISSING_APP_CREDENTIAL: 'auth/missing-app-credential',\r\n    MISSING_AUTH_DOMAIN: 'auth/auth-domain-config-required',\r\n    MISSING_CODE: 'auth/missing-verification-code',\r\n    MISSING_CONTINUE_URI: 'auth/missing-continue-uri',\r\n    MISSING_IFRAME_START: 'auth/missing-iframe-start',\r\n    MISSING_IOS_BUNDLE_ID: 'auth/missing-ios-bundle-id',\r\n    MISSING_OR_INVALID_NONCE: 'auth/missing-or-invalid-nonce',\r\n    MISSING_MFA_INFO: 'auth/missing-multi-factor-info',\r\n    MISSING_MFA_SESSION: 'auth/missing-multi-factor-session',\r\n    MISSING_PHONE_NUMBER: 'auth/missing-phone-number',\r\n    MISSING_SESSION_INFO: 'auth/missing-verification-id',\r\n    MODULE_DESTROYED: 'auth/app-deleted',\r\n    NEED_CONFIRMATION: 'auth/account-exists-with-different-credential',\r\n    NETWORK_REQUEST_FAILED: 'auth/network-request-failed',\r\n    NULL_USER: 'auth/null-user',\r\n    NO_AUTH_EVENT: 'auth/no-auth-event',\r\n    NO_SUCH_PROVIDER: 'auth/no-such-provider',\r\n    OPERATION_NOT_ALLOWED: 'auth/operation-not-allowed',\r\n    OPERATION_NOT_SUPPORTED: 'auth/operation-not-supported-in-this-environment',\r\n    POPUP_BLOCKED: 'auth/popup-blocked',\r\n    POPUP_CLOSED_BY_USER: 'auth/popup-closed-by-user',\r\n    PROVIDER_ALREADY_LINKED: 'auth/provider-already-linked',\r\n    QUOTA_EXCEEDED: 'auth/quota-exceeded',\r\n    REDIRECT_CANCELLED_BY_USER: 'auth/redirect-cancelled-by-user',\r\n    REDIRECT_OPERATION_PENDING: 'auth/redirect-operation-pending',\r\n    REJECTED_CREDENTIAL: 'auth/rejected-credential',\r\n    SECOND_FACTOR_ALREADY_ENROLLED: 'auth/second-factor-already-in-use',\r\n    SECOND_FACTOR_LIMIT_EXCEEDED: 'auth/maximum-second-factor-count-exceeded',\r\n    TENANT_ID_MISMATCH: 'auth/tenant-id-mismatch',\r\n    TIMEOUT: 'auth/timeout',\r\n    TOKEN_EXPIRED: 'auth/user-token-expired',\r\n    TOO_MANY_ATTEMPTS_TRY_LATER: 'auth/too-many-requests',\r\n    UNAUTHORIZED_DOMAIN: 'auth/unauthorized-continue-uri',\r\n    UNSUPPORTED_FIRST_FACTOR: 'auth/unsupported-first-factor',\r\n    UNSUPPORTED_PERSISTENCE: 'auth/unsupported-persistence-type',\r\n    UNSUPPORTED_TENANT_OPERATION: 'auth/unsupported-tenant-operation',\r\n    UNVERIFIED_EMAIL: 'auth/unverified-email',\r\n    USER_CANCELLED: 'auth/user-cancelled',\r\n    USER_DELETED: 'auth/user-not-found',\r\n    USER_DISABLED: 'auth/user-disabled',\r\n    USER_MISMATCH: 'auth/user-mismatch',\r\n    USER_SIGNED_OUT: 'auth/user-signed-out',\r\n    WEAK_PASSWORD: 'auth/weak-password',\r\n    WEB_STORAGE_UNSUPPORTED: 'auth/web-storage-unsupported',\r\n    ALREADY_INITIALIZED: 'auth/already-initialized'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new _firebase_logger__WEBPACK_IMPORTED_MODULE_2__.Logger('@firebase/auth');\r\nfunction _logError(msg, ...args) {\r\n    if (logClient.logLevel <= _firebase_logger__WEBPACK_IMPORTED_MODULE_2__.LogLevel.ERROR) {\r\n        logClient.error(`Auth (${_firebase_app__WEBPACK_IMPORTED_MODULE_1__.SDK_VERSION}): ${msg}`, ...args);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction _fail(authOrCode, ...rest) {\r\n    throw createErrorInternal(authOrCode, ...rest);\r\n}\r\nfunction _createError(authOrCode, ...rest) {\r\n    return createErrorInternal(authOrCode, ...rest);\r\n}\r\nfunction _errorWithCustomMessage(auth, code, message) {\r\n    const errorMap = Object.assign(Object.assign({}, prodErrorMap()), { [code]: message });\r\n    const factory = new _firebase_util__WEBPACK_IMPORTED_MODULE_0__.ErrorFactory('auth', 'Firebase', errorMap);\r\n    return factory.create(code, {\r\n        appName: auth.name,\r\n    });\r\n}\r\nfunction _assertInstanceOf(auth, object, instance) {\r\n    const constructorInstance = instance;\r\n    if (!(object instanceof constructorInstance)) {\r\n        if (constructorInstance.name !== object.constructor.name) {\r\n            _fail(auth, \"argument-error\" /* ARGUMENT_ERROR */);\r\n        }\r\n        throw _errorWithCustomMessage(auth, \"argument-error\" /* ARGUMENT_ERROR */, `Type of ${object.constructor.name} does not match expected instance.` +\r\n            `Did you pass a reference from a different Auth SDK?`);\r\n    }\r\n}\r\nfunction createErrorInternal(authOrCode, ...rest) {\r\n    if (typeof authOrCode !== 'string') {\r\n        const code = rest[0];\r\n        const fullParams = [...rest.slice(1)];\r\n        if (fullParams[0]) {\r\n            fullParams[0].appName = authOrCode.name;\r\n        }\r\n        return authOrCode._errorFactory.create(code, ...fullParams);\r\n    }\r\n    return _DEFAULT_AUTH_ERROR_FACTORY.create(authOrCode, ...rest);\r\n}\r\nfunction _assert(assertion, authOrCode, ...rest) {\r\n    if (!assertion) {\r\n        throw createErrorInternal(authOrCode, ...rest);\r\n    }\r\n}\r\n/**\r\n * Unconditionally fails, throwing an internal error with the given message.\r\n *\r\n * @param failure type of failure encountered\r\n * @throws Error\r\n */\r\nfunction debugFail(failure) {\r\n    // Log the failure in addition to throw an exception, just in case the\r\n    // exception is swallowed.\r\n    const message = `INTERNAL ASSERTION FAILED: ` + failure;\r\n    _logError(message);\r\n    // NOTE: We don't use FirebaseError here because these are internal failures\r\n    // that cannot be handled by the user. (Also it would create a circular\r\n    // dependency between the error and assert modules which doesn't work.)\r\n    throw new Error(message);\r\n}\r\n/**\r\n * Fails if the given assertion condition is false, throwing an Error with the\r\n * given message if it did.\r\n *\r\n * @param assertion\r\n * @param message\r\n */\r\nfunction debugAssert(assertion, message) {\r\n    if (!assertion) {\r\n        debugFail(message);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst instanceCache = new Map();\r\nfunction _getInstance(cls) {\r\n    debugAssert(cls instanceof Function, 'Expected a class definition');\r\n    let instance = instanceCache.get(cls);\r\n    if (instance) {\r\n        debugAssert(instance instanceof cls, 'Instance stored in cache mismatched with class');\r\n        return instance;\r\n    }\r\n    instance = new cls();\r\n    instanceCache.set(cls, instance);\r\n    return instance;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Initializes an {@link Auth} instance with fine-grained control over\r\n * {@link Dependencies}.\r\n *\r\n * @remarks\r\n *\r\n * This function allows more control over the {@link Auth} instance than\r\n * {@link getAuth}. `getAuth` uses platform-specific defaults to supply\r\n * the {@link Dependencies}. In general, `getAuth` is the easiest way to\r\n * initialize Auth and works for most use cases. Use `initializeAuth` if you\r\n * need control over which persistence layer is used, or to minimize bundle\r\n * size if you're not using either `signInWithPopup` or `signInWithRedirect`.\r\n *\r\n * For example, if your app only uses anonymous accounts and you only want\r\n * accounts saved for the current session, initialize `Auth` with:\r\n *\r\n * ```js\r\n * const auth = initializeAuth(app, {\r\n *   persistence: browserSessionPersistence,\r\n *   popupRedirectResolver: undefined,\r\n * });\r\n * ```\r\n *\r\n * @public\r\n */\r\nfunction initializeAuth(app, deps) {\r\n    const provider = (0,_firebase_app__WEBPACK_IMPORTED_MODULE_1__._getProvider)(app, 'auth');\r\n    if (provider.isInitialized()) {\r\n        const auth = provider.getImmediate();\r\n        const initialOptions = provider.getOptions();\r\n        if ((0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.deepEqual)(initialOptions, deps !== null && deps !== void 0 ? deps : {})) {\r\n            return auth;\r\n        }\r\n        else {\r\n            _fail(auth, \"already-initialized\" /* ALREADY_INITIALIZED */);\r\n        }\r\n    }\r\n    const auth = provider.initialize({ options: deps });\r\n    return auth;\r\n}\r\nfunction _initializeAuthInstance(auth, deps) {\r\n    const persistence = (deps === null || deps === void 0 ? void 0 : deps.persistence) || [];\r\n    const hierarchy = (Array.isArray(persistence) ? persistence : [persistence]).map(_getInstance);\r\n    if (deps === null || deps === void 0 ? void 0 : deps.errorMap) {\r\n        auth._updateErrorMap(deps.errorMap);\r\n    }\r\n    // This promise is intended to float; auth initialization happens in the\r\n    // background, meanwhile the auth object may be used by the app.\r\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n    auth._initializeWithPersistence(hierarchy, deps === null || deps === void 0 ? void 0 : deps.popupRedirectResolver);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction _getCurrentUrl() {\r\n    var _a;\r\n    return (typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.href)) || '';\r\n}\r\nfunction _isHttpOrHttps() {\r\n    return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\r\n}\r\nfunction _getCurrentScheme() {\r\n    var _a;\r\n    return (typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.protocol)) || null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Determine whether the browser is working online\r\n */\r\nfunction _isOnline() {\r\n    if (typeof navigator !== 'undefined' &&\r\n        navigator &&\r\n        'onLine' in navigator &&\r\n        typeof navigator.onLine === 'boolean' &&\r\n        // Apply only for traditional web apps and Chrome extensions.\r\n        // This is especially true for Cordova apps which have unreliable\r\n        // navigator.onLine behavior unless cordova-plugin-network-information is\r\n        // installed which overwrites the native navigator.onLine value and\r\n        // defines navigator.connection.\r\n        (_isHttpOrHttps() || (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.isBrowserExtension)() || 'connection' in navigator)) {\r\n        return navigator.onLine;\r\n    }\r\n    // If we can't determine the state, assume it is online.\r\n    return true;\r\n}\r\nfunction _getUserLanguage() {\r\n    if (typeof navigator === 'undefined') {\r\n        return null;\r\n    }\r\n    const navigatorLanguage = navigator;\r\n    return (\r\n    // Most reliable, but only supported in Chrome/Firefox.\r\n    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||\r\n        // Supported in most browsers, but returns the language of the browser\r\n        // UI, not the language set in browser settings.\r\n        navigatorLanguage.language ||\r\n        // Couldn't determine language.\r\n        null);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A structure to help pick between a range of long and short delay durations\r\n * depending on the current environment. In general, the long delay is used for\r\n * mobile environments whereas short delays are used for desktop environments.\r\n */\r\nclass Delay {\r\n    constructor(shortDelay, longDelay) {\r\n        this.shortDelay = shortDelay;\r\n        this.longDelay = longDelay;\r\n        // Internal error when improperly initialized.\r\n        debugAssert(longDelay > shortDelay, 'Short delay should be less than long delay!');\r\n        this.isMobile = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.isMobileCordova)() || (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.isReactNative)();\r\n    }\r\n    get() {\r\n        if (!_isOnline()) {\r\n            // Pick the shorter timeout.\r\n            return Math.min(5000 /* OFFLINE */, this.shortDelay);\r\n        }\r\n        // If running in a mobile environment, return the long delay, otherwise\r\n        // return the short delay.\r\n        // This could be improved in the future to dynamically change based on other\r\n        // variables instead of just reading the current environment.\r\n        return this.isMobile ? this.longDelay : this.shortDelay;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction _emulatorUrl(config, path) {\r\n    debugAssert(config.emulator, 'Emulator should always be set here');\r\n    const { url } = config.emulator;\r\n    if (!path) {\r\n        return url;\r\n    }\r\n    return `${url}${path.startsWith('/') ? path.slice(1) : path}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FetchProvider {\r\n    static initialize(fetchImpl, headersImpl, responseImpl) {\r\n        this.fetchImpl = fetchImpl;\r\n        if (headersImpl) {\r\n            this.headersImpl = headersImpl;\r\n        }\r\n        if (responseImpl) {\r\n            this.responseImpl = responseImpl;\r\n        }\r\n    }\r\n    static fetch() {\r\n        if (this.fetchImpl) {\r\n            return this.fetchImpl;\r\n        }\r\n        if (typeof self !== 'undefined' && 'fetch' in self) {\r\n            return self.fetch;\r\n        }\r\n        debugFail('Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\r\n    }\r\n    static headers() {\r\n        if (this.headersImpl) {\r\n            return this.headersImpl;\r\n        }\r\n        if (typeof self !== 'undefined' && 'Headers' in self) {\r\n            return self.Headers;\r\n        }\r\n        debugFail('Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\r\n    }\r\n    static response() {\r\n        if (this.responseImpl) {\r\n            return this.responseImpl;\r\n        }\r\n        if (typeof self !== 'undefined' && 'Response' in self) {\r\n            return self.Response;\r\n        }\r\n        debugFail('Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Map from errors returned by the server to errors to developer visible errors\r\n */\r\nconst SERVER_ERROR_MAP = {\r\n    // Custom token errors.\r\n    [\"CREDENTIAL_MISMATCH\" /* CREDENTIAL_MISMATCH */]: \"custom-token-mismatch\" /* CREDENTIAL_MISMATCH */,\r\n    // This can only happen if the SDK sends a bad request.\r\n    [\"MISSING_CUSTOM_TOKEN\" /* MISSING_CUSTOM_TOKEN */]: \"internal-error\" /* INTERNAL_ERROR */,\r\n    // Create Auth URI errors.\r\n    [\"INVALID_IDENTIFIER\" /* INVALID_IDENTIFIER */]: \"invalid-email\" /* INVALID_EMAIL */,\r\n    // This can only happen if the SDK sends a bad request.\r\n    [\"MISSING_CONTINUE_URI\" /* MISSING_CONTINUE_URI */]: \"internal-error\" /* INTERNAL_ERROR */,\r\n    // Sign in with email and password errors (some apply to sign up too).\r\n    [\"INVALID_PASSWORD\" /* INVALID_PASSWORD */]: \"wrong-password\" /* INVALID_PASSWORD */,\r\n    // This can only happen if the SDK sends a bad request.\r\n    [\"MISSING_PASSWORD\" /* MISSING_PASSWORD */]: \"internal-error\" /* INTERNAL_ERROR */,\r\n    // Sign up with email and password errors.\r\n    [\"EMAIL_EXISTS\" /* EMAIL_EXISTS */]: \"email-already-in-use\" /* EMAIL_EXISTS */,\r\n    [\"PASSWORD_LOGIN_DISABLED\" /* PASSWORD_LOGIN_DISABLED */]: \"operation-not-allowed\" /* OPERATION_NOT_ALLOWED */,\r\n    // Verify assertion for sign in with credential errors:\r\n    [\"INVALID_IDP_RESPONSE\" /* INVALID_IDP_RESPONSE */]: \"invalid-credential\" /* INVALID_IDP_RESPONSE */,\r\n    [\"INVALID_PENDING_TOKEN\" /* INVALID_PENDING_TOKEN */]: \"invalid-credential\" /* INVALID_IDP_RESPONSE */,\r\n    [\"FEDERATED_USER_ID_ALREADY_LINKED\" /* FEDERATED_USER_ID_ALREADY_LINKED */]: \"credential-already-in-use\" /* CREDENTIAL_ALREADY_IN_USE */,\r\n    // This can only happen if the SDK sends a bad request.\r\n    [\"MISSING_REQ_TYPE\" /* MISSING_REQ_TYPE */]: \"internal-error\" /* INTERNAL_ERROR */,\r\n    // Send Password reset email errors:\r\n    [\"EMAIL_NOT_FOUND\" /* EMAIL_NOT_FOUND */]: \"user-not-found\" /* USER_DELETED */,\r\n    [\"RESET_PASSWORD_EXCEED_LIMIT\" /* RESET_PASSWORD_EXCEED_LIMIT */]: \"too-many-requests\" /* TOO_MANY_ATTEMPTS_TRY_LATER */,\r\n    [\"EXPIRED_OOB_CODE\" /* EXPIRED_OOB_CODE */]: \"expired-action-code\" /* EXPIRED_OOB_CODE */,\r\n    [\"INVALID_OOB_CODE\" /* INVALID_OOB_CODE */]: \"invalid-action-code\" /* INVALID_OOB_CODE */,\r\n    // This can only happen if the SDK sends a bad request.\r\n    [\"MISSING_OOB_CODE\" /* MISSING_OOB_CODE */]: \"internal-error\" /* INTERNAL_ERROR */,\r\n    // Operations that require ID token in request:\r\n    [\"CREDENTIAL_TOO_OLD_LOGIN_AGAIN\" /* CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: \"requires-recent-login\" /* CREDENTIAL_TOO_OLD_LOGIN_AGAIN */,\r\n    [\"INVALID_ID_TOKEN\" /* INVALID_ID_TOKEN */]: \"invalid-user-token\" /* INVALID_AUTH */,\r\n    [\"TOKEN_EXPIRED\" /* TOKEN_EXPIRED */]: \"user-token-expired\" /* TOKEN_EXPIRED */,\r\n    [\"USER_NOT_FOUND\" /* USER_NOT_FOUND */]: \"user-token-expired\" /* TOKEN_EXPIRED */,\r\n    // Other errors.\r\n    [\"TOO_MANY_ATTEMPTS_TRY_LATER\" /* TOO_MANY_ATTEMPTS_TRY_LATER */]: \"too-many-requests\" /* TOO_MANY_ATTEMPTS_TRY_LATER */,\r\n    // Phone Auth related errors.\r\n    [\"INVALID_CODE\" /* INVALID_CODE */]: \"invalid-verification-code\" /* INVALID_CODE */,\r\n    [\"INVALID_SESSION_INFO\" /* INVALID_SESSION_INFO */]: \"invalid-verification-id\" /* INVALID_SESSION_INFO */,\r\n    [\"INVALID_TEMPORARY_PROOF\" /* INVALID_TEMPORARY_PROOF */]: \"invalid-credential\" /* INVALID_IDP_RESPONSE */,\r\n    [\"MISSING_SESSION_INFO\" /* MISSING_SESSION_INFO */]: \"missing-verification-id\" /* MISSING_SESSION_INFO */,\r\n    [\"SESSION_EXPIRED\" /* SESSION_EXPIRED */]: \"code-expired\" /* CODE_EXPIRED */,\r\n    // Other action code errors when additional settings passed.\r\n    // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.\r\n    // This is OK as this error will be caught by client side validation.\r\n    [\"MISSING_ANDROID_PACKAGE_NAME\" /* MISSING_ANDROID_PACKAGE_NAME */]: \"missing-android-pkg-name\" /* MISSING_ANDROID_PACKAGE_NAME */,\r\n    [\"UNAUTHORIZED_DOMAIN\" /* UNAUTHORIZED_DOMAIN */]: \"unauthorized-continue-uri\" /* UNAUTHORIZED_DOMAIN */,\r\n    // getProjectConfig errors when clientId is passed.\r\n    [\"INVALID_OAUTH_CLIENT_ID\" /* INVALID_OAUTH_CLIENT_ID */]: \"invalid-oauth-client-id\" /* INVALID_OAUTH_CLIENT_ID */,\r\n    // User actions (sign-up or deletion) disabled errors.\r\n    [\"ADMIN_ONLY_OPERATION\" /* ADMIN_ONLY_OPERATION */]: \"admin-restricted-operation\" /* ADMIN_ONLY_OPERATION */,\r\n    // Multi factor related errors.\r\n    [\"INVALID_MFA_PENDING_CREDENTIAL\" /* INVALID_MFA_PENDING_CREDENTIAL */]: \"invalid-multi-factor-session\" /* INVALID_MFA_SESSION */,\r\n    [\"MFA_ENROLLMENT_NOT_FOUND\" /* MFA_ENROLLMENT_NOT_FOUND */]: \"multi-factor-info-not-found\" /* MFA_INFO_NOT_FOUND */,\r\n    [\"MISSING_MFA_ENROLLMENT_ID\" /* MISSING_MFA_ENROLLMENT_ID */]: \"missing-multi-factor-info\" /* MISSING_MFA_INFO */,\r\n    [\"MISSING_MFA_PENDING_CREDENTIAL\" /* MISSING_MFA_PENDING_CREDENTIAL */]: \"missing-multi-factor-session\" /* MISSING_MFA_SESSION */,\r\n    [\"SECOND_FACTOR_EXISTS\" /* SECOND_FACTOR_EXISTS */]: \"second-factor-already-in-use\" /* SECOND_FACTOR_ALREADY_ENROLLED */,\r\n    [\"SECOND_FACTOR_LIMIT_EXCEEDED\" /* SECOND_FACTOR_LIMIT_EXCEEDED */]: \"maximum-second-factor-count-exceeded\" /* SECOND_FACTOR_LIMIT_EXCEEDED */,\r\n    // Blocking functions related errors.\r\n    [\"BLOCKING_FUNCTION_ERROR_RESPONSE\" /* BLOCKING_FUNCTION_ERROR_RESPONSE */]: \"internal-error\" /* INTERNAL_ERROR */,\r\n};\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_API_TIMEOUT_MS = new Delay(30000, 60000);\r\nfunction _addTidIfNecessary(auth, request) {\r\n    if (auth.tenantId && !request.tenantId) {\r\n        return Object.assign(Object.assign({}, request), { tenantId: auth.tenantId });\r\n    }\r\n    return request;\r\n}\r\nasync function _performApiRequest(auth, method, path, request, customErrorMap = {}) {\r\n    return _performFetchWithErrorHandling(auth, customErrorMap, () => {\r\n        let body = {};\r\n        let params = {};\r\n        if (request) {\r\n            if (method === \"GET\" /* GET */) {\r\n                params = request;\r\n            }\r\n            else {\r\n                body = {\r\n                    body: JSON.stringify(request)\r\n                };\r\n            }\r\n        }\r\n        const query = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.querystring)(Object.assign({ key: auth.config.apiKey }, params)).slice(1);\r\n        const headers = new (FetchProvider.headers())();\r\n        headers.set(\"Content-Type\" /* CONTENT_TYPE */, 'application/json');\r\n        headers.set(\"X-Client-Version\" /* X_CLIENT_VERSION */, auth._getSdkClientVersion());\r\n        if (auth.languageCode) {\r\n            headers.set(\"X-Firebase-Locale\" /* X_FIREBASE_LOCALE */, auth.languageCode);\r\n        }\r\n        return FetchProvider.fetch()(_getFinalTarget(auth, auth.config.apiHost, path, query), Object.assign({ method,\r\n            headers, referrerPolicy: 'no-referrer' }, body));\r\n    });\r\n}\r\nasync function _performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {\r\n    auth._canInitEmulator = false;\r\n    const errorMap = Object.assign(Object.assign({}, SERVER_ERROR_MAP), customErrorMap);\r\n    try {\r\n        const networkTimeout = new NetworkTimeout(auth);\r\n        const response = await Promise.race([\r\n            fetchFn(),\r\n            networkTimeout.promise\r\n        ]);\r\n        // If we've reached this point, the fetch succeeded and the networkTimeout\r\n        // didn't throw; clear the network timeout delay so that Node won't hang\r\n        networkTimeout.clearNetworkTimeout();\r\n        const json = await response.json();\r\n        if ('needConfirmation' in json) {\r\n            throw _makeTaggedError(auth, \"account-exists-with-different-credential\" /* NEED_CONFIRMATION */, json);\r\n        }\r\n        if (response.ok && !('errorMessage' in json)) {\r\n            return json;\r\n        }\r\n        else {\r\n            const errorMessage = response.ok ? json.errorMessage : json.error.message;\r\n            const [serverErrorCode, serverErrorMessage] = errorMessage.split(' : ');\r\n            if (serverErrorCode === \"FEDERATED_USER_ID_ALREADY_LINKED\" /* FEDERATED_USER_ID_ALREADY_LINKED */) {\r\n                throw _makeTaggedError(auth, \"credential-already-in-use\" /* CREDENTIAL_ALREADY_IN_USE */, json);\r\n            }\r\n            else if (serverErrorCode === \"EMAIL_EXISTS\" /* EMAIL_EXISTS */) {\r\n                throw _makeTaggedError(auth, \"email-already-in-use\" /* EMAIL_EXISTS */, json);\r\n            }\r\n            const authError = errorMap[serverErrorCode] ||\r\n                serverErrorCode\r\n                    .toLowerCase()\r\n                    .replace(/[_\\s]+/g, '-');\r\n            if (serverErrorMessage) {\r\n                throw _errorWithCustomMessage(auth, authError, serverErrorMessage);\r\n            }\r\n            else {\r\n                _fail(auth, authError);\r\n            }\r\n        }\r\n    }\r\n    catch (e) {\r\n        if (e instanceof _firebase_util__WEBPACK_IMPORTED_MODULE_0__.FirebaseError) {\r\n            throw e;\r\n        }\r\n        _fail(auth, \"network-request-failed\" /* NETWORK_REQUEST_FAILED */);\r\n    }\r\n}\r\nasync function _performSignInRequest(auth, method, path, request, customErrorMap = {}) {\r\n    const serverResponse = (await _performApiRequest(auth, method, path, request, customErrorMap));\r\n    if ('mfaPendingCredential' in serverResponse) {\r\n        _fail(auth, \"multi-factor-auth-required\" /* MFA_REQUIRED */, {\r\n            _serverResponse: serverResponse\r\n        });\r\n    }\r\n    return serverResponse;\r\n}\r\nfunction _getFinalTarget(auth, host, path, query) {\r\n    const base = `${host}${path}?${query}`;\r\n    if (!auth.config.emulator) {\r\n        return `${auth.config.apiScheme}://${base}`;\r\n    }\r\n    return _emulatorUrl(auth.config, base);\r\n}\r\nclass NetworkTimeout {\r\n    constructor(auth) {\r\n        this.auth = auth;\r\n        // Node timers and browser timers are fundamentally incompatible, but we\r\n        // don't care about the value here\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        this.timer = null;\r\n        this.promise = new Promise((_, reject) => {\r\n            this.timer = setTimeout(() => {\r\n                return reject(_createError(this.auth, \"timeout\" /* TIMEOUT */));\r\n            }, DEFAULT_API_TIMEOUT_MS.get());\r\n        });\r\n    }\r\n    clearNetworkTimeout() {\r\n        clearTimeout(this.timer);\r\n    }\r\n}\r\nfunction _makeTaggedError(auth, code, response) {\r\n    const errorParams = {\r\n        appName: auth.name\r\n    };\r\n    if (response.email) {\r\n        errorParams.email = response.email;\r\n    }\r\n    if (response.phoneNumber) {\r\n        errorParams.phoneNumber = response.phoneNumber;\r\n    }\r\n    const error = _createError(auth, code, errorParams);\r\n    // We know customData is defined on error because errorParams is defined\r\n    error.customData._tokenResponse = response;\r\n    return error;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function deleteAccount(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* POST */, \"/v1/accounts:delete\" /* DELETE_ACCOUNT */, request);\r\n}\r\nasync function deleteLinkedAccounts(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* POST */, \"/v1/accounts:update\" /* SET_ACCOUNT_INFO */, request);\r\n}\r\nasync function getAccountInfo(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* POST */, \"/v1/accounts:lookup\" /* GET_ACCOUNT_INFO */, request);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction utcTimestampToDateString(utcTimestamp) {\r\n    if (!utcTimestamp) {\r\n        return undefined;\r\n    }\r\n    try {\r\n        // Convert to date object.\r\n        const date = new Date(Number(utcTimestamp));\r\n        // Test date is valid.\r\n        if (!isNaN(date.getTime())) {\r\n            // Convert to UTC date string.\r\n            return date.toUTCString();\r\n        }\r\n    }\r\n    catch (e) {\r\n        // Do nothing. undefined will be returned.\r\n    }\r\n    return undefined;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.\r\n *\r\n * @remarks\r\n * Returns the current token if it has not expired or if it will not expire in the next five\r\n * minutes. Otherwise, this will refresh the token and return a new one.\r\n *\r\n * @param user - The user.\r\n * @param forceRefresh - Force refresh regardless of token expiration.\r\n *\r\n * @public\r\n */\r\nfunction getIdToken(user, forceRefresh = false) {\r\n    return (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(user).getIdToken(forceRefresh);\r\n}\r\n/**\r\n * Returns a deserialized JSON Web Token (JWT) used to identitfy the user to a Firebase service.\r\n *\r\n * @remarks\r\n * Returns the current token if it has not expired or if it will not expire in the next five\r\n * minutes. Otherwise, this will refresh the token and return a new one.\r\n *\r\n * @param user - The user.\r\n * @param forceRefresh - Force refresh regardless of token expiration.\r\n *\r\n * @public\r\n */\r\nasync function getIdTokenResult(user, forceRefresh = false) {\r\n    const userInternal = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(user);\r\n    const token = await userInternal.getIdToken(forceRefresh);\r\n    const claims = _parseToken(token);\r\n    _assert(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n    const firebase = typeof claims.firebase === 'object' ? claims.firebase : undefined;\r\n    const signInProvider = firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_provider'];\r\n    return {\r\n        claims,\r\n        token,\r\n        authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),\r\n        issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),\r\n        expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),\r\n        signInProvider: signInProvider || null,\r\n        signInSecondFactor: (firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_second_factor']) || null\r\n    };\r\n}\r\nfunction secondsStringToMilliseconds(seconds) {\r\n    return Number(seconds) * 1000;\r\n}\r\nfunction _parseToken(token) {\r\n    const [algorithm, payload, signature] = token.split('.');\r\n    if (algorithm === undefined ||\r\n        payload === undefined ||\r\n        signature === undefined) {\r\n        _logError('JWT malformed, contained fewer than 3 sections');\r\n        return null;\r\n    }\r\n    try {\r\n        const decoded = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.base64Decode)(payload);\r\n        if (!decoded) {\r\n            _logError('Failed to decode base64 JWT payload');\r\n            return null;\r\n        }\r\n        return JSON.parse(decoded);\r\n    }\r\n    catch (e) {\r\n        _logError('Caught error parsing JWT payload as JSON', e);\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.\r\n */\r\nfunction _tokenExpiresIn(token) {\r\n    const parsedToken = _parseToken(token);\r\n    _assert(parsedToken, \"internal-error\" /* INTERNAL_ERROR */);\r\n    _assert(typeof parsedToken.exp !== 'undefined', \"internal-error\" /* INTERNAL_ERROR */);\r\n    _assert(typeof parsedToken.iat !== 'undefined', \"internal-error\" /* INTERNAL_ERROR */);\r\n    return Number(parsedToken.exp) - Number(parsedToken.iat);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function _logoutIfInvalidated(user, promise, bypassAuthState = false) {\r\n    if (bypassAuthState) {\r\n        return promise;\r\n    }\r\n    try {\r\n        return await promise;\r\n    }\r\n    catch (e) {\r\n        if (e instanceof _firebase_util__WEBPACK_IMPORTED_MODULE_0__.FirebaseError && isUserInvalidated(e)) {\r\n            if (user.auth.currentUser === user) {\r\n                await user.auth.signOut();\r\n            }\r\n        }\r\n        throw e;\r\n    }\r\n}\r\nfunction isUserInvalidated({ code }) {\r\n    return (code === `auth/${\"user-disabled\" /* USER_DISABLED */}` ||\r\n        code === `auth/${\"user-token-expired\" /* TOKEN_EXPIRED */}`);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ProactiveRefresh {\r\n    constructor(user) {\r\n        this.user = user;\r\n        this.isRunning = false;\r\n        // Node timers and browser timers return fundamentally different types.\r\n        // We don't actually care what the value is but TS won't accept unknown and\r\n        // we can't cast properly in both environments.\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        this.timerId = null;\r\n        this.errorBackoff = 30000 /* RETRY_BACKOFF_MIN */;\r\n    }\r\n    _start() {\r\n        if (this.isRunning) {\r\n            return;\r\n        }\r\n        this.isRunning = true;\r\n        this.schedule();\r\n    }\r\n    _stop() {\r\n        if (!this.isRunning) {\r\n            return;\r\n        }\r\n        this.isRunning = false;\r\n        if (this.timerId !== null) {\r\n            clearTimeout(this.timerId);\r\n        }\r\n    }\r\n    getInterval(wasError) {\r\n        var _a;\r\n        if (wasError) {\r\n            const interval = this.errorBackoff;\r\n            this.errorBackoff = Math.min(this.errorBackoff * 2, 960000 /* RETRY_BACKOFF_MAX */);\r\n            return interval;\r\n        }\r\n        else {\r\n            // Reset the error backoff\r\n            this.errorBackoff = 30000 /* RETRY_BACKOFF_MIN */;\r\n            const expTime = (_a = this.user.stsTokenManager.expirationTime) !== null && _a !== void 0 ? _a : 0;\r\n            const interval = expTime - Date.now() - 300000 /* OFFSET */;\r\n            return Math.max(0, interval);\r\n        }\r\n    }\r\n    schedule(wasError = false) {\r\n        if (!this.isRunning) {\r\n            // Just in case...\r\n            return;\r\n        }\r\n        const interval = this.getInterval(wasError);\r\n        this.timerId = setTimeout(async () => {\r\n            await this.iteration();\r\n        }, interval);\r\n    }\r\n    async iteration() {\r\n        try {\r\n            await this.user.getIdToken(true);\r\n        }\r\n        catch (e) {\r\n            // Only retry on network errors\r\n            if (e.code === `auth/${\"network-request-failed\" /* NETWORK_REQUEST_FAILED */}`) {\r\n                this.schedule(/* wasError */ true);\r\n            }\r\n            return;\r\n        }\r\n        this.schedule();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass UserMetadata {\r\n    constructor(createdAt, lastLoginAt) {\r\n        this.createdAt = createdAt;\r\n        this.lastLoginAt = lastLoginAt;\r\n        this._initializeTime();\r\n    }\r\n    _initializeTime() {\r\n        this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);\r\n        this.creationTime = utcTimestampToDateString(this.createdAt);\r\n    }\r\n    _copy(metadata) {\r\n        this.createdAt = metadata.createdAt;\r\n        this.lastLoginAt = metadata.lastLoginAt;\r\n        this._initializeTime();\r\n    }\r\n    toJSON() {\r\n        return {\r\n            createdAt: this.createdAt,\r\n            lastLoginAt: this.lastLoginAt\r\n        };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function _reloadWithoutSaving(user) {\r\n    var _a;\r\n    const auth = user.auth;\r\n    const idToken = await user.getIdToken();\r\n    const response = await _logoutIfInvalidated(user, getAccountInfo(auth, { idToken }));\r\n    _assert(response === null || response === void 0 ? void 0 : response.users.length, auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n    const coreAccount = response.users[0];\r\n    user._notifyReloadListener(coreAccount);\r\n    const newProviderData = ((_a = coreAccount.providerUserInfo) === null || _a === void 0 ? void 0 : _a.length)\r\n        ? extractProviderData(coreAccount.providerUserInfo)\r\n        : [];\r\n    const providerData = mergeProviderData(user.providerData, newProviderData);\r\n    // Preserves the non-nonymous status of the stored user, even if no more\r\n    // credentials (federated or email/password) are linked to the user. If\r\n    // the user was previously anonymous, then use provider data to update.\r\n    // On the other hand, if it was not anonymous before, it should never be\r\n    // considered anonymous now.\r\n    const oldIsAnonymous = user.isAnonymous;\r\n    const newIsAnonymous = !(user.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);\r\n    const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;\r\n    const updates = {\r\n        uid: coreAccount.localId,\r\n        displayName: coreAccount.displayName || null,\r\n        photoURL: coreAccount.photoUrl || null,\r\n        email: coreAccount.email || null,\r\n        emailVerified: coreAccount.emailVerified || false,\r\n        phoneNumber: coreAccount.phoneNumber || null,\r\n        tenantId: coreAccount.tenantId || null,\r\n        providerData,\r\n        metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\r\n        isAnonymous\r\n    };\r\n    Object.assign(user, updates);\r\n}\r\n/**\r\n * Reloads user account data, if signed in.\r\n *\r\n * @param user - The user.\r\n *\r\n * @public\r\n */\r\nasync function reload(user) {\r\n    const userInternal = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(user);\r\n    await _reloadWithoutSaving(userInternal);\r\n    // Even though the current user hasn't changed, update\r\n    // current user will trigger a persistence update w/ the\r\n    // new info.\r\n    await userInternal.auth._persistUserIfCurrent(userInternal);\r\n    userInternal.auth._notifyListenersIfCurrent(userInternal);\r\n}\r\nfunction mergeProviderData(original, newData) {\r\n    const deduped = original.filter(o => !newData.some(n => n.providerId === o.providerId));\r\n    return [...deduped, ...newData];\r\n}\r\nfunction extractProviderData(providers) {\r\n    return providers.map((_a) => {\r\n        var { providerId } = _a, provider = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__rest)(_a, [\"providerId\"]);\r\n        return {\r\n            providerId,\r\n            uid: provider.rawId || '',\r\n            displayName: provider.displayName || null,\r\n            email: provider.email || null,\r\n            phoneNumber: provider.phoneNumber || null,\r\n            photoURL: provider.photoUrl || null\r\n        };\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function requestStsToken(auth, refreshToken) {\r\n    const response = await _performFetchWithErrorHandling(auth, {}, () => {\r\n        const body = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.querystring)({\r\n            'grant_type': 'refresh_token',\r\n            'refresh_token': refreshToken\r\n        }).slice(1);\r\n        const { tokenApiHost, apiKey } = auth.config;\r\n        const url = _getFinalTarget(auth, tokenApiHost, \"/v1/token\" /* TOKEN */, `key=${apiKey}`);\r\n        return FetchProvider.fetch()(url, {\r\n            method: \"POST\" /* POST */,\r\n            headers: {\r\n                'X-Client-Version': auth._getSdkClientVersion(),\r\n                'Content-Type': 'application/x-www-form-urlencoded'\r\n            },\r\n            body\r\n        });\r\n    });\r\n    // The response comes back in snake_case. Convert to camel:\r\n    return {\r\n        accessToken: response.access_token,\r\n        expiresIn: response.expires_in,\r\n        refreshToken: response.refresh_token\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * We need to mark this class as internal explicitly to exclude it in the public typings, because\r\n * it references AuthInternal which has a circular dependency with UserInternal.\r\n *\r\n * @internal\r\n */\r\nclass StsTokenManager {\r\n    constructor() {\r\n        this.refreshToken = null;\r\n        this.accessToken = null;\r\n        this.expirationTime = null;\r\n    }\r\n    get isExpired() {\r\n        return (!this.expirationTime ||\r\n            Date.now() > this.expirationTime - 30000 /* TOKEN_REFRESH */);\r\n    }\r\n    updateFromServerResponse(response) {\r\n        _assert(response.idToken, \"internal-error\" /* INTERNAL_ERROR */);\r\n        _assert(typeof response.idToken !== 'undefined', \"internal-error\" /* INTERNAL_ERROR */);\r\n        _assert(typeof response.refreshToken !== 'undefined', \"internal-error\" /* INTERNAL_ERROR */);\r\n        const expiresIn = 'expiresIn' in response && typeof response.expiresIn !== 'undefined'\r\n            ? Number(response.expiresIn)\r\n            : _tokenExpiresIn(response.idToken);\r\n        this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);\r\n    }\r\n    async getToken(auth, forceRefresh = false) {\r\n        _assert(!this.accessToken || this.refreshToken, auth, \"user-token-expired\" /* TOKEN_EXPIRED */);\r\n        if (!forceRefresh && this.accessToken && !this.isExpired) {\r\n            return this.accessToken;\r\n        }\r\n        if (this.refreshToken) {\r\n            await this.refresh(auth, this.refreshToken);\r\n            return this.accessToken;\r\n        }\r\n        return null;\r\n    }\r\n    clearRefreshToken() {\r\n        this.refreshToken = null;\r\n    }\r\n    async refresh(auth, oldToken) {\r\n        const { accessToken, refreshToken, expiresIn } = await requestStsToken(auth, oldToken);\r\n        this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));\r\n    }\r\n    updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {\r\n        this.refreshToken = refreshToken || null;\r\n        this.accessToken = accessToken || null;\r\n        this.expirationTime = Date.now() + expiresInSec * 1000;\r\n    }\r\n    static fromJSON(appName, object) {\r\n        const { refreshToken, accessToken, expirationTime } = object;\r\n        const manager = new StsTokenManager();\r\n        if (refreshToken) {\r\n            _assert(typeof refreshToken === 'string', \"internal-error\" /* INTERNAL_ERROR */, {\r\n                appName\r\n            });\r\n            manager.refreshToken = refreshToken;\r\n        }\r\n        if (accessToken) {\r\n            _assert(typeof accessToken === 'string', \"internal-error\" /* INTERNAL_ERROR */, {\r\n                appName\r\n            });\r\n            manager.accessToken = accessToken;\r\n        }\r\n        if (expirationTime) {\r\n            _assert(typeof expirationTime === 'number', \"internal-error\" /* INTERNAL_ERROR */, {\r\n                appName\r\n            });\r\n            manager.expirationTime = expirationTime;\r\n        }\r\n        return manager;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            refreshToken: this.refreshToken,\r\n            accessToken: this.accessToken,\r\n            expirationTime: this.expirationTime\r\n        };\r\n    }\r\n    _assign(stsTokenManager) {\r\n        this.accessToken = stsTokenManager.accessToken;\r\n        this.refreshToken = stsTokenManager.refreshToken;\r\n        this.expirationTime = stsTokenManager.expirationTime;\r\n    }\r\n    _clone() {\r\n        return Object.assign(new StsTokenManager(), this.toJSON());\r\n    }\r\n    _performRefresh() {\r\n        return debugFail('not implemented');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction assertStringOrUndefined(assertion, appName) {\r\n    _assert(typeof assertion === 'string' || typeof assertion === 'undefined', \"internal-error\" /* INTERNAL_ERROR */, { appName });\r\n}\r\nclass UserImpl {\r\n    constructor(_a) {\r\n        var { uid, auth, stsTokenManager } = _a, opt = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__rest)(_a, [\"uid\", \"auth\", \"stsTokenManager\"]);\r\n        // For the user object, provider is always Firebase.\r\n        this.providerId = \"firebase\" /* FIREBASE */;\r\n        this.emailVerified = false;\r\n        this.isAnonymous = false;\r\n        this.tenantId = null;\r\n        this.providerData = [];\r\n        this.proactiveRefresh = new ProactiveRefresh(this);\r\n        this.reloadUserInfo = null;\r\n        this.reloadListener = null;\r\n        this.uid = uid;\r\n        this.auth = auth;\r\n        this.stsTokenManager = stsTokenManager;\r\n        this.accessToken = stsTokenManager.accessToken;\r\n        this.displayName = opt.displayName || null;\r\n        this.email = opt.email || null;\r\n        this.emailVerified = opt.emailVerified || false;\r\n        this.phoneNumber = opt.phoneNumber || null;\r\n        this.photoURL = opt.photoURL || null;\r\n        this.isAnonymous = opt.isAnonymous || false;\r\n        this.tenantId = opt.tenantId || null;\r\n        this.metadata = new UserMetadata(opt.createdAt || undefined, opt.lastLoginAt || undefined);\r\n    }\r\n    async getIdToken(forceRefresh) {\r\n        const accessToken = await _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));\r\n        _assert(accessToken, this.auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n        if (this.accessToken !== accessToken) {\r\n            this.accessToken = accessToken;\r\n            await this.auth._persistUserIfCurrent(this);\r\n            this.auth._notifyListenersIfCurrent(this);\r\n        }\r\n        return accessToken;\r\n    }\r\n    getIdTokenResult(forceRefresh) {\r\n        return getIdTokenResult(this, forceRefresh);\r\n    }\r\n    reload() {\r\n        return reload(this);\r\n    }\r\n    _assign(user) {\r\n        if (this === user) {\r\n            return;\r\n        }\r\n        _assert(this.uid === user.uid, this.auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n        this.displayName = user.displayName;\r\n        this.photoURL = user.photoURL;\r\n        this.email = user.email;\r\n        this.emailVerified = user.emailVerified;\r\n        this.phoneNumber = user.phoneNumber;\r\n        this.isAnonymous = user.isAnonymous;\r\n        this.tenantId = user.tenantId;\r\n        this.providerData = user.providerData.map(userInfo => (Object.assign({}, userInfo)));\r\n        this.metadata._copy(user.metadata);\r\n        this.stsTokenManager._assign(user.stsTokenManager);\r\n    }\r\n    _clone(auth) {\r\n        return new UserImpl(Object.assign(Object.assign({}, this), { auth, stsTokenManager: this.stsTokenManager._clone() }));\r\n    }\r\n    _onReload(callback) {\r\n        // There should only ever be one listener, and that is a single instance of MultiFactorUser\r\n        _assert(!this.reloadListener, this.auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n        this.reloadListener = callback;\r\n        if (this.reloadUserInfo) {\r\n            this._notifyReloadListener(this.reloadUserInfo);\r\n            this.reloadUserInfo = null;\r\n        }\r\n    }\r\n    _notifyReloadListener(userInfo) {\r\n        if (this.reloadListener) {\r\n            this.reloadListener(userInfo);\r\n        }\r\n        else {\r\n            // If no listener is subscribed yet, save the result so it's available when they do subscribe\r\n            this.reloadUserInfo = userInfo;\r\n        }\r\n    }\r\n    _startProactiveRefresh() {\r\n        this.proactiveRefresh._start();\r\n    }\r\n    _stopProactiveRefresh() {\r\n        this.proactiveRefresh._stop();\r\n    }\r\n    async _updateTokensIfNecessary(response, reload = false) {\r\n        let tokensRefreshed = false;\r\n        if (response.idToken &&\r\n            response.idToken !== this.stsTokenManager.accessToken) {\r\n            this.stsTokenManager.updateFromServerResponse(response);\r\n            tokensRefreshed = true;\r\n        }\r\n        if (reload) {\r\n            await _reloadWithoutSaving(this);\r\n        }\r\n        await this.auth._persistUserIfCurrent(this);\r\n        if (tokensRefreshed) {\r\n            this.auth._notifyListenersIfCurrent(this);\r\n        }\r\n    }\r\n    async delete() {\r\n        const idToken = await this.getIdToken();\r\n        await _logoutIfInvalidated(this, deleteAccount(this.auth, { idToken }));\r\n        this.stsTokenManager.clearRefreshToken();\r\n        // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()\r\n        //       cancels pending actions...\r\n        return this.auth.signOut();\r\n    }\r\n    toJSON() {\r\n        return Object.assign(Object.assign({ uid: this.uid, email: this.email || undefined, emailVerified: this.emailVerified, displayName: this.displayName || undefined, isAnonymous: this.isAnonymous, photoURL: this.photoURL || undefined, phoneNumber: this.phoneNumber || undefined, tenantId: this.tenantId || undefined, providerData: this.providerData.map(userInfo => (Object.assign({}, userInfo))), stsTokenManager: this.stsTokenManager.toJSON(), \r\n            // Redirect event ID must be maintained in case there is a pending\r\n            // redirect event.\r\n            _redirectEventId: this._redirectEventId }, this.metadata.toJSON()), { \r\n            // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):\r\n            apiKey: this.auth.config.apiKey, appName: this.auth.name });\r\n    }\r\n    get refreshToken() {\r\n        return this.stsTokenManager.refreshToken || '';\r\n    }\r\n    static _fromJSON(auth, object) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h;\r\n        const displayName = (_a = object.displayName) !== null && _a !== void 0 ? _a : undefined;\r\n        const email = (_b = object.email) !== null && _b !== void 0 ? _b : undefined;\r\n        const phoneNumber = (_c = object.phoneNumber) !== null && _c !== void 0 ? _c : undefined;\r\n        const photoURL = (_d = object.photoURL) !== null && _d !== void 0 ? _d : undefined;\r\n        const tenantId = (_e = object.tenantId) !== null && _e !== void 0 ? _e : undefined;\r\n        const _redirectEventId = (_f = object._redirectEventId) !== null && _f !== void 0 ? _f : undefined;\r\n        const createdAt = (_g = object.createdAt) !== null && _g !== void 0 ? _g : undefined;\r\n        const lastLoginAt = (_h = object.lastLoginAt) !== null && _h !== void 0 ? _h : undefined;\r\n        const { uid, emailVerified, isAnonymous, providerData, stsTokenManager: plainObjectTokenManager } = object;\r\n        _assert(uid && plainObjectTokenManager, auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n        const stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);\r\n        _assert(typeof uid === 'string', auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n        assertStringOrUndefined(displayName, auth.name);\r\n        assertStringOrUndefined(email, auth.name);\r\n        _assert(typeof emailVerified === 'boolean', auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n        _assert(typeof isAnonymous === 'boolean', auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n        assertStringOrUndefined(phoneNumber, auth.name);\r\n        assertStringOrUndefined(photoURL, auth.name);\r\n        assertStringOrUndefined(tenantId, auth.name);\r\n        assertStringOrUndefined(_redirectEventId, auth.name);\r\n        assertStringOrUndefined(createdAt, auth.name);\r\n        assertStringOrUndefined(lastLoginAt, auth.name);\r\n        const user = new UserImpl({\r\n            uid,\r\n            auth,\r\n            email,\r\n            emailVerified,\r\n            displayName,\r\n            isAnonymous,\r\n            photoURL,\r\n            phoneNumber,\r\n            tenantId,\r\n            stsTokenManager,\r\n            createdAt,\r\n            lastLoginAt\r\n        });\r\n        if (providerData && Array.isArray(providerData)) {\r\n            user.providerData = providerData.map(userInfo => (Object.assign({}, userInfo)));\r\n        }\r\n        if (_redirectEventId) {\r\n            user._redirectEventId = _redirectEventId;\r\n        }\r\n        return user;\r\n    }\r\n    /**\r\n     * Initialize a User from an idToken server response\r\n     * @param auth\r\n     * @param idTokenResponse\r\n     */\r\n    static async _fromIdTokenResponse(auth, idTokenResponse, isAnonymous = false) {\r\n        const stsTokenManager = new StsTokenManager();\r\n        stsTokenManager.updateFromServerResponse(idTokenResponse);\r\n        // Initialize the Firebase Auth user.\r\n        const user = new UserImpl({\r\n            uid: idTokenResponse.localId,\r\n            auth,\r\n            stsTokenManager,\r\n            isAnonymous\r\n        });\r\n        // Updates the user info and data and resolves with a user instance.\r\n        await _reloadWithoutSaving(user);\r\n        return user;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass InMemoryPersistence {\r\n    constructor() {\r\n        this.type = \"NONE\" /* NONE */;\r\n        this.storage = {};\r\n    }\r\n    async _isAvailable() {\r\n        return true;\r\n    }\r\n    async _set(key, value) {\r\n        this.storage[key] = value;\r\n    }\r\n    async _get(key) {\r\n        const value = this.storage[key];\r\n        return value === undefined ? null : value;\r\n    }\r\n    async _remove(key) {\r\n        delete this.storage[key];\r\n    }\r\n    _addListener(_key, _listener) {\r\n        // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\r\n        return;\r\n    }\r\n    _removeListener(_key, _listener) {\r\n        // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\r\n        return;\r\n    }\r\n}\r\nInMemoryPersistence.type = 'NONE';\r\n/**\r\n * An implementation of {@link Persistence} of type 'NONE'.\r\n *\r\n * @public\r\n */\r\nconst inMemoryPersistence = InMemoryPersistence;\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction _persistenceKeyName(key, apiKey, appName) {\r\n    return `${\"firebase\" /* PERSISTENCE */}:${key}:${apiKey}:${appName}`;\r\n}\r\nclass PersistenceUserManager {\r\n    constructor(persistence, auth, userKey) {\r\n        this.persistence = persistence;\r\n        this.auth = auth;\r\n        this.userKey = userKey;\r\n        const { config, name } = this.auth;\r\n        this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);\r\n        this.fullPersistenceKey = _persistenceKeyName(\"persistence\" /* PERSISTENCE_USER */, config.apiKey, name);\r\n        this.boundEventHandler = auth._onStorageEvent.bind(auth);\r\n        this.persistence._addListener(this.fullUserKey, this.boundEventHandler);\r\n    }\r\n    setCurrentUser(user) {\r\n        return this.persistence._set(this.fullUserKey, user.toJSON());\r\n    }\r\n    async getCurrentUser() {\r\n        const blob = await this.persistence._get(this.fullUserKey);\r\n        return blob ? UserImpl._fromJSON(this.auth, blob) : null;\r\n    }\r\n    removeCurrentUser() {\r\n        return this.persistence._remove(this.fullUserKey);\r\n    }\r\n    savePersistenceForRedirect() {\r\n        return this.persistence._set(this.fullPersistenceKey, this.persistence.type);\r\n    }\r\n    async setPersistence(newPersistence) {\r\n        if (this.persistence === newPersistence) {\r\n            return;\r\n        }\r\n        const currentUser = await this.getCurrentUser();\r\n        await this.removeCurrentUser();\r\n        this.persistence = newPersistence;\r\n        if (currentUser) {\r\n            return this.setCurrentUser(currentUser);\r\n        }\r\n    }\r\n    delete() {\r\n        this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);\r\n    }\r\n    static async create(auth, persistenceHierarchy, userKey = \"authUser\" /* AUTH_USER */) {\r\n        if (!persistenceHierarchy.length) {\r\n            return new PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey);\r\n        }\r\n        // Eliminate any persistences that are not available\r\n        const availablePersistences = (await Promise.all(persistenceHierarchy.map(async (persistence) => {\r\n            if (await persistence._isAvailable()) {\r\n                return persistence;\r\n            }\r\n            return undefined;\r\n        }))).filter(persistence => persistence);\r\n        // Fall back to the first persistence listed, or in memory if none available\r\n        let selectedPersistence = availablePersistences[0] ||\r\n            _getInstance(inMemoryPersistence);\r\n        const key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);\r\n        // Pull out the existing user, setting the chosen persistence to that\r\n        // persistence if the user exists.\r\n        let userToMigrate = null;\r\n        // Note, here we check for a user in _all_ persistences, not just the\r\n        // ones deemed available. If we can migrate a user out of a broken\r\n        // persistence, we will (but only if that persistence supports migration).\r\n        for (const persistence of persistenceHierarchy) {\r\n            try {\r\n                const blob = await persistence._get(key);\r\n                if (blob) {\r\n                    const user = UserImpl._fromJSON(auth, blob); // throws for unparsable blob (wrong format)\r\n                    if (persistence !== selectedPersistence) {\r\n                        userToMigrate = user;\r\n                    }\r\n                    selectedPersistence = persistence;\r\n                    break;\r\n                }\r\n            }\r\n            catch (_a) { }\r\n        }\r\n        // If we find the user in a persistence that does support migration, use\r\n        // that migration path (of only persistences that support migration)\r\n        const migrationHierarchy = availablePersistences.filter(p => p._shouldAllowMigration);\r\n        // If the persistence does _not_ allow migration, just finish off here\r\n        if (!selectedPersistence._shouldAllowMigration ||\r\n            !migrationHierarchy.length) {\r\n            return new PersistenceUserManager(selectedPersistence, auth, userKey);\r\n        }\r\n        selectedPersistence = migrationHierarchy[0];\r\n        if (userToMigrate) {\r\n            // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does\r\n            // we'll just let it bubble to surface the error.\r\n            await selectedPersistence._set(key, userToMigrate.toJSON());\r\n        }\r\n        // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues\r\n        // such as users getting stuck with a previous account after signing out and refreshing the tab.\r\n        await Promise.all(persistenceHierarchy.map(async (persistence) => {\r\n            if (persistence !== selectedPersistence) {\r\n                try {\r\n                    await persistence._remove(key);\r\n                }\r\n                catch (_a) { }\r\n            }\r\n        }));\r\n        return new PersistenceUserManager(selectedPersistence, auth, userKey);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Determine the browser for the purposes of reporting usage to the API\r\n */\r\nfunction _getBrowserName(userAgent) {\r\n    const ua = userAgent.toLowerCase();\r\n    if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) {\r\n        return \"Opera\" /* OPERA */;\r\n    }\r\n    else if (_isIEMobile(ua)) {\r\n        // Windows phone IEMobile browser.\r\n        return \"IEMobile\" /* IEMOBILE */;\r\n    }\r\n    else if (ua.includes('msie') || ua.includes('trident/')) {\r\n        return \"IE\" /* IE */;\r\n    }\r\n    else if (ua.includes('edge/')) {\r\n        return \"Edge\" /* EDGE */;\r\n    }\r\n    else if (_isFirefox(ua)) {\r\n        return \"Firefox\" /* FIREFOX */;\r\n    }\r\n    else if (ua.includes('silk/')) {\r\n        return \"Silk\" /* SILK */;\r\n    }\r\n    else if (_isBlackBerry(ua)) {\r\n        // Blackberry browser.\r\n        return \"Blackberry\" /* BLACKBERRY */;\r\n    }\r\n    else if (_isWebOS(ua)) {\r\n        // WebOS default browser.\r\n        return \"Webos\" /* WEBOS */;\r\n    }\r\n    else if (_isSafari(ua)) {\r\n        return \"Safari\" /* SAFARI */;\r\n    }\r\n    else if ((ua.includes('chrome/') || _isChromeIOS(ua)) &&\r\n        !ua.includes('edge/')) {\r\n        return \"Chrome\" /* CHROME */;\r\n    }\r\n    else if (_isAndroid(ua)) {\r\n        // Android stock browser.\r\n        return \"Android\" /* ANDROID */;\r\n    }\r\n    else {\r\n        // Most modern browsers have name/version at end of user agent string.\r\n        const re = /([a-zA-Z\\d\\.]+)\\/[a-zA-Z\\d\\.]*$/;\r\n        const matches = userAgent.match(re);\r\n        if ((matches === null || matches === void 0 ? void 0 : matches.length) === 2) {\r\n            return matches[1];\r\n        }\r\n    }\r\n    return \"Other\" /* OTHER */;\r\n}\r\nfunction _isFirefox(ua = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getUA)()) {\r\n    return /firefox\\//i.test(ua);\r\n}\r\nfunction _isSafari(userAgent = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getUA)()) {\r\n    const ua = userAgent.toLowerCase();\r\n    return (ua.includes('safari/') &&\r\n        !ua.includes('chrome/') &&\r\n        !ua.includes('crios/') &&\r\n        !ua.includes('android'));\r\n}\r\nfunction _isChromeIOS(ua = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getUA)()) {\r\n    return /crios\\//i.test(ua);\r\n}\r\nfunction _isIEMobile(ua = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getUA)()) {\r\n    return /iemobile/i.test(ua);\r\n}\r\nfunction _isAndroid(ua = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getUA)()) {\r\n    return /android/i.test(ua);\r\n}\r\nfunction _isBlackBerry(ua = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getUA)()) {\r\n    return /blackberry/i.test(ua);\r\n}\r\nfunction _isWebOS(ua = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getUA)()) {\r\n    return /webos/i.test(ua);\r\n}\r\nfunction _isIOS(ua = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getUA)()) {\r\n    return /iphone|ipad|ipod/i.test(ua);\r\n}\r\nfunction _isIOS7Or8(ua = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getUA)()) {\r\n    return (/(iPad|iPhone|iPod).*OS 7_\\d/i.test(ua) ||\r\n        /(iPad|iPhone|iPod).*OS 8_\\d/i.test(ua));\r\n}\r\nfunction _isIOSStandalone(ua = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getUA)()) {\r\n    var _a;\r\n    return _isIOS(ua) && !!((_a = window.navigator) === null || _a === void 0 ? void 0 : _a.standalone);\r\n}\r\nfunction _isIE10() {\r\n    return (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.isIE)() && document.documentMode === 10;\r\n}\r\nfunction _isMobileBrowser(ua = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getUA)()) {\r\n    // TODO: implement getBrowserName equivalent for OS.\r\n    return (_isIOS(ua) ||\r\n        _isAndroid(ua) ||\r\n        _isWebOS(ua) ||\r\n        _isBlackBerry(ua) ||\r\n        /windows phone/i.test(ua) ||\r\n        _isIEMobile(ua));\r\n}\r\nfunction _isIframe() {\r\n    try {\r\n        // Check that the current window is not the top window.\r\n        // If so, return true.\r\n        return !!(window && window !== window.top);\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/*\r\n * Determine the SDK version string\r\n */\r\nfunction _getClientVersion(clientPlatform, frameworks = []) {\r\n    let reportedPlatform;\r\n    switch (clientPlatform) {\r\n        case \"Browser\" /* BROWSER */:\r\n            // In a browser environment, report the browser name.\r\n            reportedPlatform = _getBrowserName((0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getUA)());\r\n            break;\r\n        case \"Worker\" /* WORKER */:\r\n            // Technically a worker runs from a browser but we need to differentiate a\r\n            // worker from a browser.\r\n            // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.\r\n            reportedPlatform = `${_getBrowserName((0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getUA)())}-${clientPlatform}`;\r\n            break;\r\n        default:\r\n            reportedPlatform = clientPlatform;\r\n    }\r\n    const reportedFrameworks = frameworks.length\r\n        ? frameworks.join(',')\r\n        : 'FirebaseCore-web'; /* default value if no other framework is used */\r\n    return `${reportedPlatform}/${\"JsCore\" /* CORE */}/${_firebase_app__WEBPACK_IMPORTED_MODULE_1__.SDK_VERSION}/${reportedFrameworks}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AuthImpl {\r\n    constructor(app, config) {\r\n        this.app = app;\r\n        this.config = config;\r\n        this.currentUser = null;\r\n        this.emulatorConfig = null;\r\n        this.operations = Promise.resolve();\r\n        this.authStateSubscription = new Subscription(this);\r\n        this.idTokenSubscription = new Subscription(this);\r\n        this.redirectUser = null;\r\n        this.isProactiveRefreshEnabled = false;\r\n        // Any network calls will set this to true and prevent subsequent emulator\r\n        // initialization\r\n        this._canInitEmulator = true;\r\n        this._isInitialized = false;\r\n        this._deleted = false;\r\n        this._initializationPromise = null;\r\n        this._popupRedirectResolver = null;\r\n        this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;\r\n        // Tracks the last notified UID for state change listeners to prevent\r\n        // repeated calls to the callbacks. Undefined means it's never been\r\n        // called, whereas null means it's been called with a signed out user\r\n        this.lastNotifiedUid = undefined;\r\n        this.languageCode = null;\r\n        this.tenantId = null;\r\n        this.settings = { appVerificationDisabledForTesting: false };\r\n        this.frameworks = [];\r\n        this.name = app.name;\r\n        this.clientVersion = config.sdkClientVersion;\r\n    }\r\n    _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {\r\n        if (popupRedirectResolver) {\r\n            this._popupRedirectResolver = _getInstance(popupRedirectResolver);\r\n        }\r\n        // Have to check for app deletion throughout initialization (after each\r\n        // promise resolution)\r\n        this._initializationPromise = this.queue(async () => {\r\n            var _a;\r\n            if (this._deleted) {\r\n                return;\r\n            }\r\n            this.persistenceManager = await PersistenceUserManager.create(this, persistenceHierarchy);\r\n            if (this._deleted) {\r\n                return;\r\n            }\r\n            // Initialize the resolver early if necessary (only applicable to web:\r\n            // this will cause the iframe to load immediately in certain cases)\r\n            if ((_a = this._popupRedirectResolver) === null || _a === void 0 ? void 0 : _a._shouldInitProactively) {\r\n                await this._popupRedirectResolver._initialize(this);\r\n            }\r\n            await this.initializeCurrentUser(popupRedirectResolver);\r\n            if (this._deleted) {\r\n                return;\r\n            }\r\n            this._isInitialized = true;\r\n        });\r\n        return this._initializationPromise;\r\n    }\r\n    /**\r\n     * If the persistence is changed in another window, the user manager will let us know\r\n     */\r\n    async _onStorageEvent() {\r\n        if (this._deleted) {\r\n            return;\r\n        }\r\n        const user = await this.assertedPersistence.getCurrentUser();\r\n        if (!this.currentUser && !user) {\r\n            // No change, do nothing (was signed out and remained signed out).\r\n            return;\r\n        }\r\n        // If the same user is to be synchronized.\r\n        if (this.currentUser && user && this.currentUser.uid === user.uid) {\r\n            // Data update, simply copy data changes.\r\n            this._currentUser._assign(user);\r\n            // If tokens changed from previous user tokens, this will trigger\r\n            // notifyAuthListeners_.\r\n            await this.currentUser.getIdToken();\r\n            return;\r\n        }\r\n        // Update current Auth state. Either a new login or logout.\r\n        await this._updateCurrentUser(user);\r\n    }\r\n    async initializeCurrentUser(popupRedirectResolver) {\r\n        var _a;\r\n        // First check to see if we have a pending redirect event.\r\n        let storedUser = (await this.assertedPersistence.getCurrentUser());\r\n        if (popupRedirectResolver && this.config.authDomain) {\r\n            await this.getOrInitRedirectPersistenceManager();\r\n            const redirectUserEventId = (_a = this.redirectUser) === null || _a === void 0 ? void 0 : _a._redirectEventId;\r\n            const storedUserEventId = storedUser === null || storedUser === void 0 ? void 0 : storedUser._redirectEventId;\r\n            const result = await this.tryRedirectSignIn(popupRedirectResolver);\r\n            // If the stored user (i.e. the old \"currentUser\") has a redirectId that\r\n            // matches the redirect user, then we want to initially sign in with the\r\n            // new user object from result.\r\n            // TODO(samgho): More thoroughly test all of this\r\n            if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) &&\r\n                (result === null || result === void 0 ? void 0 : result.user)) {\r\n                storedUser = result.user;\r\n            }\r\n        }\r\n        // If no user in persistence, there is no current user. Set to null.\r\n        if (!storedUser) {\r\n            return this.directlySetCurrentUser(null);\r\n        }\r\n        if (!storedUser._redirectEventId) {\r\n            // This isn't a redirect user, we can reload and bail\r\n            // This will also catch the redirected user, if available, as that method\r\n            // strips the _redirectEventId\r\n            return this.reloadAndSetCurrentUserOrClear(storedUser);\r\n        }\r\n        _assert(this._popupRedirectResolver, this, \"argument-error\" /* ARGUMENT_ERROR */);\r\n        await this.getOrInitRedirectPersistenceManager();\r\n        // If the redirect user's event ID matches the current user's event ID,\r\n        // DO NOT reload the current user, otherwise they'll be cleared from storage.\r\n        // This is important for the reauthenticateWithRedirect() flow.\r\n        if (this.redirectUser &&\r\n            this.redirectUser._redirectEventId === storedUser._redirectEventId) {\r\n            return this.directlySetCurrentUser(storedUser);\r\n        }\r\n        return this.reloadAndSetCurrentUserOrClear(storedUser);\r\n    }\r\n    async tryRedirectSignIn(redirectResolver) {\r\n        // The redirect user needs to be checked (and signed in if available)\r\n        // during auth initialization. All of the normal sign in and link/reauth\r\n        // flows call back into auth and push things onto the promise queue. We\r\n        // need to await the result of the redirect sign in *inside the promise\r\n        // queue*. This presents a problem: we run into deadlock. See:\r\n        //    ┌> [Initialization] ─────┐\r\n        //    ┌> [<other queue tasks>] │\r\n        //    └─ [getRedirectResult] <─┘\r\n        //    where [] are tasks on the queue and arrows denote awaits\r\n        // Initialization will never complete because it's waiting on something\r\n        // that's waiting for initialization to complete!\r\n        //\r\n        // Instead, this method calls getRedirectResult() (stored in\r\n        // _completeRedirectFn) with an optional parameter that instructs all of\r\n        // the underlying auth operations to skip anything that mutates auth state.\r\n        let result = null;\r\n        try {\r\n            // We know this._popupRedirectResolver is set since redirectResolver\r\n            // is passed in. The _completeRedirectFn expects the unwrapped extern.\r\n            result = await this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);\r\n        }\r\n        catch (e) {\r\n            // Swallow any errors here; the code can retrieve them in\r\n            // getRedirectResult().\r\n            await this._setRedirectUser(null);\r\n        }\r\n        return result;\r\n    }\r\n    async reloadAndSetCurrentUserOrClear(user) {\r\n        try {\r\n            await _reloadWithoutSaving(user);\r\n        }\r\n        catch (e) {\r\n            if (e.code !== `auth/${\"network-request-failed\" /* NETWORK_REQUEST_FAILED */}`) {\r\n                // Something's wrong with the user's token. Log them out and remove\r\n                // them from storage\r\n                return this.directlySetCurrentUser(null);\r\n            }\r\n        }\r\n        return this.directlySetCurrentUser(user);\r\n    }\r\n    useDeviceLanguage() {\r\n        this.languageCode = _getUserLanguage();\r\n    }\r\n    async _delete() {\r\n        this._deleted = true;\r\n    }\r\n    async updateCurrentUser(userExtern) {\r\n        // The public updateCurrentUser method needs to make a copy of the user,\r\n        // and also check that the project matches\r\n        const user = userExtern\r\n            ? (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(userExtern)\r\n            : null;\r\n        if (user) {\r\n            _assert(user.auth.config.apiKey === this.config.apiKey, this, \"invalid-user-token\" /* INVALID_AUTH */);\r\n        }\r\n        return this._updateCurrentUser(user && user._clone(this));\r\n    }\r\n    async _updateCurrentUser(user) {\r\n        if (this._deleted) {\r\n            return;\r\n        }\r\n        if (user) {\r\n            _assert(this.tenantId === user.tenantId, this, \"tenant-id-mismatch\" /* TENANT_ID_MISMATCH */);\r\n        }\r\n        return this.queue(async () => {\r\n            await this.directlySetCurrentUser(user);\r\n            this.notifyAuthListeners();\r\n        });\r\n    }\r\n    async signOut() {\r\n        // Clear the redirect user when signOut is called\r\n        if (this.redirectPersistenceManager || this._popupRedirectResolver) {\r\n            await this._setRedirectUser(null);\r\n        }\r\n        return this._updateCurrentUser(null);\r\n    }\r\n    setPersistence(persistence) {\r\n        return this.queue(async () => {\r\n            await this.assertedPersistence.setPersistence(_getInstance(persistence));\r\n        });\r\n    }\r\n    _getPersistence() {\r\n        return this.assertedPersistence.persistence.type;\r\n    }\r\n    _updateErrorMap(errorMap) {\r\n        this._errorFactory = new _firebase_util__WEBPACK_IMPORTED_MODULE_0__.ErrorFactory('auth', 'Firebase', errorMap());\r\n    }\r\n    onAuthStateChanged(nextOrObserver, error, completed) {\r\n        return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);\r\n    }\r\n    onIdTokenChanged(nextOrObserver, error, completed) {\r\n        return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);\r\n    }\r\n    toJSON() {\r\n        var _a;\r\n        return {\r\n            apiKey: this.config.apiKey,\r\n            authDomain: this.config.authDomain,\r\n            appName: this.name,\r\n            currentUser: (_a = this._currentUser) === null || _a === void 0 ? void 0 : _a.toJSON()\r\n        };\r\n    }\r\n    async _setRedirectUser(user, popupRedirectResolver) {\r\n        const redirectManager = await this.getOrInitRedirectPersistenceManager(popupRedirectResolver);\r\n        return user === null\r\n            ? redirectManager.removeCurrentUser()\r\n            : redirectManager.setCurrentUser(user);\r\n    }\r\n    async getOrInitRedirectPersistenceManager(popupRedirectResolver) {\r\n        if (!this.redirectPersistenceManager) {\r\n            const resolver = (popupRedirectResolver && _getInstance(popupRedirectResolver)) ||\r\n                this._popupRedirectResolver;\r\n            _assert(resolver, this, \"argument-error\" /* ARGUMENT_ERROR */);\r\n            this.redirectPersistenceManager = await PersistenceUserManager.create(this, [_getInstance(resolver._redirectPersistence)], \"redirectUser\" /* REDIRECT_USER */);\r\n            this.redirectUser =\r\n                await this.redirectPersistenceManager.getCurrentUser();\r\n        }\r\n        return this.redirectPersistenceManager;\r\n    }\r\n    async _redirectUserForId(id) {\r\n        var _a, _b;\r\n        // Make sure we've cleared any pending persistence actions if we're not in\r\n        // the initializer\r\n        if (this._isInitialized) {\r\n            await this.queue(async () => { });\r\n        }\r\n        if (((_a = this._currentUser) === null || _a === void 0 ? void 0 : _a._redirectEventId) === id) {\r\n            return this._currentUser;\r\n        }\r\n        if (((_b = this.redirectUser) === null || _b === void 0 ? void 0 : _b._redirectEventId) === id) {\r\n            return this.redirectUser;\r\n        }\r\n        return null;\r\n    }\r\n    async _persistUserIfCurrent(user) {\r\n        if (user === this.currentUser) {\r\n            return this.queue(async () => this.directlySetCurrentUser(user));\r\n        }\r\n    }\r\n    /** Notifies listeners only if the user is current */\r\n    _notifyListenersIfCurrent(user) {\r\n        if (user === this.currentUser) {\r\n            this.notifyAuthListeners();\r\n        }\r\n    }\r\n    _key() {\r\n        return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;\r\n    }\r\n    _startProactiveRefresh() {\r\n        this.isProactiveRefreshEnabled = true;\r\n        if (this.currentUser) {\r\n            this._currentUser._startProactiveRefresh();\r\n        }\r\n    }\r\n    _stopProactiveRefresh() {\r\n        this.isProactiveRefreshEnabled = false;\r\n        if (this.currentUser) {\r\n            this._currentUser._stopProactiveRefresh();\r\n        }\r\n    }\r\n    /** Returns the current user cast as the internal type */\r\n    get _currentUser() {\r\n        return this.currentUser;\r\n    }\r\n    notifyAuthListeners() {\r\n        var _a, _b;\r\n        if (!this._isInitialized) {\r\n            return;\r\n        }\r\n        this.idTokenSubscription.next(this.currentUser);\r\n        const currentUid = (_b = (_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.uid) !== null && _b !== void 0 ? _b : null;\r\n        if (this.lastNotifiedUid !== currentUid) {\r\n            this.lastNotifiedUid = currentUid;\r\n            this.authStateSubscription.next(this.currentUser);\r\n        }\r\n    }\r\n    registerStateListener(subscription, nextOrObserver, error, completed) {\r\n        if (this._deleted) {\r\n            return () => { };\r\n        }\r\n        const cb = typeof nextOrObserver === 'function'\r\n            ? nextOrObserver\r\n            : nextOrObserver.next.bind(nextOrObserver);\r\n        const promise = this._isInitialized\r\n            ? Promise.resolve()\r\n            : this._initializationPromise;\r\n        _assert(promise, this, \"internal-error\" /* INTERNAL_ERROR */);\r\n        // The callback needs to be called asynchronously per the spec.\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        promise.then(() => cb(this.currentUser));\r\n        if (typeof nextOrObserver === 'function') {\r\n            return subscription.addObserver(nextOrObserver, error, completed);\r\n        }\r\n        else {\r\n            return subscription.addObserver(nextOrObserver);\r\n        }\r\n    }\r\n    /**\r\n     * Unprotected (from race conditions) method to set the current user. This\r\n     * should only be called from within a queued callback. This is necessary\r\n     * because the queue shouldn't rely on another queued callback.\r\n     */\r\n    async directlySetCurrentUser(user) {\r\n        if (this.currentUser && this.currentUser !== user) {\r\n            this._currentUser._stopProactiveRefresh();\r\n            if (user && this.isProactiveRefreshEnabled) {\r\n                user._startProactiveRefresh();\r\n            }\r\n        }\r\n        this.currentUser = user;\r\n        if (user) {\r\n            await this.assertedPersistence.setCurrentUser(user);\r\n        }\r\n        else {\r\n            await this.assertedPersistence.removeCurrentUser();\r\n        }\r\n    }\r\n    queue(action) {\r\n        // In case something errors, the callback still should be called in order\r\n        // to keep the promise chain alive\r\n        this.operations = this.operations.then(action, action);\r\n        return this.operations;\r\n    }\r\n    get assertedPersistence() {\r\n        _assert(this.persistenceManager, this, \"internal-error\" /* INTERNAL_ERROR */);\r\n        return this.persistenceManager;\r\n    }\r\n    _logFramework(framework) {\r\n        if (!framework || this.frameworks.includes(framework)) {\r\n            return;\r\n        }\r\n        this.frameworks.push(framework);\r\n        // Sort alphabetically so that \"FirebaseCore-web,FirebaseUI-web\" and\r\n        // \"FirebaseUI-web,FirebaseCore-web\" aren't viewed as different.\r\n        this.frameworks.sort();\r\n        this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());\r\n    }\r\n    _getFrameworks() {\r\n        return this.frameworks;\r\n    }\r\n    _getSdkClientVersion() {\r\n        return this.clientVersion;\r\n    }\r\n}\r\n/**\r\n * Method to be used to cast down to our private implmentation of Auth.\r\n * It will also handle unwrapping from the compat type if necessary\r\n *\r\n * @param auth Auth object passed in from developer\r\n */\r\nfunction _castAuth(auth) {\r\n    return (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(auth);\r\n}\r\n/** Helper class to wrap subscriber logic */\r\nclass Subscription {\r\n    constructor(auth) {\r\n        this.auth = auth;\r\n        this.observer = null;\r\n        this.addObserver = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.createSubscribe)(observer => (this.observer = observer));\r\n    }\r\n    get next() {\r\n        _assert(this.observer, this.auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n        return this.observer.next.bind(this.observer);\r\n    }\r\n}\n\n/**\r\n * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production\r\n * Firebase Auth services.\r\n *\r\n * @remarks\r\n * This must be called synchronously immediately following the first call to\r\n * {@link initializeAuth}.  Do not use with production credentials as emulator\r\n * traffic is not encrypted.\r\n *\r\n *\r\n * @example\r\n * ```javascript\r\n * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').\r\n * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to\r\n * `true` to disable the warning banner attached to the DOM.\r\n *\r\n * @public\r\n */\r\nfunction connectAuthEmulator(auth, url, options) {\r\n    const authInternal = _castAuth(auth);\r\n    _assert(authInternal._canInitEmulator, authInternal, \"emulator-config-failed\" /* EMULATOR_CONFIG_FAILED */);\r\n    _assert(/^https?:\\/\\//.test(url), authInternal, \"invalid-emulator-scheme\" /* INVALID_EMULATOR_SCHEME */);\r\n    const disableWarnings = !!(options === null || options === void 0 ? void 0 : options.disableWarnings);\r\n    const protocol = extractProtocol(url);\r\n    const { host, port } = extractHostAndPort(url);\r\n    const portStr = port === null ? '' : `:${port}`;\r\n    // Always replace path with \"/\" (even if input url had no path at all, or had a different one).\r\n    authInternal.config.emulator = { url: `${protocol}//${host}${portStr}/` };\r\n    authInternal.settings.appVerificationDisabledForTesting = true;\r\n    authInternal.emulatorConfig = Object.freeze({\r\n        host,\r\n        port,\r\n        protocol: protocol.replace(':', ''),\r\n        options: Object.freeze({ disableWarnings })\r\n    });\r\n    if (!disableWarnings) {\r\n        emitEmulatorWarning();\r\n    }\r\n}\r\nfunction extractProtocol(url) {\r\n    const protocolEnd = url.indexOf(':');\r\n    return protocolEnd < 0 ? '' : url.substr(0, protocolEnd + 1);\r\n}\r\nfunction extractHostAndPort(url) {\r\n    const protocol = extractProtocol(url);\r\n    const authority = /(\\/\\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.\r\n    if (!authority) {\r\n        return { host: '', port: null };\r\n    }\r\n    const hostAndPort = authority[2].split('@').pop() || ''; // Strip out \"username:password@\".\r\n    const bracketedIPv6 = /^(\\[[^\\]]+\\])(:|$)/.exec(hostAndPort);\r\n    if (bracketedIPv6) {\r\n        const host = bracketedIPv6[1];\r\n        return { host, port: parsePort(hostAndPort.substr(host.length + 1)) };\r\n    }\r\n    else {\r\n        const [host, port] = hostAndPort.split(':');\r\n        return { host, port: parsePort(port) };\r\n    }\r\n}\r\nfunction parsePort(portStr) {\r\n    if (!portStr) {\r\n        return null;\r\n    }\r\n    const port = Number(portStr);\r\n    if (isNaN(port)) {\r\n        return null;\r\n    }\r\n    return port;\r\n}\r\nfunction emitEmulatorWarning() {\r\n    function attachBanner() {\r\n        const el = document.createElement('p');\r\n        const sty = el.style;\r\n        el.innerText =\r\n            'Running in emulator mode. Do not use with production credentials.';\r\n        sty.position = 'fixed';\r\n        sty.width = '100%';\r\n        sty.backgroundColor = '#ffffff';\r\n        sty.border = '.1em solid #000000';\r\n        sty.color = '#b50000';\r\n        sty.bottom = '0px';\r\n        sty.left = '0px';\r\n        sty.margin = '0px';\r\n        sty.zIndex = '10000';\r\n        sty.textAlign = 'center';\r\n        el.classList.add('firebase-emulator-warning');\r\n        document.body.appendChild(el);\r\n    }\r\n    if (typeof console !== 'undefined' && typeof console.info === 'function') {\r\n        console.info('WARNING: You are using the Auth Emulator,' +\r\n            ' which is intended for local testing only.  Do not use with' +\r\n            ' production credentials.');\r\n    }\r\n    if (typeof window !== 'undefined' &&\r\n        typeof document !== 'undefined') {\r\n        if (document.readyState === 'loading') {\r\n            window.addEventListener('DOMContentLoaded', attachBanner);\r\n        }\r\n        else {\r\n            attachBanner();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface that represents the credentials returned by an {@link AuthProvider}.\r\n *\r\n * @remarks\r\n * Implementations specify the details about each auth provider's credential requirements.\r\n *\r\n * @public\r\n */\r\nclass AuthCredential {\r\n    /** @internal */\r\n    constructor(\r\n    /**\r\n     * The authentication provider ID for the credential.\r\n     *\r\n     * @remarks\r\n     * For example, 'facebook.com', or 'google.com'.\r\n     */\r\n    providerId, \r\n    /**\r\n     * The authentication sign in method for the credential.\r\n     *\r\n     * @remarks\r\n     * For example, {@link SignInMethod}.EMAIL_PASSWORD, or\r\n     * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method\r\n     * identifier as returned in {@link fetchSignInMethodsForEmail}.\r\n     */\r\n    signInMethod) {\r\n        this.providerId = providerId;\r\n        this.signInMethod = signInMethod;\r\n    }\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     *\r\n     * @returns a JSON-serializable representation of this object.\r\n     */\r\n    toJSON() {\r\n        return debugFail('not implemented');\r\n    }\r\n    /** @internal */\r\n    _getIdTokenResponse(_auth) {\r\n        return debugFail('not implemented');\r\n    }\r\n    /** @internal */\r\n    _linkToIdToken(_auth, _idToken) {\r\n        return debugFail('not implemented');\r\n    }\r\n    /** @internal */\r\n    _getReauthenticationResolver(_auth) {\r\n        return debugFail('not implemented');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function resetPassword(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* POST */, \"/v1/accounts:resetPassword\" /* RESET_PASSWORD */, _addTidIfNecessary(auth, request));\r\n}\r\nasync function updateEmailPassword(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* POST */, \"/v1/accounts:update\" /* SET_ACCOUNT_INFO */, request);\r\n}\r\nasync function applyActionCode$1(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* POST */, \"/v1/accounts:update\" /* SET_ACCOUNT_INFO */, _addTidIfNecessary(auth, request));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function signInWithPassword(auth, request) {\r\n    return _performSignInRequest(auth, \"POST\" /* POST */, \"/v1/accounts:signInWithPassword\" /* SIGN_IN_WITH_PASSWORD */, _addTidIfNecessary(auth, request));\r\n}\r\nasync function sendOobCode(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* POST */, \"/v1/accounts:sendOobCode\" /* SEND_OOB_CODE */, _addTidIfNecessary(auth, request));\r\n}\r\nasync function sendEmailVerification$1(auth, request) {\r\n    return sendOobCode(auth, request);\r\n}\r\nasync function sendPasswordResetEmail$1(auth, request) {\r\n    return sendOobCode(auth, request);\r\n}\r\nasync function sendSignInLinkToEmail$1(auth, request) {\r\n    return sendOobCode(auth, request);\r\n}\r\nasync function verifyAndChangeEmail(auth, request) {\r\n    return sendOobCode(auth, request);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function signInWithEmailLink$1(auth, request) {\r\n    return _performSignInRequest(auth, \"POST\" /* POST */, \"/v1/accounts:signInWithEmailLink\" /* SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));\r\n}\r\nasync function signInWithEmailLinkForLinking(auth, request) {\r\n    return _performSignInRequest(auth, \"POST\" /* POST */, \"/v1/accounts:signInWithEmailLink\" /* SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface that represents the credentials returned by {@link EmailAuthProvider} for\r\n * {@link ProviderId}.PASSWORD\r\n *\r\n * @remarks\r\n * Covers both {@link SignInMethod}.EMAIL_PASSWORD and\r\n * {@link SignInMethod}.EMAIL_LINK.\r\n *\r\n * @public\r\n */\r\nclass EmailAuthCredential extends AuthCredential {\r\n    /** @internal */\r\n    constructor(\r\n    /** @internal */\r\n    _email, \r\n    /** @internal */\r\n    _password, signInMethod, \r\n    /** @internal */\r\n    _tenantId = null) {\r\n        super(\"password\" /* PASSWORD */, signInMethod);\r\n        this._email = _email;\r\n        this._password = _password;\r\n        this._tenantId = _tenantId;\r\n    }\r\n    /** @internal */\r\n    static _fromEmailAndPassword(email, password) {\r\n        return new EmailAuthCredential(email, password, \"password\" /* EMAIL_PASSWORD */);\r\n    }\r\n    /** @internal */\r\n    static _fromEmailAndCode(email, oobCode, tenantId = null) {\r\n        return new EmailAuthCredential(email, oobCode, \"emailLink\" /* EMAIL_LINK */, tenantId);\r\n    }\r\n    /** {@inheritdoc AuthCredential.toJSON} */\r\n    toJSON() {\r\n        return {\r\n            email: this._email,\r\n            password: this._password,\r\n            signInMethod: this.signInMethod,\r\n            tenantId: this._tenantId\r\n        };\r\n    }\r\n    /**\r\n     * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.\r\n     *\r\n     * @param json - Either `object` or the stringified representation of the object. When string is\r\n     * provided, `JSON.parse` would be called first.\r\n     *\r\n     * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.\r\n     */\r\n    static fromJSON(json) {\r\n        const obj = typeof json === 'string' ? JSON.parse(json) : json;\r\n        if ((obj === null || obj === void 0 ? void 0 : obj.email) && (obj === null || obj === void 0 ? void 0 : obj.password)) {\r\n            if (obj.signInMethod === \"password\" /* EMAIL_PASSWORD */) {\r\n                return this._fromEmailAndPassword(obj.email, obj.password);\r\n            }\r\n            else if (obj.signInMethod === \"emailLink\" /* EMAIL_LINK */) {\r\n                return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /** @internal */\r\n    async _getIdTokenResponse(auth) {\r\n        switch (this.signInMethod) {\r\n            case \"password\" /* EMAIL_PASSWORD */:\r\n                return signInWithPassword(auth, {\r\n                    returnSecureToken: true,\r\n                    email: this._email,\r\n                    password: this._password\r\n                });\r\n            case \"emailLink\" /* EMAIL_LINK */:\r\n                return signInWithEmailLink$1(auth, {\r\n                    email: this._email,\r\n                    oobCode: this._password\r\n                });\r\n            default:\r\n                _fail(auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n        }\r\n    }\r\n    /** @internal */\r\n    async _linkToIdToken(auth, idToken) {\r\n        switch (this.signInMethod) {\r\n            case \"password\" /* EMAIL_PASSWORD */:\r\n                return updateEmailPassword(auth, {\r\n                    idToken,\r\n                    returnSecureToken: true,\r\n                    email: this._email,\r\n                    password: this._password\r\n                });\r\n            case \"emailLink\" /* EMAIL_LINK */:\r\n                return signInWithEmailLinkForLinking(auth, {\r\n                    idToken,\r\n                    email: this._email,\r\n                    oobCode: this._password\r\n                });\r\n            default:\r\n                _fail(auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n        }\r\n    }\r\n    /** @internal */\r\n    _getReauthenticationResolver(auth) {\r\n        return this._getIdTokenResponse(auth);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function signInWithIdp(auth, request) {\r\n    return _performSignInRequest(auth, \"POST\" /* POST */, \"/v1/accounts:signInWithIdp\" /* SIGN_IN_WITH_IDP */, _addTidIfNecessary(auth, request));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst IDP_REQUEST_URI$1 = 'http://localhost';\r\n/**\r\n * Represents the OAuth credentials returned by an {@link OAuthProvider}.\r\n *\r\n * @remarks\r\n * Implementations specify the details about each auth provider's credential requirements.\r\n *\r\n * @public\r\n */\r\nclass OAuthCredential extends AuthCredential {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.pendingToken = null;\r\n    }\r\n    /** @internal */\r\n    static _fromParams(params) {\r\n        const cred = new OAuthCredential(params.providerId, params.signInMethod);\r\n        if (params.idToken || params.accessToken) {\r\n            // OAuth 2 and either ID token or access token.\r\n            if (params.idToken) {\r\n                cred.idToken = params.idToken;\r\n            }\r\n            if (params.accessToken) {\r\n                cred.accessToken = params.accessToken;\r\n            }\r\n            // Add nonce if available and no pendingToken is present.\r\n            if (params.nonce && !params.pendingToken) {\r\n                cred.nonce = params.nonce;\r\n            }\r\n            if (params.pendingToken) {\r\n                cred.pendingToken = params.pendingToken;\r\n            }\r\n        }\r\n        else if (params.oauthToken && params.oauthTokenSecret) {\r\n            // OAuth 1 and OAuth token with token secret\r\n            cred.accessToken = params.oauthToken;\r\n            cred.secret = params.oauthTokenSecret;\r\n        }\r\n        else {\r\n            _fail(\"argument-error\" /* ARGUMENT_ERROR */);\r\n        }\r\n        return cred;\r\n    }\r\n    /** {@inheritdoc AuthCredential.toJSON}  */\r\n    toJSON() {\r\n        return {\r\n            idToken: this.idToken,\r\n            accessToken: this.accessToken,\r\n            secret: this.secret,\r\n            nonce: this.nonce,\r\n            pendingToken: this.pendingToken,\r\n            providerId: this.providerId,\r\n            signInMethod: this.signInMethod\r\n        };\r\n    }\r\n    /**\r\n     * Static method to deserialize a JSON representation of an object into an\r\n     * {@link  AuthCredential}.\r\n     *\r\n     * @param json - Input can be either Object or the stringified representation of the object.\r\n     * When string is provided, JSON.parse would be called first.\r\n     *\r\n     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\r\n     */\r\n    static fromJSON(json) {\r\n        const obj = typeof json === 'string' ? JSON.parse(json) : json;\r\n        const { providerId, signInMethod } = obj, rest = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__rest)(obj, [\"providerId\", \"signInMethod\"]);\r\n        if (!providerId || !signInMethod) {\r\n            return null;\r\n        }\r\n        const cred = new OAuthCredential(providerId, signInMethod);\r\n        cred.idToken = rest.idToken || undefined;\r\n        cred.accessToken = rest.accessToken || undefined;\r\n        cred.secret = rest.secret;\r\n        cred.nonce = rest.nonce;\r\n        cred.pendingToken = rest.pendingToken || null;\r\n        return cred;\r\n    }\r\n    /** @internal */\r\n    _getIdTokenResponse(auth) {\r\n        const request = this.buildRequest();\r\n        return signInWithIdp(auth, request);\r\n    }\r\n    /** @internal */\r\n    _linkToIdToken(auth, idToken) {\r\n        const request = this.buildRequest();\r\n        request.idToken = idToken;\r\n        return signInWithIdp(auth, request);\r\n    }\r\n    /** @internal */\r\n    _getReauthenticationResolver(auth) {\r\n        const request = this.buildRequest();\r\n        request.autoCreate = false;\r\n        return signInWithIdp(auth, request);\r\n    }\r\n    buildRequest() {\r\n        const request = {\r\n            requestUri: IDP_REQUEST_URI$1,\r\n            returnSecureToken: true\r\n        };\r\n        if (this.pendingToken) {\r\n            request.pendingToken = this.pendingToken;\r\n        }\r\n        else {\r\n            const postBody = {};\r\n            if (this.idToken) {\r\n                postBody['id_token'] = this.idToken;\r\n            }\r\n            if (this.accessToken) {\r\n                postBody['access_token'] = this.accessToken;\r\n            }\r\n            if (this.secret) {\r\n                postBody['oauth_token_secret'] = this.secret;\r\n            }\r\n            postBody['providerId'] = this.providerId;\r\n            if (this.nonce && !this.pendingToken) {\r\n                postBody['nonce'] = this.nonce;\r\n            }\r\n            request.postBody = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.querystring)(postBody);\r\n        }\r\n        return request;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function sendPhoneVerificationCode(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* POST */, \"/v1/accounts:sendVerificationCode\" /* SEND_VERIFICATION_CODE */, _addTidIfNecessary(auth, request));\r\n}\r\nasync function signInWithPhoneNumber$1(auth, request) {\r\n    return _performSignInRequest(auth, \"POST\" /* POST */, \"/v1/accounts:signInWithPhoneNumber\" /* SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request));\r\n}\r\nasync function linkWithPhoneNumber$1(auth, request) {\r\n    const response = await _performSignInRequest(auth, \"POST\" /* POST */, \"/v1/accounts:signInWithPhoneNumber\" /* SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request));\r\n    if (response.temporaryProof) {\r\n        throw _makeTaggedError(auth, \"account-exists-with-different-credential\" /* NEED_CONFIRMATION */, response);\r\n    }\r\n    return response;\r\n}\r\nconst VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = {\r\n    [\"USER_NOT_FOUND\" /* USER_NOT_FOUND */]: \"user-not-found\" /* USER_DELETED */\r\n};\r\nasync function verifyPhoneNumberForExisting(auth, request) {\r\n    const apiRequest = Object.assign(Object.assign({}, request), { operation: 'REAUTH' });\r\n    return _performSignInRequest(auth, \"POST\" /* POST */, \"/v1/accounts:signInWithPhoneNumber\" /* SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, apiRequest), VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents the credentials returned by {@link PhoneAuthProvider}.\r\n *\r\n * @public\r\n */\r\nclass PhoneAuthCredential extends AuthCredential {\r\n    constructor(params) {\r\n        super(\"phone\" /* PHONE */, \"phone\" /* PHONE */);\r\n        this.params = params;\r\n    }\r\n    /** @internal */\r\n    static _fromVerification(verificationId, verificationCode) {\r\n        return new PhoneAuthCredential({ verificationId, verificationCode });\r\n    }\r\n    /** @internal */\r\n    static _fromTokenResponse(phoneNumber, temporaryProof) {\r\n        return new PhoneAuthCredential({ phoneNumber, temporaryProof });\r\n    }\r\n    /** @internal */\r\n    _getIdTokenResponse(auth) {\r\n        return signInWithPhoneNumber$1(auth, this._makeVerificationRequest());\r\n    }\r\n    /** @internal */\r\n    _linkToIdToken(auth, idToken) {\r\n        return linkWithPhoneNumber$1(auth, Object.assign({ idToken }, this._makeVerificationRequest()));\r\n    }\r\n    /** @internal */\r\n    _getReauthenticationResolver(auth) {\r\n        return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());\r\n    }\r\n    /** @internal */\r\n    _makeVerificationRequest() {\r\n        const { temporaryProof, phoneNumber, verificationId, verificationCode } = this.params;\r\n        if (temporaryProof && phoneNumber) {\r\n            return { temporaryProof, phoneNumber };\r\n        }\r\n        return {\r\n            sessionInfo: verificationId,\r\n            code: verificationCode\r\n        };\r\n    }\r\n    /** {@inheritdoc AuthCredential.toJSON} */\r\n    toJSON() {\r\n        const obj = {\r\n            providerId: this.providerId\r\n        };\r\n        if (this.params.phoneNumber) {\r\n            obj.phoneNumber = this.params.phoneNumber;\r\n        }\r\n        if (this.params.temporaryProof) {\r\n            obj.temporaryProof = this.params.temporaryProof;\r\n        }\r\n        if (this.params.verificationCode) {\r\n            obj.verificationCode = this.params.verificationCode;\r\n        }\r\n        if (this.params.verificationId) {\r\n            obj.verificationId = this.params.verificationId;\r\n        }\r\n        return obj;\r\n    }\r\n    /** Generates a phone credential based on a plain object or a JSON string. */\r\n    static fromJSON(json) {\r\n        if (typeof json === 'string') {\r\n            json = JSON.parse(json);\r\n        }\r\n        const { verificationId, verificationCode, phoneNumber, temporaryProof } = json;\r\n        if (!verificationCode &&\r\n            !verificationId &&\r\n            !phoneNumber &&\r\n            !temporaryProof) {\r\n            return null;\r\n        }\r\n        return new PhoneAuthCredential({\r\n            verificationId,\r\n            verificationCode,\r\n            phoneNumber,\r\n            temporaryProof\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Maps the mode string in action code URL to Action Code Info operation.\r\n *\r\n * @param mode\r\n */\r\nfunction parseMode(mode) {\r\n    switch (mode) {\r\n        case 'recoverEmail':\r\n            return \"RECOVER_EMAIL\" /* RECOVER_EMAIL */;\r\n        case 'resetPassword':\r\n            return \"PASSWORD_RESET\" /* PASSWORD_RESET */;\r\n        case 'signIn':\r\n            return \"EMAIL_SIGNIN\" /* EMAIL_SIGNIN */;\r\n        case 'verifyEmail':\r\n            return \"VERIFY_EMAIL\" /* VERIFY_EMAIL */;\r\n        case 'verifyAndChangeEmail':\r\n            return \"VERIFY_AND_CHANGE_EMAIL\" /* VERIFY_AND_CHANGE_EMAIL */;\r\n        case 'revertSecondFactorAddition':\r\n            return \"REVERT_SECOND_FACTOR_ADDITION\" /* REVERT_SECOND_FACTOR_ADDITION */;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n/**\r\n * Helper to parse FDL links\r\n *\r\n * @param url\r\n */\r\nfunction parseDeepLink(url) {\r\n    const link = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.querystringDecode)((0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.extractQuerystring)(url))['link'];\r\n    // Double link case (automatic redirect).\r\n    const doubleDeepLink = link\r\n        ? (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.querystringDecode)((0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.extractQuerystring)(link))['deep_link_id']\r\n        : null;\r\n    // iOS custom scheme links.\r\n    const iOSDeepLink = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.querystringDecode)((0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.extractQuerystring)(url))['deep_link_id'];\r\n    const iOSDoubleDeepLink = iOSDeepLink\r\n        ? (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.querystringDecode)((0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.extractQuerystring)(iOSDeepLink))['link']\r\n        : null;\r\n    return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\r\n}\r\n/**\r\n * A utility class to parse email action URLs such as password reset, email verification,\r\n * email link sign in, etc.\r\n *\r\n * @public\r\n */\r\nclass ActionCodeURL {\r\n    /**\r\n     * @param actionLink - The link from which to extract the URL.\r\n     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\r\n     *\r\n     * @internal\r\n     */\r\n    constructor(actionLink) {\r\n        var _a, _b, _c, _d, _e, _f;\r\n        const searchParams = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.querystringDecode)((0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.extractQuerystring)(actionLink));\r\n        const apiKey = (_a = searchParams[\"apiKey\" /* API_KEY */]) !== null && _a !== void 0 ? _a : null;\r\n        const code = (_b = searchParams[\"oobCode\" /* CODE */]) !== null && _b !== void 0 ? _b : null;\r\n        const operation = parseMode((_c = searchParams[\"mode\" /* MODE */]) !== null && _c !== void 0 ? _c : null);\r\n        // Validate API key, code and mode.\r\n        _assert(apiKey && code && operation, \"argument-error\" /* ARGUMENT_ERROR */);\r\n        this.apiKey = apiKey;\r\n        this.operation = operation;\r\n        this.code = code;\r\n        this.continueUrl = (_d = searchParams[\"continueUrl\" /* CONTINUE_URL */]) !== null && _d !== void 0 ? _d : null;\r\n        this.languageCode = (_e = searchParams[\"languageCode\" /* LANGUAGE_CODE */]) !== null && _e !== void 0 ? _e : null;\r\n        this.tenantId = (_f = searchParams[\"tenantId\" /* TENANT_ID */]) !== null && _f !== void 0 ? _f : null;\r\n    }\r\n    /**\r\n     * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,\r\n     * otherwise returns null.\r\n     *\r\n     * @param link  - The email action link string.\r\n     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\r\n     *\r\n     * @public\r\n     */\r\n    static parseLink(link) {\r\n        const actionLink = parseDeepLink(link);\r\n        try {\r\n            return new ActionCodeURL(actionLink);\r\n        }\r\n        catch (_a) {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Parses the email action link string and returns an {@link ActionCodeURL} if\r\n * the link is valid, otherwise returns null.\r\n *\r\n * @public\r\n */\r\nfunction parseActionCodeURL(link) {\r\n    return ActionCodeURL.parseLink(link);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for generating {@link EmailAuthCredential}.\r\n *\r\n * @public\r\n */\r\nclass EmailAuthProvider {\r\n    constructor() {\r\n        /**\r\n         * Always set to {@link ProviderId}.PASSWORD, even for email link.\r\n         */\r\n        this.providerId = EmailAuthProvider.PROVIDER_ID;\r\n    }\r\n    /**\r\n     * Initialize an {@link AuthCredential} using an email and password.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * const authCredential = EmailAuthProvider.credential(email, password);\r\n     * const userCredential = await signInWithCredential(auth, authCredential);\r\n     * ```\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n     * ```\r\n     *\r\n     * @param email - Email address.\r\n     * @param password - User account password.\r\n     * @returns The auth provider credential.\r\n     */\r\n    static credential(email, password) {\r\n        return EmailAuthCredential._fromEmailAndPassword(email, password);\r\n    }\r\n    /**\r\n     * Initialize an {@link AuthCredential} using an email and an email link after a sign in with\r\n     * email link operation.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);\r\n     * const userCredential = await signInWithCredential(auth, authCredential);\r\n     * ```\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * await sendSignInLinkToEmail(auth, email);\r\n     * // Obtain emailLink from user.\r\n     * const userCredential = await signInWithEmailLink(auth, email, emailLink);\r\n     * ```\r\n     *\r\n     * @param auth - The {@link Auth} instance used to verify the link.\r\n     * @param email - Email address.\r\n     * @param emailLink - Sign-in email link.\r\n     * @returns - The auth provider credential.\r\n     */\r\n    static credentialWithLink(email, emailLink) {\r\n        const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\r\n        _assert(actionCodeUrl, \"argument-error\" /* ARGUMENT_ERROR */);\r\n        return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);\r\n    }\r\n}\r\n/**\r\n * Always set to {@link ProviderId}.PASSWORD, even for email link.\r\n */\r\nEmailAuthProvider.PROVIDER_ID = \"password\" /* PASSWORD */;\r\n/**\r\n * Always set to {@link SignInMethod}.EMAIL_PASSWORD.\r\n */\r\nEmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = \"password\" /* EMAIL_PASSWORD */;\r\n/**\r\n * Always set to {@link SignInMethod}.EMAIL_LINK.\r\n */\r\nEmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = \"emailLink\" /* EMAIL_LINK */;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The base class for all Federated providers (OAuth (including OIDC), SAML).\r\n *\r\n * This class is not meant to be instantiated directly.\r\n *\r\n * @public\r\n */\r\nclass FederatedAuthProvider {\r\n    /**\r\n     * Constructor for generic OAuth providers.\r\n     *\r\n     * @param providerId - Provider for which credentials should be generated.\r\n     */\r\n    constructor(providerId) {\r\n        this.providerId = providerId;\r\n        /** @internal */\r\n        this.defaultLanguageCode = null;\r\n        /** @internal */\r\n        this.customParameters = {};\r\n    }\r\n    /**\r\n     * Set the language gode.\r\n     *\r\n     * @param languageCode - language code\r\n     */\r\n    setDefaultLanguage(languageCode) {\r\n        this.defaultLanguageCode = languageCode;\r\n    }\r\n    /**\r\n     * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in\r\n     * operations.\r\n     *\r\n     * @remarks\r\n     * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,\r\n     * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.\r\n     *\r\n     * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.\r\n     */\r\n    setCustomParameters(customOAuthParameters) {\r\n        this.customParameters = customOAuthParameters;\r\n        return this;\r\n    }\r\n    /**\r\n     * Retrieve the current list of {@link CustomParameters}.\r\n     */\r\n    getCustomParameters() {\r\n        return this.customParameters;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Common code to all OAuth providers. This is separate from the\r\n * {@link OAuthProvider} so that child providers (like\r\n * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.\r\n * Instead, they rely on a static `credential` method.\r\n */\r\nclass BaseOAuthProvider extends FederatedAuthProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** @internal */\r\n        this.scopes = [];\r\n    }\r\n    /**\r\n     * Add an OAuth scope to the credential.\r\n     *\r\n     * @param scope - Provider OAuth scope to add.\r\n     */\r\n    addScope(scope) {\r\n        // If not already added, add scope to list.\r\n        if (!this.scopes.includes(scope)) {\r\n            this.scopes.push(scope);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Retrieve the current list of OAuth scopes.\r\n     */\r\n    getScopes() {\r\n        return [...this.scopes];\r\n    }\r\n}\r\n/**\r\n * Provider for generating generic {@link OAuthCredential}.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new OAuthProvider('google.com');\r\n * // Start a sign in process for an unauthenticated user.\r\n * provider.addScope('profile');\r\n * provider.addScope('email');\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a OAuth Access Token for the provider.\r\n *   const credential = provider.credentialFromResult(auth, result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new OAuthProvider('google.com');\r\n * provider.addScope('profile');\r\n * provider.addScope('email');\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a OAuth Access Token for the provider.\r\n * const credential = provider.credentialFromResult(auth, result);\r\n * const token = credential.accessToken;\r\n * ```\r\n * @public\r\n */\r\nclass OAuthProvider extends BaseOAuthProvider {\r\n    /**\r\n     * Creates an {@link OAuthCredential} from a JSON string or a plain object.\r\n     * @param json - A plain object or a JSON string\r\n     */\r\n    static credentialFromJSON(json) {\r\n        const obj = typeof json === 'string' ? JSON.parse(json) : json;\r\n        _assert('providerId' in obj && 'signInMethod' in obj, \"argument-error\" /* ARGUMENT_ERROR */);\r\n        return OAuthCredential._fromParams(obj);\r\n    }\r\n    /**\r\n     * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.\r\n     *\r\n     * @remarks\r\n     * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of\r\n     * the raw nonce must match the nonce field in the ID token.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * // `googleUser` from the onsuccess Google Sign In callback.\r\n     * // Initialize a generate OAuth provider with a `google.com` providerId.\r\n     * const provider = new OAuthProvider('google.com');\r\n     * const credential = provider.credential({\r\n     *   idToken: googleUser.getAuthResponse().id_token,\r\n     * });\r\n     * const result = await signInWithCredential(credential);\r\n     * ```\r\n     *\r\n     * @param params - Either the options object containing the ID token, access token and raw nonce\r\n     * or the ID token string.\r\n     */\r\n    credential(params) {\r\n        return this._credential(Object.assign(Object.assign({}, params), { nonce: params.rawNonce }));\r\n    }\r\n    /** An internal credential method that accepts more permissive options */\r\n    _credential(params) {\r\n        _assert(params.idToken || params.accessToken, \"argument-error\" /* ARGUMENT_ERROR */);\r\n        // For OAuthCredential, sign in method is same as providerId.\r\n        return OAuthCredential._fromParams(Object.assign(Object.assign({}, params), { providerId: this.providerId, signInMethod: this.providerId }));\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromResult(userCredential) {\r\n        return OAuthProvider.oauthCredentialFromTaggedObject(userCredential);\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromError(error) {\r\n        return OAuthProvider.oauthCredentialFromTaggedObject((error.customData || {}));\r\n    }\r\n    static oauthCredentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\r\n        if (!tokenResponse) {\r\n            return null;\r\n        }\r\n        const { oauthIdToken, oauthAccessToken, oauthTokenSecret, pendingToken, nonce, providerId } = tokenResponse;\r\n        if (!oauthAccessToken &&\r\n            !oauthTokenSecret &&\r\n            !oauthIdToken &&\r\n            !pendingToken) {\r\n            return null;\r\n        }\r\n        if (!providerId) {\r\n            return null;\r\n        }\r\n        try {\r\n            return new OAuthProvider(providerId)._credential({\r\n                idToken: oauthIdToken,\r\n                accessToken: oauthAccessToken,\r\n                nonce,\r\n                pendingToken\r\n            });\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new FacebookAuthProvider();\r\n * // Start a sign in process for an unauthenticated user.\r\n * provider.addScope('user_birthday');\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Facebook Access Token.\r\n *   const credential = provider.credentialFromResult(auth, result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new FacebookAuthProvider();\r\n * provider.addScope('user_birthday');\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a Facebook Access Token.\r\n * const credential = provider.credentialFromResult(auth, result);\r\n * const token = credential.accessToken;\r\n * ```\r\n *\r\n * @public\r\n */\r\nclass FacebookAuthProvider extends BaseOAuthProvider {\r\n    constructor() {\r\n        super(\"facebook.com\" /* FACEBOOK */);\r\n    }\r\n    /**\r\n     * Creates a credential for Facebook.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * // `event` from the Facebook auth.authResponseChange callback.\r\n     * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);\r\n     * const result = await signInWithCredential(credential);\r\n     * ```\r\n     *\r\n     * @param accessToken - Facebook access token.\r\n     */\r\n    static credential(accessToken) {\r\n        return OAuthCredential._fromParams({\r\n            providerId: FacebookAuthProvider.PROVIDER_ID,\r\n            signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,\r\n            accessToken\r\n        });\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromResult(userCredential) {\r\n        return FacebookAuthProvider.credentialFromTaggedObject(userCredential);\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromError(error) {\r\n        return FacebookAuthProvider.credentialFromTaggedObject((error.customData || {}));\r\n    }\r\n    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\r\n        if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\r\n            return null;\r\n        }\r\n        if (!tokenResponse.oauthAccessToken) {\r\n            return null;\r\n        }\r\n        try {\r\n            return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);\r\n        }\r\n        catch (_a) {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/** Always set to {@link SignInMethod}.FACEBOOK. */\r\nFacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = \"facebook.com\" /* FACEBOOK */;\r\n/** Always set to {@link ProviderId}.FACEBOOK. */\r\nFacebookAuthProvider.PROVIDER_ID = \"facebook.com\" /* FACEBOOK */;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for generating an an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new GoogleAuthProvider();\r\n * // Start a sign in process for an unauthenticated user.\r\n * provider.addScope('profile');\r\n * provider.addScope('email');\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Google Access Token.\r\n *   const credential = provider.credentialFromResult(auth, result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new GoogleAuthProvider();\r\n * provider.addScope('profile');\r\n * provider.addScope('email');\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a Google Access Token.\r\n * const credential = provider.credentialFromResult(auth, result);\r\n * const token = credential.accessToken;\r\n * ```\r\n *\r\n * @public\r\n */\r\nclass GoogleAuthProvider extends BaseOAuthProvider {\r\n    constructor() {\r\n        super(\"google.com\" /* GOOGLE */);\r\n        this.addScope('profile');\r\n    }\r\n    /**\r\n     * Creates a credential for Google. At least one of ID token and access token is required.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * // \\`googleUser\\` from the onsuccess Google Sign In callback.\r\n     * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);\r\n     * const result = await signInWithCredential(credential);\r\n     * ```\r\n     *\r\n     * @param idToken - Google ID token.\r\n     * @param accessToken - Google access token.\r\n     */\r\n    static credential(idToken, accessToken) {\r\n        return OAuthCredential._fromParams({\r\n            providerId: GoogleAuthProvider.PROVIDER_ID,\r\n            signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,\r\n            idToken,\r\n            accessToken\r\n        });\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromResult(userCredential) {\r\n        return GoogleAuthProvider.credentialFromTaggedObject(userCredential);\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromError(error) {\r\n        return GoogleAuthProvider.credentialFromTaggedObject((error.customData || {}));\r\n    }\r\n    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\r\n        if (!tokenResponse) {\r\n            return null;\r\n        }\r\n        const { oauthIdToken, oauthAccessToken } = tokenResponse;\r\n        if (!oauthIdToken && !oauthAccessToken) {\r\n            // This could be an oauth 1 credential or a phone credential\r\n            return null;\r\n        }\r\n        try {\r\n            return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);\r\n        }\r\n        catch (_a) {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/** Always set to {@link SignInMethod}.GOOGLE. */\r\nGoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = \"google.com\" /* GOOGLE */;\r\n/** Always set to {@link ProviderId}.GOOGLE. */\r\nGoogleAuthProvider.PROVIDER_ID = \"google.com\" /* GOOGLE */;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.\r\n *\r\n * @remarks\r\n * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use\r\n * the {@link signInWithPopup} handler:\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new GithubAuthProvider();\r\n * // Start a sign in process for an unauthenticated user.\r\n * provider.addScope('repo');\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Github Access Token.\r\n *   const credential = provider.credentialFromResult(auth, result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new GithubAuthProvider();\r\n * provider.addScope('repo');\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a Github Access Token.\r\n * const credential = provider.credentialFromResult(auth, result);\r\n * const token = credential.accessToken;\r\n * ```\r\n * @public\r\n */\r\nclass GithubAuthProvider extends BaseOAuthProvider {\r\n    constructor() {\r\n        super(\"github.com\" /* GITHUB */);\r\n    }\r\n    /**\r\n     * Creates a credential for Github.\r\n     *\r\n     * @param accessToken - Github access token.\r\n     */\r\n    static credential(accessToken) {\r\n        return OAuthCredential._fromParams({\r\n            providerId: GithubAuthProvider.PROVIDER_ID,\r\n            signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,\r\n            accessToken\r\n        });\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromResult(userCredential) {\r\n        return GithubAuthProvider.credentialFromTaggedObject(userCredential);\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromError(error) {\r\n        return GithubAuthProvider.credentialFromTaggedObject((error.customData || {}));\r\n    }\r\n    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\r\n        if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\r\n            return null;\r\n        }\r\n        if (!tokenResponse.oauthAccessToken) {\r\n            return null;\r\n        }\r\n        try {\r\n            return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);\r\n        }\r\n        catch (_a) {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/** Always set to {@link SignInMethod}.GITHUB. */\r\nGithubAuthProvider.GITHUB_SIGN_IN_METHOD = \"github.com\" /* GITHUB */;\r\n/** Always set to {@link ProviderId}.GITHUB. */\r\nGithubAuthProvider.PROVIDER_ID = \"github.com\" /* GITHUB */;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst IDP_REQUEST_URI = 'http://localhost';\r\n/**\r\n * @public\r\n */\r\nclass SAMLAuthCredential extends AuthCredential {\r\n    /** @internal */\r\n    constructor(providerId, pendingToken) {\r\n        super(providerId, providerId);\r\n        this.pendingToken = pendingToken;\r\n    }\r\n    /** @internal */\r\n    _getIdTokenResponse(auth) {\r\n        const request = this.buildRequest();\r\n        return signInWithIdp(auth, request);\r\n    }\r\n    /** @internal */\r\n    _linkToIdToken(auth, idToken) {\r\n        const request = this.buildRequest();\r\n        request.idToken = idToken;\r\n        return signInWithIdp(auth, request);\r\n    }\r\n    /** @internal */\r\n    _getReauthenticationResolver(auth) {\r\n        const request = this.buildRequest();\r\n        request.autoCreate = false;\r\n        return signInWithIdp(auth, request);\r\n    }\r\n    /** {@inheritdoc AuthCredential.toJSON}  */\r\n    toJSON() {\r\n        return {\r\n            signInMethod: this.signInMethod,\r\n            providerId: this.providerId,\r\n            pendingToken: this.pendingToken\r\n        };\r\n    }\r\n    /**\r\n     * Static method to deserialize a JSON representation of an object into an\r\n     * {@link  AuthCredential}.\r\n     *\r\n     * @param json - Input can be either Object or the stringified representation of the object.\r\n     * When string is provided, JSON.parse would be called first.\r\n     *\r\n     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\r\n     */\r\n    static fromJSON(json) {\r\n        const obj = typeof json === 'string' ? JSON.parse(json) : json;\r\n        const { providerId, signInMethod, pendingToken } = obj;\r\n        if (!providerId ||\r\n            !signInMethod ||\r\n            !pendingToken ||\r\n            providerId !== signInMethod) {\r\n            return null;\r\n        }\r\n        return new SAMLAuthCredential(providerId, pendingToken);\r\n    }\r\n    /**\r\n     * Helper static method to avoid exposing the constructor to end users.\r\n     *\r\n     * @internal\r\n     */\r\n    static _create(providerId, pendingToken) {\r\n        return new SAMLAuthCredential(providerId, pendingToken);\r\n    }\r\n    buildRequest() {\r\n        return {\r\n            requestUri: IDP_REQUEST_URI,\r\n            returnSecureToken: true,\r\n            pendingToken: this.pendingToken\r\n        };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst SAML_PROVIDER_PREFIX = 'saml.';\r\n/**\r\n * An {@link AuthProvider} for SAML.\r\n *\r\n * @public\r\n */\r\nclass SAMLAuthProvider extends FederatedAuthProvider {\r\n    /**\r\n     * Constructor. The providerId must start with \"saml.\"\r\n     * @param providerId - SAML provider ID.\r\n     */\r\n    constructor(providerId) {\r\n        _assert(providerId.startsWith(SAML_PROVIDER_PREFIX), \"argument-error\" /* ARGUMENT_ERROR */);\r\n        super(providerId);\r\n    }\r\n    /**\r\n     * Generates an {@link AuthCredential} from a {@link UserCredential} after a\r\n     * successful SAML flow completes.\r\n     *\r\n     * @remarks\r\n     *\r\n     * For example, to get an {@link AuthCredential}, you could write the\r\n     * following code:\r\n     *\r\n     * ```js\r\n     * const userCredential = await signInWithPopup(auth, samlProvider);\r\n     * const credential = SAMLAuthProvider.credentialFromResult(userCredential);\r\n     * ```\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromResult(userCredential) {\r\n        return SAMLAuthProvider.samlCredentialFromTaggedObject(userCredential);\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromError(error) {\r\n        return SAMLAuthProvider.samlCredentialFromTaggedObject((error.customData || {}));\r\n    }\r\n    /**\r\n     * Creates an {@link AuthCredential} from a JSON string or a plain object.\r\n     * @param json - A plain object or a JSON string\r\n     */\r\n    static credentialFromJSON(json) {\r\n        const credential = SAMLAuthCredential.fromJSON(json);\r\n        _assert(credential, \"argument-error\" /* ARGUMENT_ERROR */);\r\n        return credential;\r\n    }\r\n    static samlCredentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\r\n        if (!tokenResponse) {\r\n            return null;\r\n        }\r\n        const { pendingToken, providerId } = tokenResponse;\r\n        if (!pendingToken || !providerId) {\r\n            return null;\r\n        }\r\n        try {\r\n            return SAMLAuthCredential._create(providerId, pendingToken);\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new TwitterAuthProvider();\r\n * // Start a sign in process for an unauthenticated user.\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Twitter Access Token and Secret.\r\n *   const credential = provider.credentialFromResult(auth, result);\r\n *   const token = credential.accessToken;\r\n *   const secret = credential.secret;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new TwitterAuthProvider();\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a Twitter Access Token and Secret.\r\n * const credential = provider.credentialFromResult(auth, result);\r\n * const token = credential.accessToken;\r\n * const secret = credential.secret;\r\n * ```\r\n *\r\n * @public\r\n */\r\nclass TwitterAuthProvider extends BaseOAuthProvider {\r\n    constructor() {\r\n        super(\"twitter.com\" /* TWITTER */);\r\n    }\r\n    /**\r\n     * Creates a credential for Twitter.\r\n     *\r\n     * @param token - Twitter access token.\r\n     * @param secret - Twitter secret.\r\n     */\r\n    static credential(token, secret) {\r\n        return OAuthCredential._fromParams({\r\n            providerId: TwitterAuthProvider.PROVIDER_ID,\r\n            signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,\r\n            oauthToken: token,\r\n            oauthTokenSecret: secret\r\n        });\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromResult(userCredential) {\r\n        return TwitterAuthProvider.credentialFromTaggedObject(userCredential);\r\n    }\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromError(error) {\r\n        return TwitterAuthProvider.credentialFromTaggedObject((error.customData || {}));\r\n    }\r\n    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\r\n        if (!tokenResponse) {\r\n            return null;\r\n        }\r\n        const { oauthAccessToken, oauthTokenSecret } = tokenResponse;\r\n        if (!oauthAccessToken || !oauthTokenSecret) {\r\n            return null;\r\n        }\r\n        try {\r\n            return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);\r\n        }\r\n        catch (_a) {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/** Always set to {@link SignInMethod}.TWITTER. */\r\nTwitterAuthProvider.TWITTER_SIGN_IN_METHOD = \"twitter.com\" /* TWITTER */;\r\n/** Always set to {@link ProviderId}.TWITTER. */\r\nTwitterAuthProvider.PROVIDER_ID = \"twitter.com\" /* TWITTER */;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function signUp(auth, request) {\r\n    return _performSignInRequest(auth, \"POST\" /* POST */, \"/v1/accounts:signUp\" /* SIGN_UP */, _addTidIfNecessary(auth, request));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass UserCredentialImpl {\r\n    constructor(params) {\r\n        this.user = params.user;\r\n        this.providerId = params.providerId;\r\n        this._tokenResponse = params._tokenResponse;\r\n        this.operationType = params.operationType;\r\n    }\r\n    static async _fromIdTokenResponse(auth, operationType, idTokenResponse, isAnonymous = false) {\r\n        const user = await UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous);\r\n        const providerId = providerIdForResponse(idTokenResponse);\r\n        const userCred = new UserCredentialImpl({\r\n            user,\r\n            providerId,\r\n            _tokenResponse: idTokenResponse,\r\n            operationType\r\n        });\r\n        return userCred;\r\n    }\r\n    static async _forOperation(user, operationType, response) {\r\n        await user._updateTokensIfNecessary(response, /* reload */ true);\r\n        const providerId = providerIdForResponse(response);\r\n        return new UserCredentialImpl({\r\n            user,\r\n            providerId,\r\n            _tokenResponse: response,\r\n            operationType\r\n        });\r\n    }\r\n}\r\nfunction providerIdForResponse(response) {\r\n    if (response.providerId) {\r\n        return response.providerId;\r\n    }\r\n    if ('phoneNumber' in response) {\r\n        return \"phone\" /* PHONE */;\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Asynchronously signs in as an anonymous user.\r\n *\r\n * @remarks\r\n * If there is already an anonymous user signed in, that user will be returned; otherwise, a\r\n * new anonymous user identity will be created and returned.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n *\r\n * @public\r\n */\r\nasync function signInAnonymously(auth) {\r\n    var _a;\r\n    const authInternal = _castAuth(auth);\r\n    await authInternal._initializationPromise;\r\n    if ((_a = authInternal.currentUser) === null || _a === void 0 ? void 0 : _a.isAnonymous) {\r\n        // If an anonymous user is already signed in, no need to sign them in again.\r\n        return new UserCredentialImpl({\r\n            user: authInternal.currentUser,\r\n            providerId: null,\r\n            operationType: \"signIn\" /* SIGN_IN */\r\n        });\r\n    }\r\n    const response = await signUp(authInternal, {\r\n        returnSecureToken: true\r\n    });\r\n    const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* SIGN_IN */, response, true);\r\n    await authInternal._updateCurrentUser(userCredential.user);\r\n    return userCredential;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass MultiFactorError extends _firebase_util__WEBPACK_IMPORTED_MODULE_0__.FirebaseError {\r\n    constructor(auth, error, operationType, user) {\r\n        var _a;\r\n        super(error.code, error.message);\r\n        this.operationType = operationType;\r\n        this.user = user;\r\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, MultiFactorError.prototype);\r\n        this.customData = {\r\n            appName: auth.name,\r\n            tenantId: (_a = auth.tenantId) !== null && _a !== void 0 ? _a : undefined,\r\n            _serverResponse: error.customData._serverResponse,\r\n            operationType,\r\n        };\r\n    }\r\n    static _fromErrorAndOperation(auth, error, operationType, user) {\r\n        return new MultiFactorError(auth, error, operationType, user);\r\n    }\r\n}\r\nfunction _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {\r\n    const idTokenProvider = operationType === \"reauthenticate\" /* REAUTHENTICATE */\r\n        ? credential._getReauthenticationResolver(auth)\r\n        : credential._getIdTokenResponse(auth);\r\n    return idTokenProvider.catch(error => {\r\n        if (error.code === `auth/${\"multi-factor-auth-required\" /* MFA_REQUIRED */}`) {\r\n            throw MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);\r\n        }\r\n        throw error;\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Takes a set of UserInfo provider data and converts it to a set of names\r\n */\r\nfunction providerDataAsNames(providerData) {\r\n    return new Set(providerData\r\n        .map(({ providerId }) => providerId)\r\n        .filter(pid => !!pid));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Unlinks a provider from a user account.\r\n *\r\n * @param user - The user.\r\n * @param providerId - The provider to unlink.\r\n *\r\n * @public\r\n */\r\nasync function unlink(user, providerId) {\r\n    const userInternal = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(user);\r\n    await _assertLinkedStatus(true, userInternal, providerId);\r\n    const { providerUserInfo } = await deleteLinkedAccounts(userInternal.auth, {\r\n        idToken: await userInternal.getIdToken(),\r\n        deleteProvider: [providerId]\r\n    });\r\n    const providersLeft = providerDataAsNames(providerUserInfo || []);\r\n    userInternal.providerData = userInternal.providerData.filter(pd => providersLeft.has(pd.providerId));\r\n    if (!providersLeft.has(\"phone\" /* PHONE */)) {\r\n        userInternal.phoneNumber = null;\r\n    }\r\n    await userInternal.auth._persistUserIfCurrent(userInternal);\r\n    return userInternal;\r\n}\r\nasync function _link$1(user, credential, bypassAuthState = false) {\r\n    const response = await _logoutIfInvalidated(user, credential._linkToIdToken(user.auth, await user.getIdToken()), bypassAuthState);\r\n    return UserCredentialImpl._forOperation(user, \"link\" /* LINK */, response);\r\n}\r\nasync function _assertLinkedStatus(expected, user, provider) {\r\n    await _reloadWithoutSaving(user);\r\n    const providerIds = providerDataAsNames(user.providerData);\r\n    const code = expected === false\r\n        ? \"provider-already-linked\" /* PROVIDER_ALREADY_LINKED */\r\n        : \"no-such-provider\" /* NO_SUCH_PROVIDER */;\r\n    _assert(providerIds.has(provider) === expected, user.auth, code);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function _reauthenticate(user, credential, bypassAuthState = false) {\r\n    const { auth } = user;\r\n    const operationType = \"reauthenticate\" /* REAUTHENTICATE */;\r\n    try {\r\n        const response = await _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState);\r\n        _assert(response.idToken, auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n        const parsed = _parseToken(response.idToken);\r\n        _assert(parsed, auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n        const { sub: localId } = parsed;\r\n        _assert(user.uid === localId, auth, \"user-mismatch\" /* USER_MISMATCH */);\r\n        return UserCredentialImpl._forOperation(user, operationType, response);\r\n    }\r\n    catch (e) {\r\n        // Convert user deleted error into user mismatch\r\n        if ((e === null || e === void 0 ? void 0 : e.code) === `auth/${\"user-not-found\" /* USER_DELETED */}`) {\r\n            _fail(auth, \"user-mismatch\" /* USER_MISMATCH */);\r\n        }\r\n        throw e;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function _signInWithCredential(auth, credential, bypassAuthState = false) {\r\n    const operationType = \"signIn\" /* SIGN_IN */;\r\n    const response = await _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential);\r\n    const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, operationType, response);\r\n    if (!bypassAuthState) {\r\n        await auth._updateCurrentUser(userCredential.user);\r\n    }\r\n    return userCredential;\r\n}\r\n/**\r\n * Asynchronously signs in with the given credentials.\r\n *\r\n * @remarks\r\n * An {@link AuthProvider} can be used to generate the credential.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param credential - The auth credential.\r\n *\r\n * @public\r\n */\r\nasync function signInWithCredential(auth, credential) {\r\n    return _signInWithCredential(_castAuth(auth), credential);\r\n}\r\n/**\r\n * Links the user account with the given credentials.\r\n *\r\n * @remarks\r\n * An {@link AuthProvider} can be used to generate the credential.\r\n *\r\n * @param user - The user.\r\n * @param credential - The auth credential.\r\n *\r\n * @public\r\n */\r\nasync function linkWithCredential(user, credential) {\r\n    const userInternal = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(user);\r\n    await _assertLinkedStatus(false, userInternal, credential.providerId);\r\n    return _link$1(userInternal, credential);\r\n}\r\n/**\r\n * Re-authenticates a user using a fresh credential.\r\n *\r\n * @remarks\r\n * Use before operations such as {@link updatePassword} that require tokens from recent sign-in\r\n * attempts. This method can be used to recover from a `CREDENTIAL_TOO_OLD_LOGIN_AGAIN` error.\r\n *\r\n * @param user - The user.\r\n * @param credential - The auth credential.\r\n *\r\n * @public\r\n */\r\nasync function reauthenticateWithCredential(user, credential) {\r\n    return _reauthenticate((0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(user), credential);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function signInWithCustomToken$1(auth, request) {\r\n    return _performSignInRequest(auth, \"POST\" /* POST */, \"/v1/accounts:signInWithCustomToken\" /* SIGN_IN_WITH_CUSTOM_TOKEN */, _addTidIfNecessary(auth, request));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Asynchronously signs in using a custom token.\r\n *\r\n * @remarks\r\n * Custom tokens are used to integrate Firebase Auth with existing auth systems, and must\r\n * be generated by an auth backend using the\r\n * {@link https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth#createcustomtoken | createCustomToken}\r\n * method in the {@link https://firebase.google.com/docs/auth/admin | Admin SDK} .\r\n *\r\n * Fails with an error if the token is invalid, expired, or not accepted by the Firebase Auth service.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param customToken - The custom token to sign in with.\r\n *\r\n * @public\r\n */\r\nasync function signInWithCustomToken(auth, customToken) {\r\n    const authInternal = _castAuth(auth);\r\n    const response = await signInWithCustomToken$1(authInternal, {\r\n        token: customToken,\r\n        returnSecureToken: true\r\n    });\r\n    const cred = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* SIGN_IN */, response);\r\n    await authInternal._updateCurrentUser(cred.user);\r\n    return cred;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass MultiFactorInfoImpl {\r\n    constructor(factorId, response) {\r\n        this.factorId = factorId;\r\n        this.uid = response.mfaEnrollmentId;\r\n        this.enrollmentTime = new Date(response.enrolledAt).toUTCString();\r\n        this.displayName = response.displayName;\r\n    }\r\n    static _fromServerResponse(auth, enrollment) {\r\n        if ('phoneInfo' in enrollment) {\r\n            return PhoneMultiFactorInfo._fromServerResponse(auth, enrollment);\r\n        }\r\n        return _fail(auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n    }\r\n}\r\nclass PhoneMultiFactorInfo extends MultiFactorInfoImpl {\r\n    constructor(response) {\r\n        super(\"phone\" /* PHONE */, response);\r\n        this.phoneNumber = response.phoneInfo;\r\n    }\r\n    static _fromServerResponse(_auth, enrollment) {\r\n        return new PhoneMultiFactorInfo(enrollment);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings) {\r\n    var _a;\r\n    _assert(((_a = actionCodeSettings.url) === null || _a === void 0 ? void 0 : _a.length) > 0, auth, \"invalid-continue-uri\" /* INVALID_CONTINUE_URI */);\r\n    _assert(typeof actionCodeSettings.dynamicLinkDomain === 'undefined' ||\r\n        actionCodeSettings.dynamicLinkDomain.length > 0, auth, \"invalid-dynamic-link-domain\" /* INVALID_DYNAMIC_LINK_DOMAIN */);\r\n    request.continueUrl = actionCodeSettings.url;\r\n    request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;\r\n    request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;\r\n    if (actionCodeSettings.iOS) {\r\n        _assert(actionCodeSettings.iOS.bundleId.length > 0, auth, \"missing-ios-bundle-id\" /* MISSING_IOS_BUNDLE_ID */);\r\n        request.iOSBundleId = actionCodeSettings.iOS.bundleId;\r\n    }\r\n    if (actionCodeSettings.android) {\r\n        _assert(actionCodeSettings.android.packageName.length > 0, auth, \"missing-android-pkg-name\" /* MISSING_ANDROID_PACKAGE_NAME */);\r\n        request.androidInstallApp = actionCodeSettings.android.installApp;\r\n        request.androidMinimumVersionCode =\r\n            actionCodeSettings.android.minimumVersion;\r\n        request.androidPackageName = actionCodeSettings.android.packageName;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Sends a password reset email to the given email address.\r\n *\r\n * @remarks\r\n * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in\r\n * the email sent to the user, along with the new password specified by the user.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);\r\n * // Obtain code from user.\r\n * await confirmPasswordReset('user@example.com', code);\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */\r\nasync function sendPasswordResetEmail(auth, email, actionCodeSettings) {\r\n    const authModular = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(auth);\r\n    const request = {\r\n        requestType: \"PASSWORD_RESET\" /* PASSWORD_RESET */,\r\n        email\r\n    };\r\n    if (actionCodeSettings) {\r\n        _setActionCodeSettingsOnRequest(authModular, request, actionCodeSettings);\r\n    }\r\n    await sendPasswordResetEmail$1(authModular, request);\r\n}\r\n/**\r\n * Completes the password reset process, given a confirmation code and new password.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param oobCode - A confirmation code sent to the user.\r\n * @param newPassword - The new password.\r\n *\r\n * @public\r\n */\r\nasync function confirmPasswordReset(auth, oobCode, newPassword) {\r\n    await resetPassword((0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(auth), {\r\n        oobCode,\r\n        newPassword\r\n    });\r\n    // Do not return the email.\r\n}\r\n/**\r\n * Applies a verification code sent to the user by email or other out-of-band mechanism.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param oobCode - A verification code sent to the user.\r\n *\r\n * @public\r\n */\r\nasync function applyActionCode(auth, oobCode) {\r\n    await applyActionCode$1((0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(auth), { oobCode });\r\n}\r\n/**\r\n * Checks a verification code sent to the user by email or other out-of-band mechanism.\r\n *\r\n * @returns metadata about the code.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param oobCode - A verification code sent to the user.\r\n *\r\n * @public\r\n */\r\nasync function checkActionCode(auth, oobCode) {\r\n    const authModular = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(auth);\r\n    const response = await resetPassword(authModular, { oobCode });\r\n    // Email could be empty only if the request type is EMAIL_SIGNIN or\r\n    // VERIFY_AND_CHANGE_EMAIL.\r\n    // New email should not be empty if the request type is\r\n    // VERIFY_AND_CHANGE_EMAIL.\r\n    // Multi-factor info could not be empty if the request type is\r\n    // REVERT_SECOND_FACTOR_ADDITION.\r\n    const operation = response.requestType;\r\n    _assert(operation, authModular, \"internal-error\" /* INTERNAL_ERROR */);\r\n    switch (operation) {\r\n        case \"EMAIL_SIGNIN\" /* EMAIL_SIGNIN */:\r\n            break;\r\n        case \"VERIFY_AND_CHANGE_EMAIL\" /* VERIFY_AND_CHANGE_EMAIL */:\r\n            _assert(response.newEmail, authModular, \"internal-error\" /* INTERNAL_ERROR */);\r\n            break;\r\n        case \"REVERT_SECOND_FACTOR_ADDITION\" /* REVERT_SECOND_FACTOR_ADDITION */:\r\n            _assert(response.mfaInfo, authModular, \"internal-error\" /* INTERNAL_ERROR */);\r\n        // fall through\r\n        default:\r\n            _assert(response.email, authModular, \"internal-error\" /* INTERNAL_ERROR */);\r\n    }\r\n    // The multi-factor info for revert second factor addition\r\n    let multiFactorInfo = null;\r\n    if (response.mfaInfo) {\r\n        multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(_castAuth(authModular), response.mfaInfo);\r\n    }\r\n    return {\r\n        data: {\r\n            email: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* VERIFY_AND_CHANGE_EMAIL */\r\n                ? response.newEmail\r\n                : response.email) || null,\r\n            previousEmail: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* VERIFY_AND_CHANGE_EMAIL */\r\n                ? response.email\r\n                : response.newEmail) || null,\r\n            multiFactorInfo\r\n        },\r\n        operation\r\n    };\r\n}\r\n/**\r\n * Checks a password reset code sent to the user by email or other out-of-band mechanism.\r\n *\r\n * @returns the user's email address if valid.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param code - A verification code sent to the user.\r\n *\r\n * @public\r\n */\r\nasync function verifyPasswordResetCode(auth, code) {\r\n    const { data } = await checkActionCode((0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(auth), code);\r\n    // Email should always be present since a code was sent to it\r\n    return data.email;\r\n}\r\n/**\r\n * Creates a new user account associated with the specified email address and password.\r\n *\r\n * @remarks\r\n * On successful creation of the user account, this user will also be signed in to your application.\r\n *\r\n * User account creation can fail if the account already exists or the password is invalid.\r\n *\r\n * Note: The email address acts as a unique identifier for the user and enables an email-based\r\n * password reset. This function will create a new user account and set the initial user password.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n * @param password - The user's chosen password.\r\n *\r\n * @public\r\n */\r\nasync function createUserWithEmailAndPassword(auth, email, password) {\r\n    const authInternal = _castAuth(auth);\r\n    const response = await signUp(authInternal, {\r\n        returnSecureToken: true,\r\n        email,\r\n        password\r\n    });\r\n    const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* SIGN_IN */, response);\r\n    await authInternal._updateCurrentUser(userCredential.user);\r\n    return userCredential;\r\n}\r\n/**\r\n * Asynchronously signs in using an email and password.\r\n *\r\n * @remarks\r\n * Fails with an error if the email address and password do not match.\r\n *\r\n * Note: The user's password is NOT the password used to access the user's email account. The\r\n * email address serves as a unique identifier for the user, and the password is used to access\r\n * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The users email address.\r\n * @param password - The users password.\r\n *\r\n * @public\r\n */\r\nfunction signInWithEmailAndPassword(auth, email, password) {\r\n    return signInWithCredential((0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(auth), EmailAuthProvider.credential(email, password));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Sends a sign-in email link to the user with the specified email.\r\n *\r\n * @remarks\r\n * The sign-in operation has to always be completed in the app unlike other out of band email\r\n * actions (password reset and email verifications). This is because, at the end of the flow,\r\n * the user is expected to be signed in and their Auth state persisted within the app.\r\n *\r\n * To complete sign in with the email link, call {@link signInWithEmailLink} with the email\r\n * address and the email link supplied in the email sent to the user.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\r\n * // Obtain emailLink from the user.\r\n * if(isSignInWithEmailLink(auth, emailLink)) {\r\n *   await signInWithEmailLink('user@example.com', 'user@example.com', emailLink);\r\n * }\r\n * ```\r\n *\r\n * @param authInternal - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */\r\nasync function sendSignInLinkToEmail(auth, email, actionCodeSettings) {\r\n    const authModular = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(auth);\r\n    const request = {\r\n        requestType: \"EMAIL_SIGNIN\" /* EMAIL_SIGNIN */,\r\n        email\r\n    };\r\n    _assert(actionCodeSettings.handleCodeInApp, authModular, \"argument-error\" /* ARGUMENT_ERROR */);\r\n    if (actionCodeSettings) {\r\n        _setActionCodeSettingsOnRequest(authModular, request, actionCodeSettings);\r\n    }\r\n    await sendSignInLinkToEmail$1(authModular, request);\r\n}\r\n/**\r\n * Checks if an incoming link is a sign-in with email link suitable for {@link signInWithEmailLink}.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param emailLink - The link sent to the user's email address.\r\n *\r\n * @public\r\n */\r\nfunction isSignInWithEmailLink(auth, emailLink) {\r\n    const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\r\n    return (actionCodeUrl === null || actionCodeUrl === void 0 ? void 0 : actionCodeUrl.operation) === \"EMAIL_SIGNIN\" /* EMAIL_SIGNIN */;\r\n}\r\n/**\r\n * Asynchronously signs in using an email and sign-in email link.\r\n *\r\n * @remarks\r\n * If no link is passed, the link is inferred from the current URL.\r\n *\r\n * Fails with an error if the email address is invalid or OTP in email link expires.\r\n *\r\n * Note: Confirm the link is a sign-in email link before calling this method firebase.auth.Auth.isSignInWithEmailLink.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\r\n * // Obtain emailLink from the user.\r\n * if(isSignInWithEmailLink(auth, emailLink)) {\r\n *   await signInWithEmailLink('user@example.com', 'user@example.com', emailLink);\r\n * }\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n * @param emailLink - The link sent to the user's email address.\r\n *\r\n * @public\r\n */\r\nasync function signInWithEmailLink(auth, email, emailLink) {\r\n    const authModular = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(auth);\r\n    const credential = EmailAuthProvider.credentialWithLink(email, emailLink || _getCurrentUrl());\r\n    // Check if the tenant ID in the email link matches the tenant ID on Auth\r\n    // instance.\r\n    _assert(credential._tenantId === (authModular.tenantId || null), authModular, \"tenant-id-mismatch\" /* TENANT_ID_MISMATCH */);\r\n    return signInWithCredential(authModular, credential);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function createAuthUri(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* POST */, \"/v1/accounts:createAuthUri\" /* CREATE_AUTH_URI */, _addTidIfNecessary(auth, request));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Gets the list of possible sign in methods for the given email address.\r\n *\r\n * @remarks\r\n * This is useful to differentiate methods of sign-in for the same provider, eg.\r\n * {@link EmailAuthProvider} which has 2 methods of sign-in,\r\n * {@link SignInMethod}.EMAIL_PASSWORD and\r\n * {@link SignInMethod}.EMAIL_LINK.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n *\r\n * @public\r\n */\r\nasync function fetchSignInMethodsForEmail(auth, email) {\r\n    // createAuthUri returns an error if continue URI is not http or https.\r\n    // For environments like Cordova, Chrome extensions, native frameworks, file\r\n    // systems, etc, use http://localhost as continue URL.\r\n    const continueUri = _isHttpOrHttps() ? _getCurrentUrl() : 'http://localhost';\r\n    const request = {\r\n        identifier: email,\r\n        continueUri\r\n    };\r\n    const { signinMethods } = await createAuthUri((0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(auth), request);\r\n    return signinMethods || [];\r\n}\r\n/**\r\n * Sends a verification email to a user.\r\n *\r\n * @remarks\r\n * The verification process is completed by calling {@link applyActionCode}.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await sendEmailVerification(user, actionCodeSettings);\r\n * // Obtain code from the user.\r\n * await applyActionCode(auth, code);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */\r\nasync function sendEmailVerification(user, actionCodeSettings) {\r\n    const userInternal = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(user);\r\n    const idToken = await user.getIdToken();\r\n    const request = {\r\n        requestType: \"VERIFY_EMAIL\" /* VERIFY_EMAIL */,\r\n        idToken\r\n    };\r\n    if (actionCodeSettings) {\r\n        _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\r\n    }\r\n    const { email } = await sendEmailVerification$1(userInternal.auth, request);\r\n    if (email !== user.email) {\r\n        await user.reload();\r\n    }\r\n}\r\n/**\r\n * Sends a verification email to a new email address.\r\n *\r\n * @remarks\r\n * The user's email will be updated to the new one after being verified.\r\n *\r\n * If you have a custom email action handler, you can complete the verification process by calling\r\n * {@link applyActionCode}.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);\r\n * // Obtain code from the user.\r\n * await applyActionCode(auth, code);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param newEmail - The new email address to be verified before update.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */\r\nasync function verifyBeforeUpdateEmail(user, newEmail, actionCodeSettings) {\r\n    const userInternal = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(user);\r\n    const idToken = await user.getIdToken();\r\n    const request = {\r\n        requestType: \"VERIFY_AND_CHANGE_EMAIL\" /* VERIFY_AND_CHANGE_EMAIL */,\r\n        idToken,\r\n        newEmail\r\n    };\r\n    if (actionCodeSettings) {\r\n        _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\r\n    }\r\n    const { email } = await verifyAndChangeEmail(userInternal.auth, request);\r\n    if (email !== user.email) {\r\n        // If the local copy of the email on user is outdated, reload the\r\n        // user.\r\n        await user.reload();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function updateProfile$1(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* POST */, \"/v1/accounts:update\" /* SET_ACCOUNT_INFO */, request);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Updates a user's profile data.\r\n *\r\n * @param user - The user.\r\n * @param profile - The profile's `displayName` and `photoURL` to update.\r\n *\r\n * @public\r\n */\r\nasync function updateProfile(user, { displayName, photoURL: photoUrl }) {\r\n    if (displayName === undefined && photoUrl === undefined) {\r\n        return;\r\n    }\r\n    const userInternal = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(user);\r\n    const idToken = await userInternal.getIdToken();\r\n    const profileRequest = {\r\n        idToken,\r\n        displayName,\r\n        photoUrl,\r\n        returnSecureToken: true\r\n    };\r\n    const response = await _logoutIfInvalidated(userInternal, updateProfile$1(userInternal.auth, profileRequest));\r\n    userInternal.displayName = response.displayName || null;\r\n    userInternal.photoURL = response.photoUrl || null;\r\n    // Update the password provider as well\r\n    const passwordProvider = userInternal.providerData.find(({ providerId }) => providerId === \"password\" /* PASSWORD */);\r\n    if (passwordProvider) {\r\n        passwordProvider.displayName = userInternal.displayName;\r\n        passwordProvider.photoURL = userInternal.photoURL;\r\n    }\r\n    await userInternal._updateTokensIfNecessary(response);\r\n}\r\n/**\r\n * Updates the user's email address.\r\n *\r\n * @remarks\r\n * An email will be sent to the original email address (if it was set) that allows to revoke the\r\n * email address change, in order to protect them from account hijacking.\r\n *\r\n * Important: this is a security sensitive operation that requires the user to have recently signed\r\n * in. If this requirement isn't met, ask the user to authenticate again and then call\r\n * {@link reauthenticateWithCredential}.\r\n *\r\n * @param user - The user.\r\n * @param newEmail - The new email address.\r\n *\r\n * @public\r\n */\r\nfunction updateEmail(user, newEmail) {\r\n    return updateEmailOrPassword((0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(user), newEmail, null);\r\n}\r\n/**\r\n * Updates the user's password.\r\n *\r\n * @remarks\r\n * Important: this is a security sensitive operation that requires the user to have recently signed\r\n * in. If this requirement isn't met, ask the user to authenticate again and then call\r\n * {@link reauthenticateWithCredential}.\r\n *\r\n * @param user - The user.\r\n * @param newPassword - The new password.\r\n *\r\n * @public\r\n */\r\nfunction updatePassword(user, newPassword) {\r\n    return updateEmailOrPassword((0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(user), null, newPassword);\r\n}\r\nasync function updateEmailOrPassword(user, email, password) {\r\n    const { auth } = user;\r\n    const idToken = await user.getIdToken();\r\n    const request = {\r\n        idToken,\r\n        returnSecureToken: true\r\n    };\r\n    if (email) {\r\n        request.email = email;\r\n    }\r\n    if (password) {\r\n        request.password = password;\r\n    }\r\n    const response = await _logoutIfInvalidated(user, updateEmailPassword(auth, request));\r\n    await user._updateTokensIfNecessary(response, /* reload */ true);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Parse the `AdditionalUserInfo` from the ID token response.\r\n *\r\n */\r\nfunction _fromIdTokenResponse(idTokenResponse) {\r\n    var _a, _b;\r\n    if (!idTokenResponse) {\r\n        return null;\r\n    }\r\n    const { providerId } = idTokenResponse;\r\n    const profile = idTokenResponse.rawUserInfo\r\n        ? JSON.parse(idTokenResponse.rawUserInfo)\r\n        : {};\r\n    const isNewUser = idTokenResponse.isNewUser ||\r\n        idTokenResponse.kind === \"identitytoolkit#SignupNewUserResponse\" /* SignupNewUser */;\r\n    if (!providerId && (idTokenResponse === null || idTokenResponse === void 0 ? void 0 : idTokenResponse.idToken)) {\r\n        const signInProvider = (_b = (_a = _parseToken(idTokenResponse.idToken)) === null || _a === void 0 ? void 0 : _a.firebase) === null || _b === void 0 ? void 0 : _b['sign_in_provider'];\r\n        if (signInProvider) {\r\n            const filteredProviderId = signInProvider !== \"anonymous\" /* ANONYMOUS */ &&\r\n                signInProvider !== \"custom\" /* CUSTOM */\r\n                ? signInProvider\r\n                : null;\r\n            // Uses generic class in accordance with the legacy SDK.\r\n            return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);\r\n        }\r\n    }\r\n    if (!providerId) {\r\n        return null;\r\n    }\r\n    switch (providerId) {\r\n        case \"facebook.com\" /* FACEBOOK */:\r\n            return new FacebookAdditionalUserInfo(isNewUser, profile);\r\n        case \"github.com\" /* GITHUB */:\r\n            return new GithubAdditionalUserInfo(isNewUser, profile);\r\n        case \"google.com\" /* GOOGLE */:\r\n            return new GoogleAdditionalUserInfo(isNewUser, profile);\r\n        case \"twitter.com\" /* TWITTER */:\r\n            return new TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);\r\n        case \"custom\" /* CUSTOM */:\r\n        case \"anonymous\" /* ANONYMOUS */:\r\n            return new GenericAdditionalUserInfo(isNewUser, null);\r\n        default:\r\n            return new GenericAdditionalUserInfo(isNewUser, providerId, profile);\r\n    }\r\n}\r\nclass GenericAdditionalUserInfo {\r\n    constructor(isNewUser, providerId, profile = {}) {\r\n        this.isNewUser = isNewUser;\r\n        this.providerId = providerId;\r\n        this.profile = profile;\r\n    }\r\n}\r\nclass FederatedAdditionalUserInfoWithUsername extends GenericAdditionalUserInfo {\r\n    constructor(isNewUser, providerId, profile, username) {\r\n        super(isNewUser, providerId, profile);\r\n        this.username = username;\r\n    }\r\n}\r\nclass FacebookAdditionalUserInfo extends GenericAdditionalUserInfo {\r\n    constructor(isNewUser, profile) {\r\n        super(isNewUser, \"facebook.com\" /* FACEBOOK */, profile);\r\n    }\r\n}\r\nclass GithubAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {\r\n    constructor(isNewUser, profile) {\r\n        super(isNewUser, \"github.com\" /* GITHUB */, profile, typeof (profile === null || profile === void 0 ? void 0 : profile.login) === 'string' ? profile === null || profile === void 0 ? void 0 : profile.login : null);\r\n    }\r\n}\r\nclass GoogleAdditionalUserInfo extends GenericAdditionalUserInfo {\r\n    constructor(isNewUser, profile) {\r\n        super(isNewUser, \"google.com\" /* GOOGLE */, profile);\r\n    }\r\n}\r\nclass TwitterAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {\r\n    constructor(isNewUser, profile, screenName) {\r\n        super(isNewUser, \"twitter.com\" /* TWITTER */, profile, screenName);\r\n    }\r\n}\r\n/**\r\n * Extracts provider specific {@link AdditionalUserInfo} for the given credential.\r\n *\r\n * @param userCredential - The user credential.\r\n *\r\n * @public\r\n */\r\nfunction getAdditionalUserInfo(userCredential) {\r\n    const { user, _tokenResponse } = userCredential;\r\n    if (user.isAnonymous && !_tokenResponse) {\r\n        // Handle the special case where signInAnonymously() gets called twice.\r\n        // No network call is made so there's nothing to actually fill this in\r\n        return {\r\n            providerId: null,\r\n            isNewUser: false,\r\n            profile: null\r\n        };\r\n    }\r\n    return _fromIdTokenResponse(_tokenResponse);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Non-optional auth methods.\r\n/**\r\n * Changes the type of persistence on the {@link Auth} instance for the currently saved\r\n * `Auth` session and applies this type of persistence for future sign-in requests, including\r\n * sign-in with redirect requests.\r\n *\r\n * @remarks\r\n * This makes it easy for a user signing in to specify whether their session should be\r\n * remembered or not. It also makes it easier to never persist the `Auth` state for applications\r\n * that are shared by other users or have sensitive data.\r\n *\r\n * @example\r\n * ```javascript\r\n * setPersistence(auth, browserSessionPersistence);\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param persistence - The {@link Persistence} to use.\r\n * @returns A `Promise` that resolves once the persistence change has completed\r\n *\r\n * @public\r\n */\r\nfunction setPersistence(auth, persistence) {\r\n    return (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(auth).setPersistence(persistence);\r\n}\r\n/**\r\n * Adds an observer for changes to the signed-in user's ID token, which includes sign-in,\r\n * sign-out, and token refresh events.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param nextOrObserver - callback triggered on change.\r\n * @param error - callback triggered on error.\r\n * @param completed - callback triggered when observer is removed.\r\n *\r\n * @public\r\n */\r\nfunction onIdTokenChanged(auth, nextOrObserver, error, completed) {\r\n    return (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(auth).onIdTokenChanged(nextOrObserver, error, completed);\r\n}\r\n/**\r\n * Adds an observer for changes to the user's sign-in state.\r\n *\r\n * @remarks\r\n * To keep the old behavior, see {@link onIdTokenChanged}.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param nextOrObserver - callback triggered on change.\r\n * @param error - callback triggered on error.\r\n * @param completed - callback triggered when observer is removed.\r\n *\r\n * @public\r\n */\r\nfunction onAuthStateChanged(auth, nextOrObserver, error, completed) {\r\n    return (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(auth).onAuthStateChanged(nextOrObserver, error, completed);\r\n}\r\n/**\r\n * Sets the current language to the default device/browser preference.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n *\r\n * @public\r\n */\r\nfunction useDeviceLanguage(auth) {\r\n    (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(auth).useDeviceLanguage();\r\n}\r\n/**\r\n * Asynchronously sets the provided user as {@link Auth.currentUser} on the\r\n * {@link Auth} instance.\r\n *\r\n * @remarks\r\n * A new instance copy of the user provided will be made and set as currentUser.\r\n *\r\n * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners\r\n * like other sign in methods.\r\n *\r\n * The operation fails with an error if the user to be updated belongs to a different Firebase\r\n * project.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param user - The new {@link User}.\r\n *\r\n * @public\r\n */\r\nfunction updateCurrentUser(auth, user) {\r\n    return (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(auth).updateCurrentUser(user);\r\n}\r\n/**\r\n * Signs out the current user.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n *\r\n * @public\r\n */\r\nfunction signOut(auth) {\r\n    return (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(auth).signOut();\r\n}\r\n/**\r\n * Deletes and signs out the user.\r\n *\r\n * @remarks\r\n * Important: this is a security-sensitive operation that requires the user to have recently\r\n * signed in. If this requirement isn't met, ask the user to authenticate again and then call\r\n * {@link reauthenticateWithCredential}.\r\n *\r\n * @param user - The user.\r\n *\r\n * @public\r\n */\r\nasync function deleteUser(user) {\r\n    return (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(user).delete();\r\n}\n\nclass MultiFactorSessionImpl {\r\n    constructor(type, credential) {\r\n        this.type = type;\r\n        this.credential = credential;\r\n    }\r\n    static _fromIdtoken(idToken) {\r\n        return new MultiFactorSessionImpl(\"enroll\" /* ENROLL */, idToken);\r\n    }\r\n    static _fromMfaPendingCredential(mfaPendingCredential) {\r\n        return new MultiFactorSessionImpl(\"signin\" /* SIGN_IN */, mfaPendingCredential);\r\n    }\r\n    toJSON() {\r\n        const key = this.type === \"enroll\" /* ENROLL */\r\n            ? 'idToken'\r\n            : 'pendingCredential';\r\n        return {\r\n            multiFactorSession: {\r\n                [key]: this.credential\r\n            }\r\n        };\r\n    }\r\n    static fromJSON(obj) {\r\n        var _a, _b;\r\n        if (obj === null || obj === void 0 ? void 0 : obj.multiFactorSession) {\r\n            if ((_a = obj.multiFactorSession) === null || _a === void 0 ? void 0 : _a.pendingCredential) {\r\n                return MultiFactorSessionImpl._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);\r\n            }\r\n            else if ((_b = obj.multiFactorSession) === null || _b === void 0 ? void 0 : _b.idToken) {\r\n                return MultiFactorSessionImpl._fromIdtoken(obj.multiFactorSession.idToken);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass MultiFactorResolverImpl {\r\n    constructor(session, hints, signInResolver) {\r\n        this.session = session;\r\n        this.hints = hints;\r\n        this.signInResolver = signInResolver;\r\n    }\r\n    /** @internal */\r\n    static _fromError(authExtern, error) {\r\n        const auth = _castAuth(authExtern);\r\n        const serverResponse = error.customData._serverResponse;\r\n        const hints = (serverResponse.mfaInfo || []).map(enrollment => MultiFactorInfoImpl._fromServerResponse(auth, enrollment));\r\n        _assert(serverResponse.mfaPendingCredential, auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n        const session = MultiFactorSessionImpl._fromMfaPendingCredential(serverResponse.mfaPendingCredential);\r\n        return new MultiFactorResolverImpl(session, hints, async (assertion) => {\r\n            const mfaResponse = await assertion._process(auth, session);\r\n            // Clear out the unneeded fields from the old login response\r\n            delete serverResponse.mfaInfo;\r\n            delete serverResponse.mfaPendingCredential;\r\n            // Use in the new token & refresh token in the old response\r\n            const idTokenResponse = Object.assign(Object.assign({}, serverResponse), { idToken: mfaResponse.idToken, refreshToken: mfaResponse.refreshToken });\r\n            // TODO: we should collapse this switch statement into UserCredentialImpl._forOperation and have it support the SIGN_IN case\r\n            switch (error.operationType) {\r\n                case \"signIn\" /* SIGN_IN */:\r\n                    const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, error.operationType, idTokenResponse);\r\n                    await auth._updateCurrentUser(userCredential.user);\r\n                    return userCredential;\r\n                case \"reauthenticate\" /* REAUTHENTICATE */:\r\n                    _assert(error.user, auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n                    return UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse);\r\n                default:\r\n                    _fail(auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n            }\r\n        });\r\n    }\r\n    async resolveSignIn(assertionExtern) {\r\n        const assertion = assertionExtern;\r\n        return this.signInResolver(assertion);\r\n    }\r\n}\r\n/**\r\n * Provides a {@link MultiFactorResolver} suitable for completion of a\r\n * multi-factor flow.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param error - The {@link MultiFactorError} raised during a sign-in, or\r\n * reauthentication operation.\r\n *\r\n * @public\r\n */\r\nfunction getMultiFactorResolver(auth, error) {\r\n    var _a;\r\n    const authModular = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(auth);\r\n    const errorInternal = error;\r\n    _assert(error.customData.operationType, authModular, \"argument-error\" /* ARGUMENT_ERROR */);\r\n    _assert((_a = errorInternal.customData._serverResponse) === null || _a === void 0 ? void 0 : _a.mfaPendingCredential, authModular, \"argument-error\" /* ARGUMENT_ERROR */);\r\n    return MultiFactorResolverImpl._fromError(authModular, errorInternal);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction startEnrollPhoneMfa(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* POST */, \"/v2/accounts/mfaEnrollment:start\" /* START_PHONE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\r\n}\r\nfunction finalizeEnrollPhoneMfa(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* POST */, \"/v2/accounts/mfaEnrollment:finalize\" /* FINALIZE_PHONE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\r\n}\r\nfunction withdrawMfa(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* POST */, \"/v2/accounts/mfaEnrollment:withdraw\" /* WITHDRAW_MFA */, _addTidIfNecessary(auth, request));\r\n}\n\nclass MultiFactorUserImpl {\r\n    constructor(user) {\r\n        this.user = user;\r\n        this.enrolledFactors = [];\r\n        user._onReload(userInfo => {\r\n            if (userInfo.mfaInfo) {\r\n                this.enrolledFactors = userInfo.mfaInfo.map(enrollment => MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment));\r\n            }\r\n        });\r\n    }\r\n    static _fromUser(user) {\r\n        return new MultiFactorUserImpl(user);\r\n    }\r\n    async getSession() {\r\n        return MultiFactorSessionImpl._fromIdtoken(await this.user.getIdToken());\r\n    }\r\n    async enroll(assertionExtern, displayName) {\r\n        const assertion = assertionExtern;\r\n        const session = (await this.getSession());\r\n        const finalizeMfaResponse = await _logoutIfInvalidated(this.user, assertion._process(this.user.auth, session, displayName));\r\n        // New tokens will be issued after enrollment of the new second factors.\r\n        // They need to be updated on the user.\r\n        await this.user._updateTokensIfNecessary(finalizeMfaResponse);\r\n        // The user needs to be reloaded to get the new multi-factor information\r\n        // from server. USER_RELOADED event will be triggered and `enrolledFactors`\r\n        // will be updated.\r\n        return this.user.reload();\r\n    }\r\n    async unenroll(infoOrUid) {\r\n        const mfaEnrollmentId = typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;\r\n        const idToken = await this.user.getIdToken();\r\n        const idTokenResponse = await _logoutIfInvalidated(this.user, withdrawMfa(this.user.auth, {\r\n            idToken,\r\n            mfaEnrollmentId\r\n        }));\r\n        // Remove the second factor from the user's list.\r\n        this.enrolledFactors = this.enrolledFactors.filter(({ uid }) => uid !== mfaEnrollmentId);\r\n        // Depending on whether the backend decided to revoke the user's session,\r\n        // the tokenResponse may be empty. If the tokens were not updated (and they\r\n        // are now invalid), reloading the user will discover this and invalidate\r\n        // the user's state accordingly.\r\n        await this.user._updateTokensIfNecessary(idTokenResponse);\r\n        try {\r\n            await this.user.reload();\r\n        }\r\n        catch (e) {\r\n            if (e.code !== `auth/${\"user-token-expired\" /* TOKEN_EXPIRED */}`) {\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n}\r\nconst multiFactorUserCache = new WeakMap();\r\n/**\r\n * The {@link MultiFactorUser} corresponding to the user.\r\n *\r\n * @remarks\r\n * This is used to access all multi-factor properties and operations related to the user.\r\n *\r\n * @param user - The user.\r\n *\r\n * @public\r\n */\r\nfunction multiFactor(user) {\r\n    const userModular = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(user);\r\n    if (!multiFactorUserCache.has(userModular)) {\r\n        multiFactorUserCache.set(userModular, MultiFactorUserImpl._fromUser(userModular));\r\n    }\r\n    return multiFactorUserCache.get(userModular);\r\n}\n\nconst STORAGE_AVAILABLE_KEY = '__sak';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// There are two different browser persistence types: local and session.\r\n// Both have the same implementation but use a different underlying storage\r\n// object.\r\nclass BrowserPersistenceClass {\r\n    constructor(storageRetriever, type) {\r\n        this.storageRetriever = storageRetriever;\r\n        this.type = type;\r\n    }\r\n    _isAvailable() {\r\n        try {\r\n            if (!this.storage) {\r\n                return Promise.resolve(false);\r\n            }\r\n            this.storage.setItem(STORAGE_AVAILABLE_KEY, '1');\r\n            this.storage.removeItem(STORAGE_AVAILABLE_KEY);\r\n            return Promise.resolve(true);\r\n        }\r\n        catch (_a) {\r\n            return Promise.resolve(false);\r\n        }\r\n    }\r\n    _set(key, value) {\r\n        this.storage.setItem(key, JSON.stringify(value));\r\n        return Promise.resolve();\r\n    }\r\n    _get(key) {\r\n        const json = this.storage.getItem(key);\r\n        return Promise.resolve(json ? JSON.parse(json) : null);\r\n    }\r\n    _remove(key) {\r\n        this.storage.removeItem(key);\r\n        return Promise.resolve();\r\n    }\r\n    get storage() {\r\n        return this.storageRetriever();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction _iframeCannotSyncWebStorage() {\r\n    const ua = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getUA)();\r\n    return _isSafari(ua) || _isIOS(ua);\r\n}\r\n// The polling period in case events are not supported\r\nconst _POLLING_INTERVAL_MS$1 = 1000;\r\n// The IE 10 localStorage cross tab synchronization delay in milliseconds\r\nconst IE10_LOCAL_STORAGE_SYNC_DELAY = 10;\r\nclass BrowserLocalPersistence extends BrowserPersistenceClass {\r\n    constructor() {\r\n        super(() => window.localStorage, \"LOCAL\" /* LOCAL */);\r\n        this.boundEventHandler = (event, poll) => this.onStorageEvent(event, poll);\r\n        this.listeners = {};\r\n        this.localCache = {};\r\n        // setTimeout return value is platform specific\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        this.pollTimer = null;\r\n        // Safari or iOS browser and embedded in an iframe.\r\n        this.safariLocalStorageNotSynced = _iframeCannotSyncWebStorage() && _isIframe();\r\n        // Whether to use polling instead of depending on window events\r\n        this.fallbackToPolling = _isMobileBrowser();\r\n        this._shouldAllowMigration = true;\r\n    }\r\n    forAllChangedKeys(cb) {\r\n        // Check all keys with listeners on them.\r\n        for (const key of Object.keys(this.listeners)) {\r\n            // Get value from localStorage.\r\n            const newValue = this.storage.getItem(key);\r\n            const oldValue = this.localCache[key];\r\n            // If local map value does not match, trigger listener with storage event.\r\n            // Differentiate this simulated event from the real storage event.\r\n            if (newValue !== oldValue) {\r\n                cb(key, oldValue, newValue);\r\n            }\r\n        }\r\n    }\r\n    onStorageEvent(event, poll = false) {\r\n        // Key would be null in some situations, like when localStorage is cleared\r\n        if (!event.key) {\r\n            this.forAllChangedKeys((key, _oldValue, newValue) => {\r\n                this.notifyListeners(key, newValue);\r\n            });\r\n            return;\r\n        }\r\n        const key = event.key;\r\n        // Check the mechanism how this event was detected.\r\n        // The first event will dictate the mechanism to be used.\r\n        if (poll) {\r\n            // Environment detects storage changes via polling.\r\n            // Remove storage event listener to prevent possible event duplication.\r\n            this.detachListener();\r\n        }\r\n        else {\r\n            // Environment detects storage changes via storage event listener.\r\n            // Remove polling listener to prevent possible event duplication.\r\n            this.stopPolling();\r\n        }\r\n        // Safari embedded iframe. Storage event will trigger with the delta\r\n        // changes but no changes will be applied to the iframe localStorage.\r\n        if (this.safariLocalStorageNotSynced) {\r\n            // Get current iframe page value.\r\n            const storedValue = this.storage.getItem(key);\r\n            // Value not synchronized, synchronize manually.\r\n            if (event.newValue !== storedValue) {\r\n                if (event.newValue !== null) {\r\n                    // Value changed from current value.\r\n                    this.storage.setItem(key, event.newValue);\r\n                }\r\n                else {\r\n                    // Current value deleted.\r\n                    this.storage.removeItem(key);\r\n                }\r\n            }\r\n            else if (this.localCache[key] === event.newValue && !poll) {\r\n                // Already detected and processed, do not trigger listeners again.\r\n                return;\r\n            }\r\n        }\r\n        const triggerListeners = () => {\r\n            // Keep local map up to date in case storage event is triggered before\r\n            // poll.\r\n            const storedValue = this.storage.getItem(key);\r\n            if (!poll && this.localCache[key] === storedValue) {\r\n                // Real storage event which has already been detected, do nothing.\r\n                // This seems to trigger in some IE browsers for some reason.\r\n                return;\r\n            }\r\n            this.notifyListeners(key, storedValue);\r\n        };\r\n        const storedValue = this.storage.getItem(key);\r\n        if (_isIE10() &&\r\n            storedValue !== event.newValue &&\r\n            event.newValue !== event.oldValue) {\r\n            // IE 10 has this weird bug where a storage event would trigger with the\r\n            // correct key, oldValue and newValue but localStorage.getItem(key) does\r\n            // not yield the updated value until a few milliseconds. This ensures\r\n            // this recovers from that situation.\r\n            setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);\r\n        }\r\n        else {\r\n            triggerListeners();\r\n        }\r\n    }\r\n    notifyListeners(key, value) {\r\n        this.localCache[key] = value;\r\n        const listeners = this.listeners[key];\r\n        if (listeners) {\r\n            for (const listener of Array.from(listeners)) {\r\n                listener(value ? JSON.parse(value) : value);\r\n            }\r\n        }\r\n    }\r\n    startPolling() {\r\n        this.stopPolling();\r\n        this.pollTimer = setInterval(() => {\r\n            this.forAllChangedKeys((key, oldValue, newValue) => {\r\n                this.onStorageEvent(new StorageEvent('storage', {\r\n                    key,\r\n                    oldValue,\r\n                    newValue\r\n                }), \r\n                /* poll */ true);\r\n            });\r\n        }, _POLLING_INTERVAL_MS$1);\r\n    }\r\n    stopPolling() {\r\n        if (this.pollTimer) {\r\n            clearInterval(this.pollTimer);\r\n            this.pollTimer = null;\r\n        }\r\n    }\r\n    attachListener() {\r\n        window.addEventListener('storage', this.boundEventHandler);\r\n    }\r\n    detachListener() {\r\n        window.removeEventListener('storage', this.boundEventHandler);\r\n    }\r\n    _addListener(key, listener) {\r\n        if (Object.keys(this.listeners).length === 0) {\r\n            // Whether browser can detect storage event when it had already been pushed to the background.\r\n            // This may happen in some mobile browsers. A localStorage change in the foreground window\r\n            // will not be detected in the background window via the storage event.\r\n            // This was detected in iOS 7.x mobile browsers\r\n            if (this.fallbackToPolling) {\r\n                this.startPolling();\r\n            }\r\n            else {\r\n                this.attachListener();\r\n            }\r\n        }\r\n        if (!this.listeners[key]) {\r\n            this.listeners[key] = new Set();\r\n            // Populate the cache to avoid spuriously triggering on first poll.\r\n            this.localCache[key] = this.storage.getItem(key);\r\n        }\r\n        this.listeners[key].add(listener);\r\n    }\r\n    _removeListener(key, listener) {\r\n        if (this.listeners[key]) {\r\n            this.listeners[key].delete(listener);\r\n            if (this.listeners[key].size === 0) {\r\n                delete this.listeners[key];\r\n            }\r\n        }\r\n        if (Object.keys(this.listeners).length === 0) {\r\n            this.detachListener();\r\n            this.stopPolling();\r\n        }\r\n    }\r\n    // Update local cache on base operations:\r\n    async _set(key, value) {\r\n        await super._set(key, value);\r\n        this.localCache[key] = JSON.stringify(value);\r\n    }\r\n    async _get(key) {\r\n        const value = await super._get(key);\r\n        this.localCache[key] = JSON.stringify(value);\r\n        return value;\r\n    }\r\n    async _remove(key) {\r\n        await super._remove(key);\r\n        delete this.localCache[key];\r\n    }\r\n}\r\nBrowserLocalPersistence.type = 'LOCAL';\r\n/**\r\n * An implementation of {@link Persistence} of type `LOCAL` using `localStorage`\r\n * for the underlying storage.\r\n *\r\n * @public\r\n */\r\nconst browserLocalPersistence = BrowserLocalPersistence;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass BrowserSessionPersistence extends BrowserPersistenceClass {\r\n    constructor() {\r\n        super(() => window.sessionStorage, \"SESSION\" /* SESSION */);\r\n    }\r\n    _addListener(_key, _listener) {\r\n        // Listeners are not supported for session storage since it cannot be shared across windows\r\n        return;\r\n    }\r\n    _removeListener(_key, _listener) {\r\n        // Listeners are not supported for session storage since it cannot be shared across windows\r\n        return;\r\n    }\r\n}\r\nBrowserSessionPersistence.type = 'SESSION';\r\n/**\r\n * An implementation of {@link Persistence} of `SESSION` using `sessionStorage`\r\n * for the underlying storage.\r\n *\r\n * @public\r\n */\r\nconst browserSessionPersistence = BrowserSessionPersistence;\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Shim for Promise.allSettled, note the slightly different format of `fulfilled` vs `status`.\r\n *\r\n * @param promises - Array of promises to wait on.\r\n */\r\nfunction _allSettled(promises) {\r\n    return Promise.all(promises.map(async (promise) => {\r\n        try {\r\n            const value = await promise;\r\n            return {\r\n                fulfilled: true,\r\n                value\r\n            };\r\n        }\r\n        catch (reason) {\r\n            return {\r\n                fulfilled: false,\r\n                reason\r\n            };\r\n        }\r\n    }));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface class for receiving messages.\r\n *\r\n */\r\nclass Receiver {\r\n    constructor(eventTarget) {\r\n        this.eventTarget = eventTarget;\r\n        this.handlersMap = {};\r\n        this.boundEventHandler = this.handleEvent.bind(this);\r\n    }\r\n    /**\r\n     * Obtain an instance of a Receiver for a given event target, if none exists it will be created.\r\n     *\r\n     * @param eventTarget - An event target (such as window or self) through which the underlying\r\n     * messages will be received.\r\n     */\r\n    static _getInstance(eventTarget) {\r\n        // The results are stored in an array since objects can't be keys for other\r\n        // objects. In addition, setting a unique property on an event target as a\r\n        // hash map key may not be allowed due to CORS restrictions.\r\n        const existingInstance = this.receivers.find(receiver => receiver.isListeningto(eventTarget));\r\n        if (existingInstance) {\r\n            return existingInstance;\r\n        }\r\n        const newInstance = new Receiver(eventTarget);\r\n        this.receivers.push(newInstance);\r\n        return newInstance;\r\n    }\r\n    isListeningto(eventTarget) {\r\n        return this.eventTarget === eventTarget;\r\n    }\r\n    /**\r\n     * Fans out a MessageEvent to the appropriate listeners.\r\n     *\r\n     * @remarks\r\n     * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have\r\n     * finished processing.\r\n     *\r\n     * @param event - The MessageEvent.\r\n     *\r\n     */\r\n    async handleEvent(event) {\r\n        const messageEvent = event;\r\n        const { eventId, eventType, data } = messageEvent.data;\r\n        const handlers = this.handlersMap[eventType];\r\n        if (!(handlers === null || handlers === void 0 ? void 0 : handlers.size)) {\r\n            return;\r\n        }\r\n        messageEvent.ports[0].postMessage({\r\n            status: \"ack\" /* ACK */,\r\n            eventId,\r\n            eventType\r\n        });\r\n        const promises = Array.from(handlers).map(async (handler) => handler(messageEvent.origin, data));\r\n        const response = await _allSettled(promises);\r\n        messageEvent.ports[0].postMessage({\r\n            status: \"done\" /* DONE */,\r\n            eventId,\r\n            eventType,\r\n            response\r\n        });\r\n    }\r\n    /**\r\n     * Subscribe an event handler for a particular event.\r\n     *\r\n     * @param eventType - Event name to subscribe to.\r\n     * @param eventHandler - The event handler which should receive the events.\r\n     *\r\n     */\r\n    _subscribe(eventType, eventHandler) {\r\n        if (Object.keys(this.handlersMap).length === 0) {\r\n            this.eventTarget.addEventListener('message', this.boundEventHandler);\r\n        }\r\n        if (!this.handlersMap[eventType]) {\r\n            this.handlersMap[eventType] = new Set();\r\n        }\r\n        this.handlersMap[eventType].add(eventHandler);\r\n    }\r\n    /**\r\n     * Unsubscribe an event handler from a particular event.\r\n     *\r\n     * @param eventType - Event name to unsubscribe from.\r\n     * @param eventHandler - Optinoal event handler, if none provided, unsubscribe all handlers on this event.\r\n     *\r\n     */\r\n    _unsubscribe(eventType, eventHandler) {\r\n        if (this.handlersMap[eventType] && eventHandler) {\r\n            this.handlersMap[eventType].delete(eventHandler);\r\n        }\r\n        if (!eventHandler || this.handlersMap[eventType].size === 0) {\r\n            delete this.handlersMap[eventType];\r\n        }\r\n        if (Object.keys(this.handlersMap).length === 0) {\r\n            this.eventTarget.removeEventListener('message', this.boundEventHandler);\r\n        }\r\n    }\r\n}\r\nReceiver.receivers = [];\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction _generateEventId(prefix = '', digits = 10) {\r\n    let random = '';\r\n    for (let i = 0; i < digits; i++) {\r\n        random += Math.floor(Math.random() * 10);\r\n    }\r\n    return prefix + random;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface for sending messages and waiting for a completion response.\r\n *\r\n */\r\nclass Sender {\r\n    constructor(target) {\r\n        this.target = target;\r\n        this.handlers = new Set();\r\n    }\r\n    /**\r\n     * Unsubscribe the handler and remove it from our tracking Set.\r\n     *\r\n     * @param handler - The handler to unsubscribe.\r\n     */\r\n    removeMessageHandler(handler) {\r\n        if (handler.messageChannel) {\r\n            handler.messageChannel.port1.removeEventListener('message', handler.onMessage);\r\n            handler.messageChannel.port1.close();\r\n        }\r\n        this.handlers.delete(handler);\r\n    }\r\n    /**\r\n     * Send a message to the Receiver located at {@link target}.\r\n     *\r\n     * @remarks\r\n     * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the\r\n     * receiver has had a chance to fully process the event.\r\n     *\r\n     * @param eventType - Type of event to send.\r\n     * @param data - The payload of the event.\r\n     * @param timeout - Timeout for waiting on an ACK from the receiver.\r\n     *\r\n     * @returns An array of settled promises from all the handlers that were listening on the receiver.\r\n     */\r\n    async _send(eventType, data, timeout = 50 /* ACK */) {\r\n        const messageChannel = typeof MessageChannel !== 'undefined' ? new MessageChannel() : null;\r\n        if (!messageChannel) {\r\n            throw new Error(\"connection_unavailable\" /* CONNECTION_UNAVAILABLE */);\r\n        }\r\n        // Node timers and browser timers return fundamentally different types.\r\n        // We don't actually care what the value is but TS won't accept unknown and\r\n        // we can't cast properly in both environments.\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        let completionTimer;\r\n        let handler;\r\n        return new Promise((resolve, reject) => {\r\n            const eventId = _generateEventId('', 20);\r\n            messageChannel.port1.start();\r\n            const ackTimer = setTimeout(() => {\r\n                reject(new Error(\"unsupported_event\" /* UNSUPPORTED_EVENT */));\r\n            }, timeout);\r\n            handler = {\r\n                messageChannel,\r\n                onMessage(event) {\r\n                    const messageEvent = event;\r\n                    if (messageEvent.data.eventId !== eventId) {\r\n                        return;\r\n                    }\r\n                    switch (messageEvent.data.status) {\r\n                        case \"ack\" /* ACK */:\r\n                            // The receiver should ACK first.\r\n                            clearTimeout(ackTimer);\r\n                            completionTimer = setTimeout(() => {\r\n                                reject(new Error(\"timeout\" /* TIMEOUT */));\r\n                            }, 3000 /* COMPLETION */);\r\n                            break;\r\n                        case \"done\" /* DONE */:\r\n                            // Once the receiver's handlers are finished we will get the results.\r\n                            clearTimeout(completionTimer);\r\n                            resolve(messageEvent.data.response);\r\n                            break;\r\n                        default:\r\n                            clearTimeout(ackTimer);\r\n                            clearTimeout(completionTimer);\r\n                            reject(new Error(\"invalid_response\" /* INVALID_RESPONSE */));\r\n                            break;\r\n                    }\r\n                }\r\n            };\r\n            this.handlers.add(handler);\r\n            messageChannel.port1.addEventListener('message', handler.onMessage);\r\n            this.target.postMessage({\r\n                eventType,\r\n                eventId,\r\n                data\r\n            }, [messageChannel.port2]);\r\n        }).finally(() => {\r\n            if (handler) {\r\n                this.removeMessageHandler(handler);\r\n            }\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Lazy accessor for window, since the compat layer won't tree shake this out,\r\n * we need to make sure not to mess with window unless we have to\r\n */\r\nfunction _window() {\r\n    return window;\r\n}\r\nfunction _setWindowLocation(url) {\r\n    _window().location.href = url;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction _isWorker() {\r\n    return (typeof _window()['WorkerGlobalScope'] !== 'undefined' &&\r\n        typeof _window()['importScripts'] === 'function');\r\n}\r\nasync function _getActiveServiceWorker() {\r\n    if (!(navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker)) {\r\n        return null;\r\n    }\r\n    try {\r\n        const registration = await navigator.serviceWorker.ready;\r\n        return registration.active;\r\n    }\r\n    catch (_a) {\r\n        return null;\r\n    }\r\n}\r\nfunction _getServiceWorkerController() {\r\n    var _a;\r\n    return ((_a = navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker) === null || _a === void 0 ? void 0 : _a.controller) || null;\r\n}\r\nfunction _getWorkerGlobalScope() {\r\n    return _isWorker() ? self : null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DB_NAME = 'firebaseLocalStorageDb';\r\nconst DB_VERSION = 1;\r\nconst DB_OBJECTSTORE_NAME = 'firebaseLocalStorage';\r\nconst DB_DATA_KEYPATH = 'fbase_key';\r\n/**\r\n * Promise wrapper for IDBRequest\r\n *\r\n * Unfortunately we can't cleanly extend Promise<T> since promises are not callable in ES6\r\n *\r\n */\r\nclass DBPromise {\r\n    constructor(request) {\r\n        this.request = request;\r\n    }\r\n    toPromise() {\r\n        return new Promise((resolve, reject) => {\r\n            this.request.addEventListener('success', () => {\r\n                resolve(this.request.result);\r\n            });\r\n            this.request.addEventListener('error', () => {\r\n                reject(this.request.error);\r\n            });\r\n        });\r\n    }\r\n}\r\nfunction getObjectStore(db, isReadWrite) {\r\n    return db\r\n        .transaction([DB_OBJECTSTORE_NAME], isReadWrite ? 'readwrite' : 'readonly')\r\n        .objectStore(DB_OBJECTSTORE_NAME);\r\n}\r\nfunction _deleteDatabase() {\r\n    const request = indexedDB.deleteDatabase(DB_NAME);\r\n    return new DBPromise(request).toPromise();\r\n}\r\nfunction _openDatabase() {\r\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n    return new Promise((resolve, reject) => {\r\n        request.addEventListener('error', () => {\r\n            reject(request.error);\r\n        });\r\n        request.addEventListener('upgradeneeded', () => {\r\n            const db = request.result;\r\n            try {\r\n                db.createObjectStore(DB_OBJECTSTORE_NAME, { keyPath: DB_DATA_KEYPATH });\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n        request.addEventListener('success', async () => {\r\n            const db = request.result;\r\n            // Strange bug that occurs in Firefox when multiple tabs are opened at the\r\n            // same time. The only way to recover seems to be deleting the database\r\n            // and re-initializing it.\r\n            // https://github.com/firebase/firebase-js-sdk/issues/634\r\n            if (!db.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) {\r\n                // Need to close the database or else you get a `blocked` event\r\n                db.close();\r\n                await _deleteDatabase();\r\n                resolve(await _openDatabase());\r\n            }\r\n            else {\r\n                resolve(db);\r\n            }\r\n        });\r\n    });\r\n}\r\nasync function _putObject(db, key, value) {\r\n    const request = getObjectStore(db, true).put({\r\n        [DB_DATA_KEYPATH]: key,\r\n        value\r\n    });\r\n    return new DBPromise(request).toPromise();\r\n}\r\nasync function getObject(db, key) {\r\n    const request = getObjectStore(db, false).get(key);\r\n    const data = await new DBPromise(request).toPromise();\r\n    return data === undefined ? null : data.value;\r\n}\r\nfunction _deleteObject(db, key) {\r\n    const request = getObjectStore(db, true).delete(key);\r\n    return new DBPromise(request).toPromise();\r\n}\r\nconst _POLLING_INTERVAL_MS = 800;\r\nconst _TRANSACTION_RETRY_COUNT = 3;\r\nclass IndexedDBLocalPersistence {\r\n    constructor() {\r\n        this.type = \"LOCAL\" /* LOCAL */;\r\n        this._shouldAllowMigration = true;\r\n        this.listeners = {};\r\n        this.localCache = {};\r\n        // setTimeout return value is platform specific\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        this.pollTimer = null;\r\n        this.pendingWrites = 0;\r\n        this.receiver = null;\r\n        this.sender = null;\r\n        this.serviceWorkerReceiverAvailable = false;\r\n        this.activeServiceWorker = null;\r\n        // Fire & forget the service worker registration as it may never resolve\r\n        this._workerInitializationPromise =\r\n            this.initializeServiceWorkerMessaging().then(() => { }, () => { });\r\n    }\r\n    async _openDb() {\r\n        if (this.db) {\r\n            return this.db;\r\n        }\r\n        this.db = await _openDatabase();\r\n        return this.db;\r\n    }\r\n    async _withRetries(op) {\r\n        let numAttempts = 0;\r\n        while (true) {\r\n            try {\r\n                const db = await this._openDb();\r\n                return await op(db);\r\n            }\r\n            catch (e) {\r\n                if (numAttempts++ > _TRANSACTION_RETRY_COUNT) {\r\n                    throw e;\r\n                }\r\n                if (this.db) {\r\n                    this.db.close();\r\n                    this.db = undefined;\r\n                }\r\n                // TODO: consider adding exponential backoff\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * IndexedDB events do not propagate from the main window to the worker context.  We rely on a\r\n     * postMessage interface to send these events to the worker ourselves.\r\n     */\r\n    async initializeServiceWorkerMessaging() {\r\n        return _isWorker() ? this.initializeReceiver() : this.initializeSender();\r\n    }\r\n    /**\r\n     * As the worker we should listen to events from the main window.\r\n     */\r\n    async initializeReceiver() {\r\n        this.receiver = Receiver._getInstance(_getWorkerGlobalScope());\r\n        // Refresh from persistence if we receive a KeyChanged message.\r\n        this.receiver._subscribe(\"keyChanged\" /* KEY_CHANGED */, async (_origin, data) => {\r\n            const keys = await this._poll();\r\n            return {\r\n                keyProcessed: keys.includes(data.key)\r\n            };\r\n        });\r\n        // Let the sender know that we are listening so they give us more timeout.\r\n        this.receiver._subscribe(\"ping\" /* PING */, async (_origin, _data) => {\r\n            return [\"keyChanged\" /* KEY_CHANGED */];\r\n        });\r\n    }\r\n    /**\r\n     * As the main window, we should let the worker know when keys change (set and remove).\r\n     *\r\n     * @remarks\r\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}\r\n     * may not resolve.\r\n     */\r\n    async initializeSender() {\r\n        var _a, _b;\r\n        // Check to see if there's an active service worker.\r\n        this.activeServiceWorker = await _getActiveServiceWorker();\r\n        if (!this.activeServiceWorker) {\r\n            return;\r\n        }\r\n        this.sender = new Sender(this.activeServiceWorker);\r\n        // Ping the service worker to check what events they can handle.\r\n        const results = await this.sender._send(\"ping\" /* PING */, {}, 800 /* LONG_ACK */);\r\n        if (!results) {\r\n            return;\r\n        }\r\n        if (((_a = results[0]) === null || _a === void 0 ? void 0 : _a.fulfilled) &&\r\n            ((_b = results[0]) === null || _b === void 0 ? void 0 : _b.value.includes(\"keyChanged\" /* KEY_CHANGED */))) {\r\n            this.serviceWorkerReceiverAvailable = true;\r\n        }\r\n    }\r\n    /**\r\n     * Let the worker know about a changed key, the exact key doesn't technically matter since the\r\n     * worker will just trigger a full sync anyway.\r\n     *\r\n     * @remarks\r\n     * For now, we only support one service worker per page.\r\n     *\r\n     * @param key - Storage key which changed.\r\n     */\r\n    async notifyServiceWorker(key) {\r\n        if (!this.sender ||\r\n            !this.activeServiceWorker ||\r\n            _getServiceWorkerController() !== this.activeServiceWorker) {\r\n            return;\r\n        }\r\n        try {\r\n            await this.sender._send(\"keyChanged\" /* KEY_CHANGED */, { key }, \r\n            // Use long timeout if receiver has previously responded to a ping from us.\r\n            this.serviceWorkerReceiverAvailable\r\n                ? 800 /* LONG_ACK */\r\n                : 50 /* ACK */);\r\n        }\r\n        catch (_a) {\r\n            // This is a best effort approach. Ignore errors.\r\n        }\r\n    }\r\n    async _isAvailable() {\r\n        try {\r\n            if (!indexedDB) {\r\n                return false;\r\n            }\r\n            const db = await _openDatabase();\r\n            await _putObject(db, STORAGE_AVAILABLE_KEY, '1');\r\n            await _deleteObject(db, STORAGE_AVAILABLE_KEY);\r\n            return true;\r\n        }\r\n        catch (_a) { }\r\n        return false;\r\n    }\r\n    async _withPendingWrite(write) {\r\n        this.pendingWrites++;\r\n        try {\r\n            await write();\r\n        }\r\n        finally {\r\n            this.pendingWrites--;\r\n        }\r\n    }\r\n    async _set(key, value) {\r\n        return this._withPendingWrite(async () => {\r\n            await this._withRetries((db) => _putObject(db, key, value));\r\n            this.localCache[key] = value;\r\n            return this.notifyServiceWorker(key);\r\n        });\r\n    }\r\n    async _get(key) {\r\n        const obj = (await this._withRetries((db) => getObject(db, key)));\r\n        this.localCache[key] = obj;\r\n        return obj;\r\n    }\r\n    async _remove(key) {\r\n        return this._withPendingWrite(async () => {\r\n            await this._withRetries((db) => _deleteObject(db, key));\r\n            delete this.localCache[key];\r\n            return this.notifyServiceWorker(key);\r\n        });\r\n    }\r\n    async _poll() {\r\n        // TODO: check if we need to fallback if getAll is not supported\r\n        const result = await this._withRetries((db) => {\r\n            const getAllRequest = getObjectStore(db, false).getAll();\r\n            return new DBPromise(getAllRequest).toPromise();\r\n        });\r\n        if (!result) {\r\n            return [];\r\n        }\r\n        // If we have pending writes in progress abort, we'll get picked up on the next poll\r\n        if (this.pendingWrites !== 0) {\r\n            return [];\r\n        }\r\n        const keys = [];\r\n        const keysInResult = new Set();\r\n        for (const { fbase_key: key, value } of result) {\r\n            keysInResult.add(key);\r\n            if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {\r\n                this.notifyListeners(key, value);\r\n                keys.push(key);\r\n            }\r\n        }\r\n        for (const localKey of Object.keys(this.localCache)) {\r\n            if (this.localCache[localKey] && !keysInResult.has(localKey)) {\r\n                // Deleted\r\n                this.notifyListeners(localKey, null);\r\n                keys.push(localKey);\r\n            }\r\n        }\r\n        return keys;\r\n    }\r\n    notifyListeners(key, newValue) {\r\n        this.localCache[key] = newValue;\r\n        const listeners = this.listeners[key];\r\n        if (listeners) {\r\n            for (const listener of Array.from(listeners)) {\r\n                listener(newValue);\r\n            }\r\n        }\r\n    }\r\n    startPolling() {\r\n        this.stopPolling();\r\n        this.pollTimer = setInterval(async () => this._poll(), _POLLING_INTERVAL_MS);\r\n    }\r\n    stopPolling() {\r\n        if (this.pollTimer) {\r\n            clearInterval(this.pollTimer);\r\n            this.pollTimer = null;\r\n        }\r\n    }\r\n    _addListener(key, listener) {\r\n        if (Object.keys(this.listeners).length === 0) {\r\n            this.startPolling();\r\n        }\r\n        if (!this.listeners[key]) {\r\n            this.listeners[key] = new Set();\r\n            // Populate the cache to avoid spuriously triggering on first poll.\r\n            void this._get(key); // This can happen in the background async and we can return immediately.\r\n        }\r\n        this.listeners[key].add(listener);\r\n    }\r\n    _removeListener(key, listener) {\r\n        if (this.listeners[key]) {\r\n            this.listeners[key].delete(listener);\r\n            if (this.listeners[key].size === 0) {\r\n                delete this.listeners[key];\r\n            }\r\n        }\r\n        if (Object.keys(this.listeners).length === 0) {\r\n            this.stopPolling();\r\n        }\r\n    }\r\n}\r\nIndexedDBLocalPersistence.type = 'LOCAL';\r\n/**\r\n * An implementation of {@link Persistence} of type `LOCAL` using `indexedDB`\r\n * for the underlying storage.\r\n *\r\n * @public\r\n */\r\nconst indexedDBLocalPersistence = IndexedDBLocalPersistence;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction startSignInPhoneMfa(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* POST */, \"/v2/accounts/mfaSignIn:start\" /* START_PHONE_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\r\n}\r\nfunction finalizeSignInPhoneMfa(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* POST */, \"/v2/accounts/mfaSignIn:finalize\" /* FINALIZE_PHONE_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function getRecaptchaParams(auth) {\r\n    return ((await _performApiRequest(auth, \"GET\" /* GET */, \"/v1/recaptchaParams\" /* GET_RECAPTCHA_PARAM */)).recaptchaSiteKey || '');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getScriptParentElement() {\r\n    var _a, _b;\r\n    return (_b = (_a = document.getElementsByTagName('head')) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : document;\r\n}\r\nfunction _loadJS(url) {\r\n    // TODO: consider adding timeout support & cancellation\r\n    return new Promise((resolve, reject) => {\r\n        const el = document.createElement('script');\r\n        el.setAttribute('src', url);\r\n        el.onload = resolve;\r\n        el.onerror = e => {\r\n            const error = _createError(\"internal-error\" /* INTERNAL_ERROR */);\r\n            error.customData = e;\r\n            reject(error);\r\n        };\r\n        el.type = 'text/javascript';\r\n        el.charset = 'UTF-8';\r\n        getScriptParentElement().appendChild(el);\r\n    });\r\n}\r\nfunction _generateCallbackName(prefix) {\r\n    return `__${prefix}${Math.floor(Math.random() * 1000000)}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst _SOLVE_TIME_MS = 500;\r\nconst _EXPIRATION_TIME_MS = 60000;\r\nconst _WIDGET_ID_START = 1000000000000;\r\nclass MockReCaptcha {\r\n    constructor(auth) {\r\n        this.auth = auth;\r\n        this.counter = _WIDGET_ID_START;\r\n        this._widgets = new Map();\r\n    }\r\n    render(container, parameters) {\r\n        const id = this.counter;\r\n        this._widgets.set(id, new MockWidget(container, this.auth.name, parameters || {}));\r\n        this.counter++;\r\n        return id;\r\n    }\r\n    reset(optWidgetId) {\r\n        var _a;\r\n        const id = optWidgetId || _WIDGET_ID_START;\r\n        void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.delete());\r\n        this._widgets.delete(id);\r\n    }\r\n    getResponse(optWidgetId) {\r\n        var _a;\r\n        const id = optWidgetId || _WIDGET_ID_START;\r\n        return ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.getResponse()) || '';\r\n    }\r\n    async execute(optWidgetId) {\r\n        var _a;\r\n        const id = optWidgetId || _WIDGET_ID_START;\r\n        void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.execute());\r\n        return '';\r\n    }\r\n}\r\nclass MockWidget {\r\n    constructor(containerOrId, appName, params) {\r\n        this.params = params;\r\n        this.timerId = null;\r\n        this.deleted = false;\r\n        this.responseToken = null;\r\n        this.clickHandler = () => {\r\n            this.execute();\r\n        };\r\n        const container = typeof containerOrId === 'string'\r\n            ? document.getElementById(containerOrId)\r\n            : containerOrId;\r\n        _assert(container, \"argument-error\" /* ARGUMENT_ERROR */, { appName });\r\n        this.container = container;\r\n        this.isVisible = this.params.size !== 'invisible';\r\n        if (this.isVisible) {\r\n            this.execute();\r\n        }\r\n        else {\r\n            this.container.addEventListener('click', this.clickHandler);\r\n        }\r\n    }\r\n    getResponse() {\r\n        this.checkIfDeleted();\r\n        return this.responseToken;\r\n    }\r\n    delete() {\r\n        this.checkIfDeleted();\r\n        this.deleted = true;\r\n        if (this.timerId) {\r\n            clearTimeout(this.timerId);\r\n            this.timerId = null;\r\n        }\r\n        this.container.removeEventListener('click', this.clickHandler);\r\n    }\r\n    execute() {\r\n        this.checkIfDeleted();\r\n        if (this.timerId) {\r\n            return;\r\n        }\r\n        this.timerId = window.setTimeout(() => {\r\n            this.responseToken = generateRandomAlphaNumericString(50);\r\n            const { callback, 'expired-callback': expiredCallback } = this.params;\r\n            if (callback) {\r\n                try {\r\n                    callback(this.responseToken);\r\n                }\r\n                catch (e) { }\r\n            }\r\n            this.timerId = window.setTimeout(() => {\r\n                this.timerId = null;\r\n                this.responseToken = null;\r\n                if (expiredCallback) {\r\n                    try {\r\n                        expiredCallback();\r\n                    }\r\n                    catch (e) { }\r\n                }\r\n                if (this.isVisible) {\r\n                    this.execute();\r\n                }\r\n            }, _EXPIRATION_TIME_MS);\r\n        }, _SOLVE_TIME_MS);\r\n    }\r\n    checkIfDeleted() {\r\n        if (this.deleted) {\r\n            throw new Error('reCAPTCHA mock was already deleted!');\r\n        }\r\n    }\r\n}\r\nfunction generateRandomAlphaNumericString(len) {\r\n    const chars = [];\r\n    const allowedChars = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    for (let i = 0; i < len; i++) {\r\n        chars.push(allowedChars.charAt(Math.floor(Math.random() * allowedChars.length)));\r\n    }\r\n    return chars.join('');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// ReCaptcha will load using the same callback, so the callback function needs\r\n// to be kept around\r\nconst _JSLOAD_CALLBACK = _generateCallbackName('rcb');\r\nconst NETWORK_TIMEOUT_DELAY = new Delay(30000, 60000);\r\nconst RECAPTCHA_BASE = 'https://www.google.com/recaptcha/api.js?';\r\n/**\r\n * Loader for the GReCaptcha library. There should only ever be one of this.\r\n */\r\nclass ReCaptchaLoaderImpl {\r\n    constructor() {\r\n        this.hostLanguage = '';\r\n        this.counter = 0;\r\n        this.librarySeparatelyLoaded = !!_window().grecaptcha;\r\n    }\r\n    load(auth, hl = '') {\r\n        _assert(isHostLanguageValid(hl), auth, \"argument-error\" /* ARGUMENT_ERROR */);\r\n        if (this.shouldResolveImmediately(hl)) {\r\n            return Promise.resolve(_window().grecaptcha);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            const networkTimeout = _window().setTimeout(() => {\r\n                reject(_createError(auth, \"network-request-failed\" /* NETWORK_REQUEST_FAILED */));\r\n            }, NETWORK_TIMEOUT_DELAY.get());\r\n            _window()[_JSLOAD_CALLBACK] = () => {\r\n                _window().clearTimeout(networkTimeout);\r\n                delete _window()[_JSLOAD_CALLBACK];\r\n                const recaptcha = _window().grecaptcha;\r\n                if (!recaptcha) {\r\n                    reject(_createError(auth, \"internal-error\" /* INTERNAL_ERROR */));\r\n                    return;\r\n                }\r\n                // Wrap the greptcha render function so that we know if the developer has\r\n                // called it separately\r\n                const render = recaptcha.render;\r\n                recaptcha.render = (container, params) => {\r\n                    const widgetId = render(container, params);\r\n                    this.counter++;\r\n                    return widgetId;\r\n                };\r\n                this.hostLanguage = hl;\r\n                resolve(recaptcha);\r\n            };\r\n            const url = `${RECAPTCHA_BASE}?${(0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.querystring)({\r\n                onload: _JSLOAD_CALLBACK,\r\n                render: 'explicit',\r\n                hl\r\n            })}`;\r\n            _loadJS(url).catch(() => {\r\n                clearTimeout(networkTimeout);\r\n                reject(_createError(auth, \"internal-error\" /* INTERNAL_ERROR */));\r\n            });\r\n        });\r\n    }\r\n    clearedOneInstance() {\r\n        this.counter--;\r\n    }\r\n    shouldResolveImmediately(hl) {\r\n        // We can resolve immediately if:\r\n        //   • grecaptcha is already defined AND (\r\n        //     1. the requested language codes are the same OR\r\n        //     2. there exists already a ReCaptcha on the page\r\n        //     3. the library was already loaded by the app\r\n        // In cases (2) and (3), we _can't_ reload as it would break the recaptchas\r\n        // that are already in the page\r\n        return (!!_window().grecaptcha &&\r\n            (hl === this.hostLanguage ||\r\n                this.counter > 0 ||\r\n                this.librarySeparatelyLoaded));\r\n    }\r\n}\r\nfunction isHostLanguageValid(hl) {\r\n    return hl.length <= 6 && /^\\s*[a-zA-Z0-9\\-]*\\s*$/.test(hl);\r\n}\r\nclass MockReCaptchaLoaderImpl {\r\n    async load(auth) {\r\n        return new MockReCaptcha(auth);\r\n    }\r\n    clearedOneInstance() { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECAPTCHA_VERIFIER_TYPE = 'recaptcha';\r\nconst DEFAULT_PARAMS = {\r\n    theme: 'light',\r\n    type: 'image'\r\n};\r\n/**\r\n * An {@link https://www.google.com/recaptcha/ | reCAPTCHA}-based application verifier.\r\n *\r\n * @public\r\n */\r\nclass RecaptchaVerifier {\r\n    /**\r\n     *\r\n     * @param containerOrId - The reCAPTCHA container parameter.\r\n     *\r\n     * @remarks\r\n     * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a\r\n     * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to\r\n     * an element ID. The corresponding element must also must be in the DOM at the time of\r\n     * initialization.\r\n     *\r\n     * @param parameters - The optional reCAPTCHA parameters.\r\n     *\r\n     * @remarks\r\n     * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for\r\n     * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will\r\n     * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value\r\n     * 'invisible'.\r\n     *\r\n     * @param authExtern - The corresponding Firebase {@link Auth} instance.\r\n     *\r\n     * @remarks\r\n     * If none is provided, the default Firebase {@link Auth} instance is used. A Firebase {@link Auth} instance\r\n     * must be initialized with an API key, otherwise an error will be thrown.\r\n     */\r\n    constructor(containerOrId, parameters = Object.assign({}, DEFAULT_PARAMS), authExtern) {\r\n        this.parameters = parameters;\r\n        /**\r\n         * The application verifier type.\r\n         *\r\n         * @remarks\r\n         * For a reCAPTCHA verifier, this is 'recaptcha'.\r\n         */\r\n        this.type = RECAPTCHA_VERIFIER_TYPE;\r\n        this.destroyed = false;\r\n        this.widgetId = null;\r\n        this.tokenChangeListeners = new Set();\r\n        this.renderPromise = null;\r\n        this.recaptcha = null;\r\n        this.auth = _castAuth(authExtern);\r\n        this.isInvisible = this.parameters.size === 'invisible';\r\n        _assert(typeof document !== 'undefined', this.auth, \"operation-not-supported-in-this-environment\" /* OPERATION_NOT_SUPPORTED */);\r\n        const container = typeof containerOrId === 'string'\r\n            ? document.getElementById(containerOrId)\r\n            : containerOrId;\r\n        _assert(container, this.auth, \"argument-error\" /* ARGUMENT_ERROR */);\r\n        this.container = container;\r\n        this.parameters.callback = this.makeTokenCallback(this.parameters.callback);\r\n        this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting\r\n            ? new MockReCaptchaLoaderImpl()\r\n            : new ReCaptchaLoaderImpl();\r\n        this.validateStartingState();\r\n        // TODO: Figure out if sdk version is needed\r\n    }\r\n    /**\r\n     * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.\r\n     *\r\n     * @returns A Promise for the reCAPTCHA token.\r\n     */\r\n    async verify() {\r\n        this.assertNotDestroyed();\r\n        const id = await this.render();\r\n        const recaptcha = this.getAssertedRecaptcha();\r\n        const response = recaptcha.getResponse(id);\r\n        if (response) {\r\n            return response;\r\n        }\r\n        return new Promise(resolve => {\r\n            const tokenChange = (token) => {\r\n                if (!token) {\r\n                    return; // Ignore token expirations.\r\n                }\r\n                this.tokenChangeListeners.delete(tokenChange);\r\n                resolve(token);\r\n            };\r\n            this.tokenChangeListeners.add(tokenChange);\r\n            if (this.isInvisible) {\r\n                recaptcha.execute(id);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Renders the reCAPTCHA widget on the page.\r\n     *\r\n     * @returns A Promise that resolves with the reCAPTCHA widget ID.\r\n     */\r\n    render() {\r\n        try {\r\n            this.assertNotDestroyed();\r\n        }\r\n        catch (e) {\r\n            // This method returns a promise. Since it's not async (we want to return the\r\n            // _same_ promise if rendering is still occurring), the API surface should\r\n            // reject with the error rather than just throw\r\n            return Promise.reject(e);\r\n        }\r\n        if (this.renderPromise) {\r\n            return this.renderPromise;\r\n        }\r\n        this.renderPromise = this.makeRenderPromise().catch(e => {\r\n            this.renderPromise = null;\r\n            throw e;\r\n        });\r\n        return this.renderPromise;\r\n    }\r\n    /** @internal */\r\n    _reset() {\r\n        this.assertNotDestroyed();\r\n        if (this.widgetId !== null) {\r\n            this.getAssertedRecaptcha().reset(this.widgetId);\r\n        }\r\n    }\r\n    /**\r\n     * Clears the reCAPTCHA widget from the page and destroys the instance.\r\n     */\r\n    clear() {\r\n        this.assertNotDestroyed();\r\n        this.destroyed = true;\r\n        this._recaptchaLoader.clearedOneInstance();\r\n        if (!this.isInvisible) {\r\n            this.container.childNodes.forEach(node => {\r\n                this.container.removeChild(node);\r\n            });\r\n        }\r\n    }\r\n    validateStartingState() {\r\n        _assert(!this.parameters.sitekey, this.auth, \"argument-error\" /* ARGUMENT_ERROR */);\r\n        _assert(this.isInvisible || !this.container.hasChildNodes(), this.auth, \"argument-error\" /* ARGUMENT_ERROR */);\r\n        _assert(typeof document !== 'undefined', this.auth, \"operation-not-supported-in-this-environment\" /* OPERATION_NOT_SUPPORTED */);\r\n    }\r\n    makeTokenCallback(existing) {\r\n        return token => {\r\n            this.tokenChangeListeners.forEach(listener => listener(token));\r\n            if (typeof existing === 'function') {\r\n                existing(token);\r\n            }\r\n            else if (typeof existing === 'string') {\r\n                const globalFunc = _window()[existing];\r\n                if (typeof globalFunc === 'function') {\r\n                    globalFunc(token);\r\n                }\r\n            }\r\n        };\r\n    }\r\n    assertNotDestroyed() {\r\n        _assert(!this.destroyed, this.auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n    }\r\n    async makeRenderPromise() {\r\n        await this.init();\r\n        if (!this.widgetId) {\r\n            let container = this.container;\r\n            if (!this.isInvisible) {\r\n                const guaranteedEmpty = document.createElement('div');\r\n                container.appendChild(guaranteedEmpty);\r\n                container = guaranteedEmpty;\r\n            }\r\n            this.widgetId = this.getAssertedRecaptcha().render(container, this.parameters);\r\n        }\r\n        return this.widgetId;\r\n    }\r\n    async init() {\r\n        _assert(_isHttpOrHttps() && !_isWorker(), this.auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n        await domReady();\r\n        this.recaptcha = await this._recaptchaLoader.load(this.auth, this.auth.languageCode || undefined);\r\n        const siteKey = await getRecaptchaParams(this.auth);\r\n        _assert(siteKey, this.auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n        this.parameters.sitekey = siteKey;\r\n    }\r\n    getAssertedRecaptcha() {\r\n        _assert(this.recaptcha, this.auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n        return this.recaptcha;\r\n    }\r\n}\r\nfunction domReady() {\r\n    let resolver = null;\r\n    return new Promise(resolve => {\r\n        if (document.readyState === 'complete') {\r\n            resolve();\r\n            return;\r\n        }\r\n        // Document not ready, wait for load before resolving.\r\n        // Save resolver, so we can remove listener in case it was externally\r\n        // cancelled.\r\n        resolver = () => resolve();\r\n        window.addEventListener('load', resolver);\r\n    }).catch(e => {\r\n        if (resolver) {\r\n            window.removeEventListener('load', resolver);\r\n        }\r\n        throw e;\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ConfirmationResultImpl {\r\n    constructor(verificationId, onConfirmation) {\r\n        this.verificationId = verificationId;\r\n        this.onConfirmation = onConfirmation;\r\n    }\r\n    confirm(verificationCode) {\r\n        const authCredential = PhoneAuthCredential._fromVerification(this.verificationId, verificationCode);\r\n        return this.onConfirmation(authCredential);\r\n    }\r\n}\r\n/**\r\n * Asynchronously signs in using a phone number.\r\n *\r\n * @remarks\r\n * This method sends a code via SMS to the given\r\n * phone number, and returns a {@link ConfirmationResult}. After the user\r\n * provides the code sent to their phone, call {@link ConfirmationResult.confirm}\r\n * with the code to sign the user in.\r\n *\r\n * For abuse prevention, this method also requires a {@link ApplicationVerifier}.\r\n * This SDK includes a reCAPTCHA-based implementation, {@link RecaptchaVerifier}.\r\n * This function can work on other platforms that do not support the\r\n * {@link RecaptchaVerifier} (like React Native), but you need to use a\r\n * third-party {@link ApplicationVerifier} implementation.\r\n *\r\n * @example\r\n * ```javascript\r\n * // 'recaptcha-container' is the ID of an element in the DOM.\r\n * const applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');\r\n * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\r\n * // Obtain a verificationCode from the user.\r\n * const credential = await confirmationResult.confirm(verificationCode);\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\r\n * @param appVerifier - The {@link ApplicationVerifier}.\r\n *\r\n * @public\r\n */\r\nasync function signInWithPhoneNumber(auth, phoneNumber, appVerifier) {\r\n    const authInternal = _castAuth(auth);\r\n    const verificationId = await _verifyPhoneNumber(authInternal, phoneNumber, (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(appVerifier));\r\n    return new ConfirmationResultImpl(verificationId, cred => signInWithCredential(authInternal, cred));\r\n}\r\n/**\r\n * Links the user account with the given phone number.\r\n *\r\n * @param user - The user.\r\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\r\n * @param appVerifier - The {@link ApplicationVerifier}.\r\n *\r\n * @public\r\n */\r\nasync function linkWithPhoneNumber(user, phoneNumber, appVerifier) {\r\n    const userInternal = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(user);\r\n    await _assertLinkedStatus(false, userInternal, \"phone\" /* PHONE */);\r\n    const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(appVerifier));\r\n    return new ConfirmationResultImpl(verificationId, cred => linkWithCredential(userInternal, cred));\r\n}\r\n/**\r\n * Re-authenticates a user using a fresh phone credential.\r\n *\r\n * @remarks Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts.\r\n *\r\n * @param user - The user.\r\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\r\n * @param appVerifier - The {@link ApplicationVerifier}.\r\n *\r\n * @public\r\n */\r\nasync function reauthenticateWithPhoneNumber(user, phoneNumber, appVerifier) {\r\n    const userInternal = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(user);\r\n    const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(appVerifier));\r\n    return new ConfirmationResultImpl(verificationId, cred => reauthenticateWithCredential(userInternal, cred));\r\n}\r\n/**\r\n * Returns a verification ID to be used in conjunction with the SMS code that is sent.\r\n *\r\n */\r\nasync function _verifyPhoneNumber(auth, options, verifier) {\r\n    var _a;\r\n    const recaptchaToken = await verifier.verify();\r\n    try {\r\n        _assert(typeof recaptchaToken === 'string', auth, \"argument-error\" /* ARGUMENT_ERROR */);\r\n        _assert(verifier.type === RECAPTCHA_VERIFIER_TYPE, auth, \"argument-error\" /* ARGUMENT_ERROR */);\r\n        let phoneInfoOptions;\r\n        if (typeof options === 'string') {\r\n            phoneInfoOptions = {\r\n                phoneNumber: options\r\n            };\r\n        }\r\n        else {\r\n            phoneInfoOptions = options;\r\n        }\r\n        if ('session' in phoneInfoOptions) {\r\n            const session = phoneInfoOptions.session;\r\n            if ('phoneNumber' in phoneInfoOptions) {\r\n                _assert(session.type === \"enroll\" /* ENROLL */, auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n                const response = await startEnrollPhoneMfa(auth, {\r\n                    idToken: session.credential,\r\n                    phoneEnrollmentInfo: {\r\n                        phoneNumber: phoneInfoOptions.phoneNumber,\r\n                        recaptchaToken\r\n                    }\r\n                });\r\n                return response.phoneSessionInfo.sessionInfo;\r\n            }\r\n            else {\r\n                _assert(session.type === \"signin\" /* SIGN_IN */, auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n                const mfaEnrollmentId = ((_a = phoneInfoOptions.multiFactorHint) === null || _a === void 0 ? void 0 : _a.uid) ||\r\n                    phoneInfoOptions.multiFactorUid;\r\n                _assert(mfaEnrollmentId, auth, \"missing-multi-factor-info\" /* MISSING_MFA_INFO */);\r\n                const response = await startSignInPhoneMfa(auth, {\r\n                    mfaPendingCredential: session.credential,\r\n                    mfaEnrollmentId,\r\n                    phoneSignInInfo: {\r\n                        recaptchaToken\r\n                    }\r\n                });\r\n                return response.phoneResponseInfo.sessionInfo;\r\n            }\r\n        }\r\n        else {\r\n            const { sessionInfo } = await sendPhoneVerificationCode(auth, {\r\n                phoneNumber: phoneInfoOptions.phoneNumber,\r\n                recaptchaToken\r\n            });\r\n            return sessionInfo;\r\n        }\r\n    }\r\n    finally {\r\n        verifier._reset();\r\n    }\r\n}\r\n/**\r\n * Updates the user's phone number.\r\n *\r\n * @example\r\n * ```\r\n * // 'recaptcha-container' is the ID of an element in the DOM.\r\n * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\r\n * const provider = new PhoneAuthProvider(auth);\r\n * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\r\n * // Obtain the verificationCode from the user.\r\n * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\r\n * await updatePhoneNumber(user, phoneCredential);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param credential - A credential authenticating the new phone number.\r\n *\r\n * @public\r\n */\r\nasync function updatePhoneNumber(user, credential) {\r\n    await _link$1((0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(user), credential);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for generating an {@link PhoneAuthCredential}.\r\n *\r\n * @example\r\n * ```javascript\r\n * // 'recaptcha-container' is the ID of an element in the DOM.\r\n * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\r\n * const provider = new PhoneAuthProvider(auth);\r\n * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\r\n * // Obtain the verificationCode from the user.\r\n * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\r\n * const userCredential = await signInWithCredential(auth, phoneCredential);\r\n * ```\r\n *\r\n * @public\r\n */\r\nclass PhoneAuthProvider {\r\n    /**\r\n     * @param auth - The Firebase {@link Auth} instance in which sign-ins should occur.\r\n     *\r\n     */\r\n    constructor(auth) {\r\n        /** Always set to {@link ProviderId}.PHONE. */\r\n        this.providerId = PhoneAuthProvider.PROVIDER_ID;\r\n        this.auth = _castAuth(auth);\r\n    }\r\n    /**\r\n     *\r\n     * Starts a phone number authentication flow by sending a verification code to the given phone\r\n     * number.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * const provider = new PhoneAuthProvider(auth);\r\n     * const verificationId = await provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\r\n     * // Obtain verificationCode from the user.\r\n     * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\r\n     * const userCredential = await signInWithCredential(auth, authCredential);\r\n     * ```\r\n     *\r\n     * @example\r\n     * An alternative flow is provided using the `signInWithPhoneNumber` method.\r\n     * ```javascript\r\n     * const confirmationResult = signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\r\n     * // Obtain verificationCode from the user.\r\n     * const userCredential = confirmationResult.confirm(verificationCode);\r\n     * ```\r\n     *\r\n     * @param phoneInfoOptions - The user's {@link PhoneInfoOptions}. The phone number should be in\r\n     * E.164 format (e.g. +16505550101).\r\n     * @param applicationVerifier - For abuse prevention, this method also requires a\r\n     * {@link ApplicationVerifier}. This SDK includes a reCAPTCHA-based implementation,\r\n     * {@link RecaptchaVerifier}.\r\n     *\r\n     * @returns A Promise for a verification ID that can be passed to\r\n     * {@link PhoneAuthProvider.credential} to identify this flow..\r\n     */\r\n    verifyPhoneNumber(phoneOptions, applicationVerifier) {\r\n        return _verifyPhoneNumber(this.auth, phoneOptions, (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(applicationVerifier));\r\n    }\r\n    /**\r\n     * Creates a phone auth credential, given the verification ID from\r\n     * {@link PhoneAuthProvider.verifyPhoneNumber} and the code that was sent to the user's\r\n     * mobile device.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * const provider = new PhoneAuthProvider(auth);\r\n     * const verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\r\n     * // Obtain verificationCode from the user.\r\n     * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\r\n     * const userCredential = signInWithCredential(auth, authCredential);\r\n     * ```\r\n     *\r\n     * @example\r\n     * An alternative flow is provided using the `signInWithPhoneNumber` method.\r\n     * ```javascript\r\n     * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\r\n     * // Obtain verificationCode from the user.\r\n     * const userCredential = await confirmationResult.confirm(verificationCode);\r\n     * ```\r\n     *\r\n     * @param verificationId - The verification ID returned from {@link PhoneAuthProvider.verifyPhoneNumber}.\r\n     * @param verificationCode - The verification code sent to the user's mobile device.\r\n     *\r\n     * @returns The auth provider credential.\r\n     */\r\n    static credential(verificationId, verificationCode) {\r\n        return PhoneAuthCredential._fromVerification(verificationId, verificationCode);\r\n    }\r\n    /**\r\n     * Generates an {@link AuthCredential} from a {@link UserCredential}.\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromResult(userCredential) {\r\n        const credential = userCredential;\r\n        return PhoneAuthProvider.credentialFromTaggedObject(credential);\r\n    }\r\n    /**\r\n     * Returns an {@link AuthCredential} when passed an error.\r\n     *\r\n     * @remarks\r\n     *\r\n     * This method works for errors like\r\n     * `auth/account-exists-with-different-credentials`. This is useful for\r\n     * recovering when attempting to set a user's phone number but the number\r\n     * in question is already tied to another account. For example, the following\r\n     * code tries to update the current user's phone number, and if that\r\n     * fails, links the user with the account associated with that number:\r\n     *\r\n     * ```js\r\n     * const provider = new PhoneAuthProvider(auth);\r\n     * const verificationId = await provider.verifyPhoneNumber(number, verifier);\r\n     * try {\r\n     *   const code = ''; // Prompt the user for the verification code\r\n     *   await updatePhoneNumber(\r\n     *       auth.currentUser,\r\n     *       PhoneAuthProvider.credential(verificationId, code));\r\n     * } catch (e) {\r\n     *   if (e.code === 'auth/account-exists-with-different-credential') {\r\n     *     const cred = PhoneAuthProvider.credentialFromError(e);\r\n     *     await linkWithCredential(auth.currentUser, cred);\r\n     *   }\r\n     * }\r\n     *\r\n     * // At this point, auth.currentUser.phoneNumber === number.\r\n     * ```\r\n     *\r\n     * @param error - The error to generate a credential from.\r\n     */\r\n    static credentialFromError(error) {\r\n        return PhoneAuthProvider.credentialFromTaggedObject((error.customData || {}));\r\n    }\r\n    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {\r\n        if (!tokenResponse) {\r\n            return null;\r\n        }\r\n        const { phoneNumber, temporaryProof } = tokenResponse;\r\n        if (phoneNumber && temporaryProof) {\r\n            return PhoneAuthCredential._fromTokenResponse(phoneNumber, temporaryProof);\r\n        }\r\n        return null;\r\n    }\r\n}\r\n/** Always set to {@link ProviderId}.PHONE. */\r\nPhoneAuthProvider.PROVIDER_ID = \"phone\" /* PHONE */;\r\n/** Always set to {@link SignInMethod}.PHONE. */\r\nPhoneAuthProvider.PHONE_SIGN_IN_METHOD = \"phone\" /* PHONE */;\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Chooses a popup/redirect resolver to use. This prefers the override (which\r\n * is directly passed in), and falls back to the property set on the auth\r\n * object. If neither are available, this function errors w/ an argument error.\r\n */\r\nfunction _withDefaultResolver(auth, resolverOverride) {\r\n    if (resolverOverride) {\r\n        return _getInstance(resolverOverride);\r\n    }\r\n    _assert(auth._popupRedirectResolver, auth, \"argument-error\" /* ARGUMENT_ERROR */);\r\n    return auth._popupRedirectResolver;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass IdpCredential extends AuthCredential {\r\n    constructor(params) {\r\n        super(\"custom\" /* CUSTOM */, \"custom\" /* CUSTOM */);\r\n        this.params = params;\r\n    }\r\n    _getIdTokenResponse(auth) {\r\n        return signInWithIdp(auth, this._buildIdpRequest());\r\n    }\r\n    _linkToIdToken(auth, idToken) {\r\n        return signInWithIdp(auth, this._buildIdpRequest(idToken));\r\n    }\r\n    _getReauthenticationResolver(auth) {\r\n        return signInWithIdp(auth, this._buildIdpRequest());\r\n    }\r\n    _buildIdpRequest(idToken) {\r\n        const request = {\r\n            requestUri: this.params.requestUri,\r\n            sessionId: this.params.sessionId,\r\n            postBody: this.params.postBody,\r\n            tenantId: this.params.tenantId,\r\n            pendingToken: this.params.pendingToken,\r\n            returnSecureToken: true,\r\n            returnIdpCredential: true\r\n        };\r\n        if (idToken) {\r\n            request.idToken = idToken;\r\n        }\r\n        return request;\r\n    }\r\n}\r\nfunction _signIn(params) {\r\n    return _signInWithCredential(params.auth, new IdpCredential(params), params.bypassAuthState);\r\n}\r\nfunction _reauth(params) {\r\n    const { auth, user } = params;\r\n    _assert(user, auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n    return _reauthenticate(user, new IdpCredential(params), params.bypassAuthState);\r\n}\r\nasync function _link(params) {\r\n    const { auth, user } = params;\r\n    _assert(user, auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n    return _link$1(user, new IdpCredential(params), params.bypassAuthState);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Popup event manager. Handles the popup's entire lifecycle; listens to auth\r\n * events\r\n */\r\nclass AbstractPopupRedirectOperation {\r\n    constructor(auth, filter, resolver, user, bypassAuthState = false) {\r\n        this.auth = auth;\r\n        this.resolver = resolver;\r\n        this.user = user;\r\n        this.bypassAuthState = bypassAuthState;\r\n        this.pendingPromise = null;\r\n        this.eventManager = null;\r\n        this.filter = Array.isArray(filter) ? filter : [filter];\r\n    }\r\n    execute() {\r\n        return new Promise(async (resolve, reject) => {\r\n            this.pendingPromise = { resolve, reject };\r\n            try {\r\n                this.eventManager = await this.resolver._initialize(this.auth);\r\n                await this.onExecution();\r\n                this.eventManager.registerConsumer(this);\r\n            }\r\n            catch (e) {\r\n                this.reject(e);\r\n            }\r\n        });\r\n    }\r\n    async onAuthEvent(event) {\r\n        const { urlResponse, sessionId, postBody, tenantId, error, type } = event;\r\n        if (error) {\r\n            this.reject(error);\r\n            return;\r\n        }\r\n        const params = {\r\n            auth: this.auth,\r\n            requestUri: urlResponse,\r\n            sessionId: sessionId,\r\n            tenantId: tenantId || undefined,\r\n            postBody: postBody || undefined,\r\n            user: this.user,\r\n            bypassAuthState: this.bypassAuthState\r\n        };\r\n        try {\r\n            this.resolve(await this.getIdpTask(type)(params));\r\n        }\r\n        catch (e) {\r\n            this.reject(e);\r\n        }\r\n    }\r\n    onError(error) {\r\n        this.reject(error);\r\n    }\r\n    getIdpTask(type) {\r\n        switch (type) {\r\n            case \"signInViaPopup\" /* SIGN_IN_VIA_POPUP */:\r\n            case \"signInViaRedirect\" /* SIGN_IN_VIA_REDIRECT */:\r\n                return _signIn;\r\n            case \"linkViaPopup\" /* LINK_VIA_POPUP */:\r\n            case \"linkViaRedirect\" /* LINK_VIA_REDIRECT */:\r\n                return _link;\r\n            case \"reauthViaPopup\" /* REAUTH_VIA_POPUP */:\r\n            case \"reauthViaRedirect\" /* REAUTH_VIA_REDIRECT */:\r\n                return _reauth;\r\n            default:\r\n                _fail(this.auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n        }\r\n    }\r\n    resolve(cred) {\r\n        debugAssert(this.pendingPromise, 'Pending promise was never set');\r\n        this.pendingPromise.resolve(cred);\r\n        this.unregisterAndCleanUp();\r\n    }\r\n    reject(error) {\r\n        debugAssert(this.pendingPromise, 'Pending promise was never set');\r\n        this.pendingPromise.reject(error);\r\n        this.unregisterAndCleanUp();\r\n    }\r\n    unregisterAndCleanUp() {\r\n        if (this.eventManager) {\r\n            this.eventManager.unregisterConsumer(this);\r\n        }\r\n        this.pendingPromise = null;\r\n        this.cleanUp();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst _POLL_WINDOW_CLOSE_TIMEOUT = new Delay(2000, 10000);\r\n/**\r\n * Authenticates a Firebase client using a popup-based OAuth authentication flow.\r\n *\r\n * @remarks\r\n * If succeeds, returns the signed in user along with the provider's credential. If sign in was\r\n * unsuccessful, returns an error object containing additional information about the error.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new FacebookAuthProvider();\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a Facebook Access Token.\r\n * const credential = provider.credentialFromResult(auth, result);\r\n * const token = credential.accessToken;\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\r\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\r\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\r\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\r\n *\r\n *\r\n * @public\r\n */\r\nasync function signInWithPopup(auth, provider, resolver) {\r\n    const authInternal = _castAuth(auth);\r\n    _assertInstanceOf(auth, provider, FederatedAuthProvider);\r\n    const resolverInternal = _withDefaultResolver(authInternal, resolver);\r\n    const action = new PopupOperation(authInternal, \"signInViaPopup\" /* SIGN_IN_VIA_POPUP */, provider, resolverInternal);\r\n    return action.executeNotNull();\r\n}\r\n/**\r\n * Reauthenticates the current user with the specified {@link OAuthProvider} using a pop-up based\r\n * OAuth flow.\r\n *\r\n * @remarks\r\n * If the reauthentication is successful, the returned result will contain the user and the\r\n * provider's credential.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new FacebookAuthProvider();\r\n * const result = await signInWithPopup(auth, provider);\r\n * // Reauthenticate using a popup.\r\n * await reauthenticateWithPopup(result.user, provider);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\r\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\r\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\r\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\r\n *\r\n * @public\r\n */\r\nasync function reauthenticateWithPopup(user, provider, resolver) {\r\n    const userInternal = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(user);\r\n    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\r\n    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\r\n    const action = new PopupOperation(userInternal.auth, \"reauthViaPopup\" /* REAUTH_VIA_POPUP */, provider, resolverInternal, userInternal);\r\n    return action.executeNotNull();\r\n}\r\n/**\r\n * Links the authenticated provider to the user account using a pop-up based OAuth flow.\r\n *\r\n * @remarks\r\n * If the linking is successful, the returned result will contain the user and the provider's credential.\r\n *\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using some other provider.\r\n * const result = await signInWithEmailAndPassword(auth, email, password);\r\n * // Link using a popup.\r\n * const provider = new FacebookAuthProvider();\r\n * await linkWithPopup(result.user, provider);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\r\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\r\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\r\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\r\n *\r\n * @public\r\n */\r\nasync function linkWithPopup(user, provider, resolver) {\r\n    const userInternal = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(user);\r\n    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\r\n    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\r\n    const action = new PopupOperation(userInternal.auth, \"linkViaPopup\" /* LINK_VIA_POPUP */, provider, resolverInternal, userInternal);\r\n    return action.executeNotNull();\r\n}\r\n/**\r\n * Popup event manager. Handles the popup's entire lifecycle; listens to auth\r\n * events\r\n *\r\n */\r\nclass PopupOperation extends AbstractPopupRedirectOperation {\r\n    constructor(auth, filter, provider, resolver, user) {\r\n        super(auth, filter, resolver, user);\r\n        this.provider = provider;\r\n        this.authWindow = null;\r\n        this.pollId = null;\r\n        if (PopupOperation.currentPopupAction) {\r\n            PopupOperation.currentPopupAction.cancel();\r\n        }\r\n        PopupOperation.currentPopupAction = this;\r\n    }\r\n    async executeNotNull() {\r\n        const result = await this.execute();\r\n        _assert(result, this.auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n        return result;\r\n    }\r\n    async onExecution() {\r\n        debugAssert(this.filter.length === 1, 'Popup operations only handle one event');\r\n        const eventId = _generateEventId();\r\n        this.authWindow = await this.resolver._openPopup(this.auth, this.provider, this.filter[0], // There's always one, see constructor\r\n        eventId);\r\n        this.authWindow.associatedEvent = eventId;\r\n        // Check for web storage support and origin validation _after_ the popup is\r\n        // loaded. These operations are slow (~1 second or so) Rather than\r\n        // waiting on them before opening the window, optimistically open the popup\r\n        // and check for storage support at the same time. If storage support is\r\n        // not available, this will cause the whole thing to reject properly. It\r\n        // will also close the popup, but since the promise has already rejected,\r\n        // the popup closed by user poll will reject into the void.\r\n        this.resolver._originValidation(this.auth).catch(e => {\r\n            this.reject(e);\r\n        });\r\n        this.resolver._isIframeWebStorageSupported(this.auth, isSupported => {\r\n            if (!isSupported) {\r\n                this.reject(_createError(this.auth, \"web-storage-unsupported\" /* WEB_STORAGE_UNSUPPORTED */));\r\n            }\r\n        });\r\n        // Handle user closure. Notice this does *not* use await\r\n        this.pollUserCancellation();\r\n    }\r\n    get eventId() {\r\n        var _a;\r\n        return ((_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.associatedEvent) || null;\r\n    }\r\n    cancel() {\r\n        this.reject(_createError(this.auth, \"cancelled-popup-request\" /* EXPIRED_POPUP_REQUEST */));\r\n    }\r\n    cleanUp() {\r\n        if (this.authWindow) {\r\n            this.authWindow.close();\r\n        }\r\n        if (this.pollId) {\r\n            window.clearTimeout(this.pollId);\r\n        }\r\n        this.authWindow = null;\r\n        this.pollId = null;\r\n        PopupOperation.currentPopupAction = null;\r\n    }\r\n    pollUserCancellation() {\r\n        const poll = () => {\r\n            var _a, _b;\r\n            if ((_b = (_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.window) === null || _b === void 0 ? void 0 : _b.closed) {\r\n                // Make sure that there is sufficient time for whatever action to\r\n                // complete. The window could have closed but the sign in network\r\n                // call could still be in flight.\r\n                this.pollId = window.setTimeout(() => {\r\n                    this.pollId = null;\r\n                    this.reject(_createError(this.auth, \"popup-closed-by-user\" /* POPUP_CLOSED_BY_USER */));\r\n                }, 2000 /* AUTH_EVENT */);\r\n                return;\r\n            }\r\n            this.pollId = window.setTimeout(poll, _POLL_WINDOW_CLOSE_TIMEOUT.get());\r\n        };\r\n        poll();\r\n    }\r\n}\r\n// Only one popup is ever shown at once. The lifecycle of the current popup\r\n// can be managed / cancelled by the constructor.\r\nPopupOperation.currentPopupAction = null;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PENDING_REDIRECT_KEY = 'pendingRedirect';\r\n// We only get one redirect outcome for any one auth, so just store it\r\n// in here.\r\nconst redirectOutcomeMap = new Map();\r\nclass RedirectAction extends AbstractPopupRedirectOperation {\r\n    constructor(auth, resolver, bypassAuthState = false) {\r\n        super(auth, [\r\n            \"signInViaRedirect\" /* SIGN_IN_VIA_REDIRECT */,\r\n            \"linkViaRedirect\" /* LINK_VIA_REDIRECT */,\r\n            \"reauthViaRedirect\" /* REAUTH_VIA_REDIRECT */,\r\n            \"unknown\" /* UNKNOWN */\r\n        ], resolver, undefined, bypassAuthState);\r\n        this.eventId = null;\r\n    }\r\n    /**\r\n     * Override the execute function; if we already have a redirect result, then\r\n     * just return it.\r\n     */\r\n    async execute() {\r\n        let readyOutcome = redirectOutcomeMap.get(this.auth._key());\r\n        if (!readyOutcome) {\r\n            try {\r\n                const hasPendingRedirect = await _getAndClearPendingRedirectStatus(this.resolver, this.auth);\r\n                const result = hasPendingRedirect ? await super.execute() : null;\r\n                readyOutcome = () => Promise.resolve(result);\r\n            }\r\n            catch (e) {\r\n                readyOutcome = () => Promise.reject(e);\r\n            }\r\n            redirectOutcomeMap.set(this.auth._key(), readyOutcome);\r\n        }\r\n        // If we're not bypassing auth state, the ready outcome should be set to\r\n        // null.\r\n        if (!this.bypassAuthState) {\r\n            redirectOutcomeMap.set(this.auth._key(), () => Promise.resolve(null));\r\n        }\r\n        return readyOutcome();\r\n    }\r\n    async onAuthEvent(event) {\r\n        if (event.type === \"signInViaRedirect\" /* SIGN_IN_VIA_REDIRECT */) {\r\n            return super.onAuthEvent(event);\r\n        }\r\n        else if (event.type === \"unknown\" /* UNKNOWN */) {\r\n            // This is a sentinel value indicating there's no pending redirect\r\n            this.resolve(null);\r\n            return;\r\n        }\r\n        if (event.eventId) {\r\n            const user = await this.auth._redirectUserForId(event.eventId);\r\n            if (user) {\r\n                this.user = user;\r\n                return super.onAuthEvent(event);\r\n            }\r\n            else {\r\n                this.resolve(null);\r\n            }\r\n        }\r\n    }\r\n    async onExecution() { }\r\n    cleanUp() { }\r\n}\r\nasync function _getAndClearPendingRedirectStatus(resolver, auth) {\r\n    const key = pendingRedirectKey(auth);\r\n    const persistence = resolverPersistence(resolver);\r\n    if (!(await persistence._isAvailable())) {\r\n        return false;\r\n    }\r\n    const hasPendingRedirect = (await persistence._get(key)) === 'true';\r\n    await persistence._remove(key);\r\n    return hasPendingRedirect;\r\n}\r\nasync function _setPendingRedirectStatus(resolver, auth) {\r\n    return resolverPersistence(resolver)._set(pendingRedirectKey(auth), 'true');\r\n}\r\nfunction _clearRedirectOutcomes() {\r\n    redirectOutcomeMap.clear();\r\n}\r\nfunction resolverPersistence(resolver) {\r\n    return _getInstance(resolver._redirectPersistence);\r\n}\r\nfunction pendingRedirectKey(auth) {\r\n    return _persistenceKeyName(PENDING_REDIRECT_KEY, auth.config.apiKey, auth.name);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Authenticates a Firebase client using a full-page redirect flow.\r\n *\r\n * @remarks\r\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new FacebookAuthProvider();\r\n * // You can add additional scopes to the provider:\r\n * provider.addScope('user_birthday');\r\n * // Start a sign in process for an unauthenticated user.\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Facebook Access Token.\r\n *   const credential = provider.credentialFromResult(auth, result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * // As this API can be used for sign-in, linking and reauthentication,\r\n * // check the operationType to determine what triggered this redirect\r\n * // operation.\r\n * const operationType = result.operationType;\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\r\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\r\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\r\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\r\n *\r\n * @public\r\n */\r\nfunction signInWithRedirect(auth, provider, resolver) {\r\n    return _signInWithRedirect(auth, provider, resolver);\r\n}\r\nasync function _signInWithRedirect(auth, provider, resolver) {\r\n    const authInternal = _castAuth(auth);\r\n    _assertInstanceOf(auth, provider, FederatedAuthProvider);\r\n    const resolverInternal = _withDefaultResolver(authInternal, resolver);\r\n    await _setPendingRedirectStatus(resolverInternal, authInternal);\r\n    return resolverInternal._openRedirect(authInternal, provider, \"signInViaRedirect\" /* SIGN_IN_VIA_REDIRECT */);\r\n}\r\n/**\r\n * Reauthenticates the current user with the specified {@link OAuthProvider} using a full-page redirect flow.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new FacebookAuthProvider();\r\n * const result = await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * // Link using a redirect.\r\n * await linkWithRedirect(result.user, provider);\r\n * // This will again trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\r\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\r\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\r\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\r\n *\r\n * @public\r\n */\r\nfunction reauthenticateWithRedirect(user, provider, resolver) {\r\n    return _reauthenticateWithRedirect(user, provider, resolver);\r\n}\r\nasync function _reauthenticateWithRedirect(user, provider, resolver) {\r\n    const userInternal = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(user);\r\n    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\r\n    // Allow the resolver to error before persisting the redirect user\r\n    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\r\n    await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\r\n    const eventId = await prepareUserForRedirect(userInternal);\r\n    return resolverInternal._openRedirect(userInternal.auth, provider, \"reauthViaRedirect\" /* REAUTH_VIA_REDIRECT */, eventId);\r\n}\r\n/**\r\n * Links the {@link OAuthProvider} to the user account using a full-page redirect flow.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using some other provider.\r\n * const result = await signInWithEmailAndPassword(auth, email, password);\r\n * // Link using a redirect.\r\n * const provider = new FacebookAuthProvider();\r\n * await linkWithRedirect(result.user, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\r\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\r\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\r\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\r\n *\r\n *\r\n * @public\r\n */\r\nfunction linkWithRedirect(user, provider, resolver) {\r\n    return _linkWithRedirect(user, provider, resolver);\r\n}\r\nasync function _linkWithRedirect(user, provider, resolver) {\r\n    const userInternal = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getModularInstance)(user);\r\n    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\r\n    // Allow the resolver to error before persisting the redirect user\r\n    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\r\n    await _assertLinkedStatus(false, userInternal, provider.providerId);\r\n    await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\r\n    const eventId = await prepareUserForRedirect(userInternal);\r\n    return resolverInternal._openRedirect(userInternal.auth, provider, \"linkViaRedirect\" /* LINK_VIA_REDIRECT */, eventId);\r\n}\r\n/**\r\n * Returns a {@link UserCredential} from the redirect-based sign-in flow.\r\n *\r\n * @remarks\r\n * If sign-in succeeded, returns the signed in user. If sign-in was unsuccessful, fails with an\r\n * error. If no redirect operation was called, returns a {@link UserCredential}\r\n * with a null `user`.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new FacebookAuthProvider();\r\n * // You can add additional scopes to the provider:\r\n * provider.addScope('user_birthday');\r\n * // Start a sign in process for an unauthenticated user.\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Facebook Access Token.\r\n *   const credential = provider.credentialFromResult(auth, result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * // As this API can be used for sign-in, linking and reauthentication,\r\n * // check the operationType to determine what triggered this redirect\r\n * // operation.\r\n * const operationType = result.operationType;\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\r\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\r\n *\r\n * @public\r\n */\r\nasync function getRedirectResult(auth, resolver) {\r\n    await _castAuth(auth)._initializationPromise;\r\n    return _getRedirectResult(auth, resolver, false);\r\n}\r\nasync function _getRedirectResult(auth, resolverExtern, bypassAuthState = false) {\r\n    const authInternal = _castAuth(auth);\r\n    const resolver = _withDefaultResolver(authInternal, resolverExtern);\r\n    const action = new RedirectAction(authInternal, resolver, bypassAuthState);\r\n    const result = await action.execute();\r\n    if (result && !bypassAuthState) {\r\n        delete result.user._redirectEventId;\r\n        await authInternal._persistUserIfCurrent(result.user);\r\n        await authInternal._setRedirectUser(null, resolverExtern);\r\n    }\r\n    return result;\r\n}\r\nasync function prepareUserForRedirect(user) {\r\n    const eventId = _generateEventId(`${user.uid}:::`);\r\n    user._redirectEventId = eventId;\r\n    await user.auth._setRedirectUser(user);\r\n    await user.auth._persistUserIfCurrent(user);\r\n    return eventId;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// The amount of time to store the UIDs of seen events; this is\r\n// set to 10 min by default\r\nconst EVENT_DUPLICATION_CACHE_DURATION_MS = 10 * 60 * 1000;\r\nclass AuthEventManager {\r\n    constructor(auth) {\r\n        this.auth = auth;\r\n        this.cachedEventUids = new Set();\r\n        this.consumers = new Set();\r\n        this.queuedRedirectEvent = null;\r\n        this.hasHandledPotentialRedirect = false;\r\n        this.lastProcessedEventTime = Date.now();\r\n    }\r\n    registerConsumer(authEventConsumer) {\r\n        this.consumers.add(authEventConsumer);\r\n        if (this.queuedRedirectEvent &&\r\n            this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)) {\r\n            this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);\r\n            this.saveEventToCache(this.queuedRedirectEvent);\r\n            this.queuedRedirectEvent = null;\r\n        }\r\n    }\r\n    unregisterConsumer(authEventConsumer) {\r\n        this.consumers.delete(authEventConsumer);\r\n    }\r\n    onEvent(event) {\r\n        // Check if the event has already been handled\r\n        if (this.hasEventBeenHandled(event)) {\r\n            return false;\r\n        }\r\n        let handled = false;\r\n        this.consumers.forEach(consumer => {\r\n            if (this.isEventForConsumer(event, consumer)) {\r\n                handled = true;\r\n                this.sendToConsumer(event, consumer);\r\n                this.saveEventToCache(event);\r\n            }\r\n        });\r\n        if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) {\r\n            // If we've already seen a redirect before, or this is a popup event,\r\n            // bail now\r\n            return handled;\r\n        }\r\n        this.hasHandledPotentialRedirect = true;\r\n        // If the redirect wasn't handled, hang on to it\r\n        if (!handled) {\r\n            this.queuedRedirectEvent = event;\r\n            handled = true;\r\n        }\r\n        return handled;\r\n    }\r\n    sendToConsumer(event, consumer) {\r\n        var _a;\r\n        if (event.error && !isNullRedirectEvent(event)) {\r\n            const code = ((_a = event.error.code) === null || _a === void 0 ? void 0 : _a.split('auth/')[1]) ||\r\n                \"internal-error\" /* INTERNAL_ERROR */;\r\n            consumer.onError(_createError(this.auth, code));\r\n        }\r\n        else {\r\n            consumer.onAuthEvent(event);\r\n        }\r\n    }\r\n    isEventForConsumer(event, consumer) {\r\n        const eventIdMatches = consumer.eventId === null ||\r\n            (!!event.eventId && event.eventId === consumer.eventId);\r\n        return consumer.filter.includes(event.type) && eventIdMatches;\r\n    }\r\n    hasEventBeenHandled(event) {\r\n        if (Date.now() - this.lastProcessedEventTime >=\r\n            EVENT_DUPLICATION_CACHE_DURATION_MS) {\r\n            this.cachedEventUids.clear();\r\n        }\r\n        return this.cachedEventUids.has(eventUid(event));\r\n    }\r\n    saveEventToCache(event) {\r\n        this.cachedEventUids.add(eventUid(event));\r\n        this.lastProcessedEventTime = Date.now();\r\n    }\r\n}\r\nfunction eventUid(e) {\r\n    return [e.type, e.eventId, e.sessionId, e.tenantId].filter(v => v).join('-');\r\n}\r\nfunction isNullRedirectEvent({ type, error }) {\r\n    return (type === \"unknown\" /* UNKNOWN */ &&\r\n        (error === null || error === void 0 ? void 0 : error.code) === `auth/${\"no-auth-event\" /* NO_AUTH_EVENT */}`);\r\n}\r\nfunction isRedirectEvent(event) {\r\n    switch (event.type) {\r\n        case \"signInViaRedirect\" /* SIGN_IN_VIA_REDIRECT */:\r\n        case \"linkViaRedirect\" /* LINK_VIA_REDIRECT */:\r\n        case \"reauthViaRedirect\" /* REAUTH_VIA_REDIRECT */:\r\n            return true;\r\n        case \"unknown\" /* UNKNOWN */:\r\n            return isNullRedirectEvent(event);\r\n        default:\r\n            return false;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function _getProjectConfig(auth, request = {}) {\r\n    return _performApiRequest(auth, \"GET\" /* GET */, \"/v1/projects\" /* GET_PROJECT_CONFIG */, request);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst IP_ADDRESS_REGEX = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;\r\nconst HTTP_REGEX = /^https?/;\r\nasync function _validateOrigin(auth) {\r\n    // Skip origin validation if we are in an emulated environment\r\n    if (auth.config.emulator) {\r\n        return;\r\n    }\r\n    const { authorizedDomains } = await _getProjectConfig(auth);\r\n    for (const domain of authorizedDomains) {\r\n        try {\r\n            if (matchDomain(domain)) {\r\n                return;\r\n            }\r\n        }\r\n        catch (_a) {\r\n            // Do nothing if there's a URL error; just continue searching\r\n        }\r\n    }\r\n    // In the old SDK, this error also provides helpful messages.\r\n    _fail(auth, \"unauthorized-domain\" /* INVALID_ORIGIN */);\r\n}\r\nfunction matchDomain(expected) {\r\n    const currentUrl = _getCurrentUrl();\r\n    const { protocol, hostname } = new URL(currentUrl);\r\n    if (expected.startsWith('chrome-extension://')) {\r\n        const ceUrl = new URL(expected);\r\n        if (ceUrl.hostname === '' && hostname === '') {\r\n            // For some reason we're not parsing chrome URLs properly\r\n            return (protocol === 'chrome-extension:' &&\r\n                expected.replace('chrome-extension://', '') ===\r\n                    currentUrl.replace('chrome-extension://', ''));\r\n        }\r\n        return protocol === 'chrome-extension:' && ceUrl.hostname === hostname;\r\n    }\r\n    if (!HTTP_REGEX.test(protocol)) {\r\n        return false;\r\n    }\r\n    if (IP_ADDRESS_REGEX.test(expected)) {\r\n        // The domain has to be exactly equal to the pattern, as an IP domain will\r\n        // only contain the IP, no extra character.\r\n        return hostname === expected;\r\n    }\r\n    // Dots in pattern should be escaped.\r\n    const escapedDomainPattern = expected.replace(/\\./g, '\\\\.');\r\n    // Non ip address domains.\r\n    // domain.com = *.domain.com OR domain.com\r\n    const re = new RegExp('^(.+\\\\.' + escapedDomainPattern + '|' + escapedDomainPattern + ')$', 'i');\r\n    return re.test(hostname);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst NETWORK_TIMEOUT = new Delay(30000, 60000);\r\n/**\r\n * Reset unlaoded GApi modules. If gapi.load fails due to a network error,\r\n * it will stop working after a retrial. This is a hack to fix this issue.\r\n */\r\nfunction resetUnloadedGapiModules() {\r\n    // Clear last failed gapi.load state to force next gapi.load to first\r\n    // load the failed gapi.iframes module.\r\n    // Get gapix.beacon context.\r\n    const beacon = _window().___jsl;\r\n    // Get current hint.\r\n    if (beacon === null || beacon === void 0 ? void 0 : beacon.H) {\r\n        // Get gapi hint.\r\n        for (const hint of Object.keys(beacon.H)) {\r\n            // Requested modules.\r\n            beacon.H[hint].r = beacon.H[hint].r || [];\r\n            // Loaded modules.\r\n            beacon.H[hint].L = beacon.H[hint].L || [];\r\n            // Set requested modules to a copy of the loaded modules.\r\n            beacon.H[hint].r = [...beacon.H[hint].L];\r\n            // Clear pending callbacks.\r\n            if (beacon.CP) {\r\n                for (let i = 0; i < beacon.CP.length; i++) {\r\n                    // Remove all failed pending callbacks.\r\n                    beacon.CP[i] = null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction loadGapi(auth) {\r\n    return new Promise((resolve, reject) => {\r\n        var _a, _b, _c;\r\n        // Function to run when gapi.load is ready.\r\n        function loadGapiIframe() {\r\n            // The developer may have tried to previously run gapi.load and failed.\r\n            // Run this to fix that.\r\n            resetUnloadedGapiModules();\r\n            gapi.load('gapi.iframes', {\r\n                callback: () => {\r\n                    resolve(gapi.iframes.getContext());\r\n                },\r\n                ontimeout: () => {\r\n                    // The above reset may be sufficient, but having this reset after\r\n                    // failure ensures that if the developer calls gapi.load after the\r\n                    // connection is re-established and before another attempt to embed\r\n                    // the iframe, it would work and would not be broken because of our\r\n                    // failed attempt.\r\n                    // Timeout when gapi.iframes.Iframe not loaded.\r\n                    resetUnloadedGapiModules();\r\n                    reject(_createError(auth, \"network-request-failed\" /* NETWORK_REQUEST_FAILED */));\r\n                },\r\n                timeout: NETWORK_TIMEOUT.get()\r\n            });\r\n        }\r\n        if ((_b = (_a = _window().gapi) === null || _a === void 0 ? void 0 : _a.iframes) === null || _b === void 0 ? void 0 : _b.Iframe) {\r\n            // If gapi.iframes.Iframe available, resolve.\r\n            resolve(gapi.iframes.getContext());\r\n        }\r\n        else if (!!((_c = _window().gapi) === null || _c === void 0 ? void 0 : _c.load)) {\r\n            // Gapi loader ready, load gapi.iframes.\r\n            loadGapiIframe();\r\n        }\r\n        else {\r\n            // Create a new iframe callback when this is called so as not to overwrite\r\n            // any previous defined callback. This happens if this method is called\r\n            // multiple times in parallel and could result in the later callback\r\n            // overwriting the previous one. This would end up with a iframe\r\n            // timeout.\r\n            const cbName = _generateCallbackName('iframefcb');\r\n            // GApi loader not available, dynamically load platform.js.\r\n            _window()[cbName] = () => {\r\n                // GApi loader should be ready.\r\n                if (!!gapi.load) {\r\n                    loadGapiIframe();\r\n                }\r\n                else {\r\n                    // Gapi loader failed, throw error.\r\n                    reject(_createError(auth, \"network-request-failed\" /* NETWORK_REQUEST_FAILED */));\r\n                }\r\n            };\r\n            // Load GApi loader.\r\n            return _loadJS(`https://apis.google.com/js/api.js?onload=${cbName}`);\r\n        }\r\n    }).catch(error => {\r\n        // Reset cached promise to allow for retrial.\r\n        cachedGApiLoader = null;\r\n        throw error;\r\n    });\r\n}\r\nlet cachedGApiLoader = null;\r\nfunction _loadGapi(auth) {\r\n    cachedGApiLoader = cachedGApiLoader || loadGapi(auth);\r\n    return cachedGApiLoader;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PING_TIMEOUT = new Delay(5000, 15000);\r\nconst IFRAME_PATH = '__/auth/iframe';\r\nconst EMULATED_IFRAME_PATH = 'emulator/auth/iframe';\r\nconst IFRAME_ATTRIBUTES = {\r\n    style: {\r\n        position: 'absolute',\r\n        top: '-100px',\r\n        width: '1px',\r\n        height: '1px'\r\n    },\r\n    'aria-hidden': 'true'\r\n};\r\n// Map from apiHost to endpoint ID for passing into iframe. In current SDK, apiHost can be set to\r\n// anything (not from a list of endpoints with IDs as in legacy), so this is the closest we can get.\r\nconst EID_FROM_APIHOST = new Map([\r\n    [\"identitytoolkit.googleapis.com\" /* API_HOST */, 'p'],\r\n    ['staging-identitytoolkit.sandbox.googleapis.com', 's'],\r\n    ['test-identitytoolkit.sandbox.googleapis.com', 't'] // test\r\n]);\r\nfunction getIframeUrl(auth) {\r\n    const config = auth.config;\r\n    _assert(config.authDomain, auth, \"auth-domain-config-required\" /* MISSING_AUTH_DOMAIN */);\r\n    const url = config.emulator\r\n        ? _emulatorUrl(config, EMULATED_IFRAME_PATH)\r\n        : `https://${auth.config.authDomain}/${IFRAME_PATH}`;\r\n    const params = {\r\n        apiKey: config.apiKey,\r\n        appName: auth.name,\r\n        v: _firebase_app__WEBPACK_IMPORTED_MODULE_1__.SDK_VERSION\r\n    };\r\n    const eid = EID_FROM_APIHOST.get(auth.config.apiHost);\r\n    if (eid) {\r\n        params.eid = eid;\r\n    }\r\n    const frameworks = auth._getFrameworks();\r\n    if (frameworks.length) {\r\n        params.fw = frameworks.join(',');\r\n    }\r\n    return `${url}?${(0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.querystring)(params).slice(1)}`;\r\n}\r\nasync function _openIframe(auth) {\r\n    const context = await _loadGapi(auth);\r\n    const gapi = _window().gapi;\r\n    _assert(gapi, auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n    return context.open({\r\n        where: document.body,\r\n        url: getIframeUrl(auth),\r\n        messageHandlersFilter: gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER,\r\n        attributes: IFRAME_ATTRIBUTES,\r\n        dontclear: true\r\n    }, (iframe) => new Promise(async (resolve, reject) => {\r\n        await iframe.restyle({\r\n            // Prevent iframe from closing on mouse out.\r\n            setHideOnLeave: false\r\n        });\r\n        const networkError = _createError(auth, \"network-request-failed\" /* NETWORK_REQUEST_FAILED */);\r\n        // Confirm iframe is correctly loaded.\r\n        // To fallback on failure, set a timeout.\r\n        const networkErrorTimer = _window().setTimeout(() => {\r\n            reject(networkError);\r\n        }, PING_TIMEOUT.get());\r\n        // Clear timer and resolve pending iframe ready promise.\r\n        function clearTimerAndResolve() {\r\n            _window().clearTimeout(networkErrorTimer);\r\n            resolve(iframe);\r\n        }\r\n        // This returns an IThenable. However the reject part does not call\r\n        // when the iframe is not loaded.\r\n        iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, () => {\r\n            reject(networkError);\r\n        });\r\n    }));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst BASE_POPUP_OPTIONS = {\r\n    location: 'yes',\r\n    resizable: 'yes',\r\n    statusbar: 'yes',\r\n    toolbar: 'no'\r\n};\r\nconst DEFAULT_WIDTH = 500;\r\nconst DEFAULT_HEIGHT = 600;\r\nconst TARGET_BLANK = '_blank';\r\nconst FIREFOX_EMPTY_URL = 'http://localhost';\r\nclass AuthPopup {\r\n    constructor(window) {\r\n        this.window = window;\r\n        this.associatedEvent = null;\r\n    }\r\n    close() {\r\n        if (this.window) {\r\n            try {\r\n                this.window.close();\r\n            }\r\n            catch (e) { }\r\n        }\r\n    }\r\n}\r\nfunction _open(auth, url, name, width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT) {\r\n    const top = Math.max((window.screen.availHeight - height) / 2, 0).toString();\r\n    const left = Math.max((window.screen.availWidth - width) / 2, 0).toString();\r\n    let target = '';\r\n    const options = Object.assign(Object.assign({}, BASE_POPUP_OPTIONS), { width: width.toString(), height: height.toString(), top,\r\n        left });\r\n    // Chrome iOS 7 and 8 is returning an undefined popup win when target is\r\n    // specified, even though the popup is not necessarily blocked.\r\n    const ua = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.getUA)().toLowerCase();\r\n    if (name) {\r\n        target = _isChromeIOS(ua) ? TARGET_BLANK : name;\r\n    }\r\n    if (_isFirefox(ua)) {\r\n        // Firefox complains when invalid URLs are popped out. Hacky way to bypass.\r\n        url = url || FIREFOX_EMPTY_URL;\r\n        // Firefox disables by default scrolling on popup windows, which can create\r\n        // issues when the user has many Google accounts, for instance.\r\n        options.scrollbars = 'yes';\r\n    }\r\n    const optionsString = Object.entries(options).reduce((accum, [key, value]) => `${accum}${key}=${value},`, '');\r\n    if (_isIOSStandalone(ua) && target !== '_self') {\r\n        openAsNewWindowIOS(url || '', target);\r\n        return new AuthPopup(null);\r\n    }\r\n    // about:blank getting sanitized causing browsers like IE/Edge to display\r\n    // brief error message before redirecting to handler.\r\n    const newWin = window.open(url || '', target, optionsString);\r\n    _assert(newWin, auth, \"popup-blocked\" /* POPUP_BLOCKED */);\r\n    // Flaky on IE edge, encapsulate with a try and catch.\r\n    try {\r\n        newWin.focus();\r\n    }\r\n    catch (e) { }\r\n    return new AuthPopup(newWin);\r\n}\r\nfunction openAsNewWindowIOS(url, target) {\r\n    const el = document.createElement('a');\r\n    el.href = url;\r\n    el.target = target;\r\n    const click = document.createEvent('MouseEvent');\r\n    click.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 1, null);\r\n    el.dispatchEvent(click);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * URL for Authentication widget which will initiate the OAuth handshake\r\n *\r\n * @internal\r\n */\r\nconst WIDGET_PATH = '__/auth/handler';\r\n/**\r\n * URL for emulated environment\r\n *\r\n * @internal\r\n */\r\nconst EMULATOR_WIDGET_PATH = 'emulator/auth/handler';\r\nfunction _getRedirectUrl(auth, provider, authType, redirectUrl, eventId, additionalParams) {\r\n    _assert(auth.config.authDomain, auth, \"auth-domain-config-required\" /* MISSING_AUTH_DOMAIN */);\r\n    _assert(auth.config.apiKey, auth, \"invalid-api-key\" /* INVALID_API_KEY */);\r\n    const params = {\r\n        apiKey: auth.config.apiKey,\r\n        appName: auth.name,\r\n        authType,\r\n        redirectUrl,\r\n        v: _firebase_app__WEBPACK_IMPORTED_MODULE_1__.SDK_VERSION,\r\n        eventId\r\n    };\r\n    if (provider instanceof FederatedAuthProvider) {\r\n        provider.setDefaultLanguage(auth.languageCode);\r\n        params.providerId = provider.providerId || '';\r\n        if (!(0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.isEmpty)(provider.getCustomParameters())) {\r\n            params.customParameters = JSON.stringify(provider.getCustomParameters());\r\n        }\r\n        // TODO set additionalParams from the provider as well?\r\n        for (const [key, value] of Object.entries(additionalParams || {})) {\r\n            params[key] = value;\r\n        }\r\n    }\r\n    if (provider instanceof BaseOAuthProvider) {\r\n        const scopes = provider.getScopes().filter(scope => scope !== '');\r\n        if (scopes.length > 0) {\r\n            params.scopes = scopes.join(',');\r\n        }\r\n    }\r\n    if (auth.tenantId) {\r\n        params.tid = auth.tenantId;\r\n    }\r\n    // TODO: maybe set eid as endipointId\r\n    // TODO: maybe set fw as Frameworks.join(\",\")\r\n    const paramsDict = params;\r\n    for (const key of Object.keys(paramsDict)) {\r\n        if (paramsDict[key] === undefined) {\r\n            delete paramsDict[key];\r\n        }\r\n    }\r\n    return `${getHandlerBase(auth)}?${(0,_firebase_util__WEBPACK_IMPORTED_MODULE_0__.querystring)(paramsDict).slice(1)}`;\r\n}\r\nfunction getHandlerBase({ config }) {\r\n    if (!config.emulator) {\r\n        return `https://${config.authDomain}/${WIDGET_PATH}`;\r\n    }\r\n    return _emulatorUrl(config, EMULATOR_WIDGET_PATH);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The special web storage event\r\n *\r\n */\r\nconst WEB_STORAGE_SUPPORT_KEY = 'webStorageSupport';\r\nclass BrowserPopupRedirectResolver {\r\n    constructor() {\r\n        this.eventManagers = {};\r\n        this.iframes = {};\r\n        this.originValidationPromises = {};\r\n        this._redirectPersistence = browserSessionPersistence;\r\n        this._completeRedirectFn = _getRedirectResult;\r\n    }\r\n    // Wrapping in async even though we don't await anywhere in order\r\n    // to make sure errors are raised as promise rejections\r\n    async _openPopup(auth, provider, authType, eventId) {\r\n        var _a;\r\n        debugAssert((_a = this.eventManagers[auth._key()]) === null || _a === void 0 ? void 0 : _a.manager, '_initialize() not called before _openPopup()');\r\n        const url = _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);\r\n        return _open(auth, url, _generateEventId());\r\n    }\r\n    async _openRedirect(auth, provider, authType, eventId) {\r\n        await this._originValidation(auth);\r\n        _setWindowLocation(_getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId));\r\n        return new Promise(() => { });\r\n    }\r\n    _initialize(auth) {\r\n        const key = auth._key();\r\n        if (this.eventManagers[key]) {\r\n            const { manager, promise } = this.eventManagers[key];\r\n            if (manager) {\r\n                return Promise.resolve(manager);\r\n            }\r\n            else {\r\n                debugAssert(promise, 'If manager is not set, promise should be');\r\n                return promise;\r\n            }\r\n        }\r\n        const promise = this.initAndGetManager(auth);\r\n        this.eventManagers[key] = { promise };\r\n        return promise;\r\n    }\r\n    async initAndGetManager(auth) {\r\n        const iframe = await _openIframe(auth);\r\n        const manager = new AuthEventManager(auth);\r\n        iframe.register('authEvent', (iframeEvent) => {\r\n            _assert(iframeEvent === null || iframeEvent === void 0 ? void 0 : iframeEvent.authEvent, auth, \"invalid-auth-event\" /* INVALID_AUTH_EVENT */);\r\n            // TODO: Consider splitting redirect and popup events earlier on\r\n            const handled = manager.onEvent(iframeEvent.authEvent);\r\n            return { status: handled ? \"ACK\" /* ACK */ : \"ERROR\" /* ERROR */ };\r\n        }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);\r\n        this.eventManagers[auth._key()] = { manager };\r\n        this.iframes[auth._key()] = iframe;\r\n        return manager;\r\n    }\r\n    _isIframeWebStorageSupported(auth, cb) {\r\n        const iframe = this.iframes[auth._key()];\r\n        iframe.send(WEB_STORAGE_SUPPORT_KEY, { type: WEB_STORAGE_SUPPORT_KEY }, result => {\r\n            var _a;\r\n            const isSupported = (_a = result === null || result === void 0 ? void 0 : result[0]) === null || _a === void 0 ? void 0 : _a[WEB_STORAGE_SUPPORT_KEY];\r\n            if (isSupported !== undefined) {\r\n                cb(!!isSupported);\r\n            }\r\n            _fail(auth, \"internal-error\" /* INTERNAL_ERROR */);\r\n        }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);\r\n    }\r\n    _originValidation(auth) {\r\n        const key = auth._key();\r\n        if (!this.originValidationPromises[key]) {\r\n            this.originValidationPromises[key] = _validateOrigin(auth);\r\n        }\r\n        return this.originValidationPromises[key];\r\n    }\r\n    get _shouldInitProactively() {\r\n        // Mobile browsers and Safari need to optimistically initialize\r\n        return _isMobileBrowser() || _isSafari() || _isIOS();\r\n    }\r\n}\r\n/**\r\n * An implementation of {@link PopupRedirectResolver} suitable for browser\r\n * based applications.\r\n *\r\n * @public\r\n */\r\nconst browserPopupRedirectResolver = BrowserPopupRedirectResolver;\n\nclass MultiFactorAssertionImpl {\r\n    constructor(factorId) {\r\n        this.factorId = factorId;\r\n    }\r\n    _process(auth, session, displayName) {\r\n        switch (session.type) {\r\n            case \"enroll\" /* ENROLL */:\r\n                return this._finalizeEnroll(auth, session.credential, displayName);\r\n            case \"signin\" /* SIGN_IN */:\r\n                return this._finalizeSignIn(auth, session.credential);\r\n            default:\r\n                return debugFail('unexpected MultiFactorSessionType');\r\n        }\r\n    }\r\n}\n\n/**\r\n * {@inheritdoc PhoneMultiFactorAssertion}\r\n *\r\n * @public\r\n */\r\nclass PhoneMultiFactorAssertionImpl extends MultiFactorAssertionImpl {\r\n    constructor(credential) {\r\n        super(\"phone\" /* PHONE */);\r\n        this.credential = credential;\r\n    }\r\n    /** @internal */\r\n    static _fromCredential(credential) {\r\n        return new PhoneMultiFactorAssertionImpl(credential);\r\n    }\r\n    /** @internal */\r\n    _finalizeEnroll(auth, idToken, displayName) {\r\n        return finalizeEnrollPhoneMfa(auth, {\r\n            idToken,\r\n            displayName,\r\n            phoneVerificationInfo: this.credential._makeVerificationRequest()\r\n        });\r\n    }\r\n    /** @internal */\r\n    _finalizeSignIn(auth, mfaPendingCredential) {\r\n        return finalizeSignInPhoneMfa(auth, {\r\n            mfaPendingCredential,\r\n            phoneVerificationInfo: this.credential._makeVerificationRequest()\r\n        });\r\n    }\r\n}\r\n/**\r\n * Provider for generating a {@link PhoneMultiFactorAssertion}.\r\n *\r\n * @public\r\n */\r\nclass PhoneMultiFactorGenerator {\r\n    constructor() { }\r\n    /**\r\n     * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.\r\n     *\r\n     * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.\r\n     * @returns A {@link PhoneMultiFactorAssertion} which can be used with\r\n     * {@link MultiFactorResolver.resolveSignIn}\r\n     */\r\n    static assertion(credential) {\r\n        return PhoneMultiFactorAssertionImpl._fromCredential(credential);\r\n    }\r\n}\r\n/**\r\n * The identifier of the phone second factor: `phone`.\r\n */\r\nPhoneMultiFactorGenerator.FACTOR_ID = 'phone';\n\nvar name = \"@firebase/auth\";\nvar version = \"0.19.0\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AuthInterop {\r\n    constructor(auth) {\r\n        this.auth = auth;\r\n        this.internalListeners = new Map();\r\n    }\r\n    getUid() {\r\n        var _a;\r\n        this.assertAuthConfigured();\r\n        return ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid) || null;\r\n    }\r\n    async getToken(forceRefresh) {\r\n        this.assertAuthConfigured();\r\n        await this.auth._initializationPromise;\r\n        if (!this.auth.currentUser) {\r\n            return null;\r\n        }\r\n        const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);\r\n        return { accessToken };\r\n    }\r\n    addAuthTokenListener(listener) {\r\n        this.assertAuthConfigured();\r\n        if (this.internalListeners.has(listener)) {\r\n            return;\r\n        }\r\n        const unsubscribe = this.auth.onIdTokenChanged(user => {\r\n            var _a;\r\n            listener(((_a = user) === null || _a === void 0 ? void 0 : _a.stsTokenManager.accessToken) || null);\r\n        });\r\n        this.internalListeners.set(listener, unsubscribe);\r\n        this.updateProactiveRefresh();\r\n    }\r\n    removeAuthTokenListener(listener) {\r\n        this.assertAuthConfigured();\r\n        const unsubscribe = this.internalListeners.get(listener);\r\n        if (!unsubscribe) {\r\n            return;\r\n        }\r\n        this.internalListeners.delete(listener);\r\n        unsubscribe();\r\n        this.updateProactiveRefresh();\r\n    }\r\n    assertAuthConfigured() {\r\n        _assert(this.auth._initializationPromise, \"dependent-sdk-initialized-before-auth\" /* DEPENDENT_SDK_INIT_BEFORE_AUTH */);\r\n    }\r\n    updateProactiveRefresh() {\r\n        if (this.internalListeners.size > 0) {\r\n            this.auth._startProactiveRefresh();\r\n        }\r\n        else {\r\n            this.auth._stopProactiveRefresh();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getVersionForPlatform(clientPlatform) {\r\n    switch (clientPlatform) {\r\n        case \"Node\" /* NODE */:\r\n            return 'node';\r\n        case \"ReactNative\" /* REACT_NATIVE */:\r\n            return 'rn';\r\n        case \"Worker\" /* WORKER */:\r\n            return 'webworker';\r\n        case \"Cordova\" /* CORDOVA */:\r\n            return 'cordova';\r\n        default:\r\n            return undefined;\r\n    }\r\n}\r\n/** @internal */\r\nfunction registerAuth(clientPlatform) {\r\n    (0,_firebase_app__WEBPACK_IMPORTED_MODULE_1__._registerComponent)(new _firebase_component__WEBPACK_IMPORTED_MODULE_3__.Component(\"auth\" /* AUTH */, (container, { options: deps }) => {\r\n        const app = container.getProvider('app').getImmediate();\r\n        const { apiKey, authDomain } = app.options;\r\n        return (app => {\r\n            _assert(apiKey && !apiKey.includes(':'), \"invalid-api-key\" /* INVALID_API_KEY */, { appName: app.name });\r\n            // Auth domain is optional if IdP sign in isn't being used\r\n            _assert(!(authDomain === null || authDomain === void 0 ? void 0 : authDomain.includes(':')), \"argument-error\" /* ARGUMENT_ERROR */, {\r\n                appName: app.name\r\n            });\r\n            const config = {\r\n                apiKey,\r\n                authDomain,\r\n                clientPlatform,\r\n                apiHost: \"identitytoolkit.googleapis.com\" /* API_HOST */,\r\n                tokenApiHost: \"securetoken.googleapis.com\" /* TOKEN_API_HOST */,\r\n                apiScheme: \"https\" /* API_SCHEME */,\r\n                sdkClientVersion: _getClientVersion(clientPlatform)\r\n            };\r\n            const authInstance = new AuthImpl(app, config);\r\n            _initializeAuthInstance(authInstance, deps);\r\n            return authInstance;\r\n        })(app);\r\n    }, \"PUBLIC\" /* PUBLIC */)\r\n        /**\r\n         * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()\r\n         * For why we do this, See go/firebase-next-auth-init\r\n         */\r\n        .setInstantiationMode(\"EXPLICIT\" /* EXPLICIT */)\r\n        /**\r\n         * Because all firebase products that depend on auth depend on auth-internal directly,\r\n         * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.\r\n         */\r\n        .setInstanceCreatedCallback((container, _instanceIdentifier, _instance) => {\r\n        const authInternalProvider = container.getProvider(\"auth-internal\" /* AUTH_INTERNAL */);\r\n        authInternalProvider.initialize();\r\n    }));\r\n    (0,_firebase_app__WEBPACK_IMPORTED_MODULE_1__._registerComponent)(new _firebase_component__WEBPACK_IMPORTED_MODULE_3__.Component(\"auth-internal\" /* AUTH_INTERNAL */, container => {\r\n        const auth = _castAuth(container.getProvider(\"auth\" /* AUTH */).getImmediate());\r\n        return (auth => new AuthInterop(auth))(auth);\r\n    }, \"PRIVATE\" /* PRIVATE */).setInstantiationMode(\"EXPLICIT\" /* EXPLICIT */));\r\n    (0,_firebase_app__WEBPACK_IMPORTED_MODULE_1__.registerVersion)(name, version, getVersionForPlatform(clientPlatform));\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    (0,_firebase_app__WEBPACK_IMPORTED_MODULE_1__.registerVersion)(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the Auth instance associated with the provided {@link @firebase/app#FirebaseApp}.\r\n * If no instance exists, initializes an Auth instance with platform-specific default dependencies.\r\n *\r\n * @param app - The Firebase App.\r\n *\r\n * @public\r\n */\r\nfunction getAuth(app = (0,_firebase_app__WEBPACK_IMPORTED_MODULE_1__.getApp)()) {\r\n    const provider = (0,_firebase_app__WEBPACK_IMPORTED_MODULE_1__._getProvider)(app, 'auth');\r\n    if (provider.isInitialized()) {\r\n        return provider.getImmediate();\r\n    }\r\n    return initializeAuth(app, {\r\n        popupRedirectResolver: browserPopupRedirectResolver,\r\n        persistence: [\r\n            indexedDBLocalPersistence,\r\n            browserLocalPersistence,\r\n            browserSessionPersistence\r\n        ]\r\n    });\r\n}\r\nregisterAuth(\"Browser\" /* BROWSER */);\n\n\n//# sourceMappingURL=index-238d6fa9.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@firebase/auth/dist/esm2017/index-238d6fa9.js\n");

/***/ }),

/***/ "./node_modules/@firebase/auth/dist/esm2017/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@firebase/auth/dist/esm2017/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ActionCodeOperation\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.A),\n/* harmony export */   \"ActionCodeURL\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.ac),\n/* harmony export */   \"AuthCredential\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.G),\n/* harmony export */   \"AuthErrorCodes\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.C),\n/* harmony export */   \"EmailAuthCredential\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.H),\n/* harmony export */   \"EmailAuthProvider\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.L),\n/* harmony export */   \"FacebookAuthProvider\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.M),\n/* harmony export */   \"FactorId\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.F),\n/* harmony export */   \"GithubAuthProvider\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.Q),\n/* harmony export */   \"GoogleAuthProvider\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.N),\n/* harmony export */   \"OAuthCredential\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.I),\n/* harmony export */   \"OAuthProvider\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.T),\n/* harmony export */   \"OperationType\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.O),\n/* harmony export */   \"PhoneAuthCredential\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.J),\n/* harmony export */   \"PhoneAuthProvider\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.P),\n/* harmony export */   \"PhoneMultiFactorGenerator\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.m),\n/* harmony export */   \"ProviderId\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.o),\n/* harmony export */   \"RecaptchaVerifier\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.R),\n/* harmony export */   \"SAMLAuthProvider\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.U),\n/* harmony export */   \"SignInMethod\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.S),\n/* harmony export */   \"TwitterAuthProvider\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.V),\n/* harmony export */   \"applyActionCode\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.a1),\n/* harmony export */   \"browserLocalPersistence\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   \"browserPopupRedirectResolver\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.k),\n/* harmony export */   \"browserSessionPersistence\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   \"checkActionCode\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.a2),\n/* harmony export */   \"confirmPasswordReset\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.a0),\n/* harmony export */   \"connectAuthEmulator\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.E),\n/* harmony export */   \"createUserWithEmailAndPassword\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.a4),\n/* harmony export */   \"debugErrorMap\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.z),\n/* harmony export */   \"deleteUser\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.y),\n/* harmony export */   \"fetchSignInMethodsForEmail\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.a9),\n/* harmony export */   \"getAdditionalUserInfo\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.ak),\n/* harmony export */   \"getAuth\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.n),\n/* harmony export */   \"getIdToken\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.ah),\n/* harmony export */   \"getIdTokenResult\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.ai),\n/* harmony export */   \"getMultiFactorResolver\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.am),\n/* harmony export */   \"getRedirectResult\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.j),\n/* harmony export */   \"inMemoryPersistence\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.K),\n/* harmony export */   \"indexedDBLocalPersistence\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.i),\n/* harmony export */   \"initializeAuth\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.D),\n/* harmony export */   \"isSignInWithEmailLink\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.a7),\n/* harmony export */   \"linkWithCredential\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.Y),\n/* harmony export */   \"linkWithPhoneNumber\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.l),\n/* harmony export */   \"linkWithPopup\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.d),\n/* harmony export */   \"linkWithRedirect\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.g),\n/* harmony export */   \"multiFactor\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.an),\n/* harmony export */   \"onAuthStateChanged\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.t),\n/* harmony export */   \"onIdTokenChanged\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.q),\n/* harmony export */   \"parseActionCodeURL\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.ad),\n/* harmony export */   \"prodErrorMap\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.B),\n/* harmony export */   \"reauthenticateWithCredential\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.Z),\n/* harmony export */   \"reauthenticateWithPhoneNumber\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.r),\n/* harmony export */   \"reauthenticateWithPopup\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.e),\n/* harmony export */   \"reauthenticateWithRedirect\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.h),\n/* harmony export */   \"reload\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.al),\n/* harmony export */   \"sendEmailVerification\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.aa),\n/* harmony export */   \"sendPasswordResetEmail\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.$),\n/* harmony export */   \"sendSignInLinkToEmail\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.a6),\n/* harmony export */   \"setPersistence\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.p),\n/* harmony export */   \"signInAnonymously\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.W),\n/* harmony export */   \"signInWithCredential\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.X),\n/* harmony export */   \"signInWithCustomToken\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__._),\n/* harmony export */   \"signInWithEmailAndPassword\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.a5),\n/* harmony export */   \"signInWithEmailLink\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.a8),\n/* harmony export */   \"signInWithPhoneNumber\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.s),\n/* harmony export */   \"signInWithPopup\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   \"signInWithRedirect\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.f),\n/* harmony export */   \"signOut\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.x),\n/* harmony export */   \"unlink\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.aj),\n/* harmony export */   \"updateCurrentUser\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.w),\n/* harmony export */   \"updateEmail\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.af),\n/* harmony export */   \"updatePassword\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.ag),\n/* harmony export */   \"updatePhoneNumber\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.u),\n/* harmony export */   \"updateProfile\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.ae),\n/* harmony export */   \"useDeviceLanguage\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.v),\n/* harmony export */   \"verifyBeforeUpdateEmail\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.ab),\n/* harmony export */   \"verifyPasswordResetCode\": () => (/* reexport safe */ _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__.a3)\n/* harmony export */ });\n/* harmony import */ var _index_238d6fa9_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-238d6fa9.js */ \"./node_modules/@firebase/auth/dist/esm2017/index-238d6fa9.js\");\n/* harmony import */ var _firebase_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @firebase/util */ \"./node_modules/@firebase/util/dist/index.esm2017.js\");\n/* harmony import */ var _firebase_app__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @firebase/app */ \"./node_modules/@firebase/app/dist/index.esm2017.js\");\n/* harmony import */ var _firebase_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @firebase/logger */ \"./node_modules/@firebase/logger/dist/index.esm2017.js\");\n/* harmony import */ var _firebase_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @firebase/component */ \"./node_modules/@firebase/component/dist/index.esm.js\");\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvZGlzdC9lc20yMDE3L2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXU3RDtBQUMvNUQ7QUFDRDtBQUNSO0FBQ1c7QUFDRztBQUM3QiIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9kaXN0L2VzbTIwMTcvaW5kZXguanM/NmE3YyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBBIGFzIEFjdGlvbkNvZGVPcGVyYXRpb24sIGFjIGFzIEFjdGlvbkNvZGVVUkwsIEcgYXMgQXV0aENyZWRlbnRpYWwsIEMgYXMgQXV0aEVycm9yQ29kZXMsIEggYXMgRW1haWxBdXRoQ3JlZGVudGlhbCwgTCBhcyBFbWFpbEF1dGhQcm92aWRlciwgTSBhcyBGYWNlYm9va0F1dGhQcm92aWRlciwgRiBhcyBGYWN0b3JJZCwgUSBhcyBHaXRodWJBdXRoUHJvdmlkZXIsIE4gYXMgR29vZ2xlQXV0aFByb3ZpZGVyLCBJIGFzIE9BdXRoQ3JlZGVudGlhbCwgVCBhcyBPQXV0aFByb3ZpZGVyLCBPIGFzIE9wZXJhdGlvblR5cGUsIEogYXMgUGhvbmVBdXRoQ3JlZGVudGlhbCwgUCBhcyBQaG9uZUF1dGhQcm92aWRlciwgbSBhcyBQaG9uZU11bHRpRmFjdG9yR2VuZXJhdG9yLCBvIGFzIFByb3ZpZGVySWQsIFIgYXMgUmVjYXB0Y2hhVmVyaWZpZXIsIFUgYXMgU0FNTEF1dGhQcm92aWRlciwgUyBhcyBTaWduSW5NZXRob2QsIFYgYXMgVHdpdHRlckF1dGhQcm92aWRlciwgYTEgYXMgYXBwbHlBY3Rpb25Db2RlLCBiIGFzIGJyb3dzZXJMb2NhbFBlcnNpc3RlbmNlLCBrIGFzIGJyb3dzZXJQb3B1cFJlZGlyZWN0UmVzb2x2ZXIsIGEgYXMgYnJvd3NlclNlc3Npb25QZXJzaXN0ZW5jZSwgYTIgYXMgY2hlY2tBY3Rpb25Db2RlLCBhMCBhcyBjb25maXJtUGFzc3dvcmRSZXNldCwgRSBhcyBjb25uZWN0QXV0aEVtdWxhdG9yLCBhNCBhcyBjcmVhdGVVc2VyV2l0aEVtYWlsQW5kUGFzc3dvcmQsIHogYXMgZGVidWdFcnJvck1hcCwgeSBhcyBkZWxldGVVc2VyLCBhOSBhcyBmZXRjaFNpZ25Jbk1ldGhvZHNGb3JFbWFpbCwgYWsgYXMgZ2V0QWRkaXRpb25hbFVzZXJJbmZvLCBuIGFzIGdldEF1dGgsIGFoIGFzIGdldElkVG9rZW4sIGFpIGFzIGdldElkVG9rZW5SZXN1bHQsIGFtIGFzIGdldE11bHRpRmFjdG9yUmVzb2x2ZXIsIGogYXMgZ2V0UmVkaXJlY3RSZXN1bHQsIEsgYXMgaW5NZW1vcnlQZXJzaXN0ZW5jZSwgaSBhcyBpbmRleGVkREJMb2NhbFBlcnNpc3RlbmNlLCBEIGFzIGluaXRpYWxpemVBdXRoLCBhNyBhcyBpc1NpZ25JbldpdGhFbWFpbExpbmssIFkgYXMgbGlua1dpdGhDcmVkZW50aWFsLCBsIGFzIGxpbmtXaXRoUGhvbmVOdW1iZXIsIGQgYXMgbGlua1dpdGhQb3B1cCwgZyBhcyBsaW5rV2l0aFJlZGlyZWN0LCBhbiBhcyBtdWx0aUZhY3RvciwgdCBhcyBvbkF1dGhTdGF0ZUNoYW5nZWQsIHEgYXMgb25JZFRva2VuQ2hhbmdlZCwgYWQgYXMgcGFyc2VBY3Rpb25Db2RlVVJMLCBCIGFzIHByb2RFcnJvck1hcCwgWiBhcyByZWF1dGhlbnRpY2F0ZVdpdGhDcmVkZW50aWFsLCByIGFzIHJlYXV0aGVudGljYXRlV2l0aFBob25lTnVtYmVyLCBlIGFzIHJlYXV0aGVudGljYXRlV2l0aFBvcHVwLCBoIGFzIHJlYXV0aGVudGljYXRlV2l0aFJlZGlyZWN0LCBhbCBhcyByZWxvYWQsIGFhIGFzIHNlbmRFbWFpbFZlcmlmaWNhdGlvbiwgJCBhcyBzZW5kUGFzc3dvcmRSZXNldEVtYWlsLCBhNiBhcyBzZW5kU2lnbkluTGlua1RvRW1haWwsIHAgYXMgc2V0UGVyc2lzdGVuY2UsIFcgYXMgc2lnbkluQW5vbnltb3VzbHksIFggYXMgc2lnbkluV2l0aENyZWRlbnRpYWwsIF8gYXMgc2lnbkluV2l0aEN1c3RvbVRva2VuLCBhNSBhcyBzaWduSW5XaXRoRW1haWxBbmRQYXNzd29yZCwgYTggYXMgc2lnbkluV2l0aEVtYWlsTGluaywgcyBhcyBzaWduSW5XaXRoUGhvbmVOdW1iZXIsIGMgYXMgc2lnbkluV2l0aFBvcHVwLCBmIGFzIHNpZ25JbldpdGhSZWRpcmVjdCwgeCBhcyBzaWduT3V0LCBhaiBhcyB1bmxpbmssIHcgYXMgdXBkYXRlQ3VycmVudFVzZXIsIGFmIGFzIHVwZGF0ZUVtYWlsLCBhZyBhcyB1cGRhdGVQYXNzd29yZCwgdSBhcyB1cGRhdGVQaG9uZU51bWJlciwgYWUgYXMgdXBkYXRlUHJvZmlsZSwgdiBhcyB1c2VEZXZpY2VMYW5ndWFnZSwgYWIgYXMgdmVyaWZ5QmVmb3JlVXBkYXRlRW1haWwsIGEzIGFzIHZlcmlmeVBhc3N3b3JkUmVzZXRDb2RlIH0gZnJvbSAnLi9pbmRleC0yMzhkNmZhOS5qcyc7XG5pbXBvcnQgJ0BmaXJlYmFzZS91dGlsJztcbmltcG9ydCAnQGZpcmViYXNlL2FwcCc7XG5pbXBvcnQgJ3RzbGliJztcbmltcG9ydCAnQGZpcmViYXNlL2xvZ2dlcic7XG5pbXBvcnQgJ0BmaXJlYmFzZS9jb21wb25lbnQnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@firebase/auth/dist/esm2017/index.js\n");

/***/ }),

/***/ "./node_modules/@firebase/component/dist/index.esm.js":
/*!************************************************************!*\
  !*** ./node_modules/@firebase/component/dist/index.esm.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Component\": () => (/* binding */ Component),\n/* harmony export */   \"ComponentContainer\": () => (/* binding */ ComponentContainer),\n/* harmony export */   \"Provider\": () => (/* binding */ Provider)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _firebase_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/util */ \"./node_modules/@firebase/util/dist/index.esm2017.js\");\n\n\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nvar Component = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param name The public service name, e.g. app, auth, firestore, database\r\n     * @param instanceFactory Service factory responsible for creating the public interface\r\n     * @param type whether the service provided by the component is public or private\r\n     */\r\n    function Component(name, instanceFactory, type) {\r\n        this.name = name;\r\n        this.instanceFactory = instanceFactory;\r\n        this.type = type;\r\n        this.multipleInstances = false;\r\n        /**\r\n         * Properties to be added to the service namespace\r\n         */\r\n        this.serviceProps = {};\r\n        this.instantiationMode = \"LAZY\" /* LAZY */;\r\n        this.onInstanceCreated = null;\r\n    }\r\n    Component.prototype.setInstantiationMode = function (mode) {\r\n        this.instantiationMode = mode;\r\n        return this;\r\n    };\r\n    Component.prototype.setMultipleInstances = function (multipleInstances) {\r\n        this.multipleInstances = multipleInstances;\r\n        return this;\r\n    };\r\n    Component.prototype.setServiceProps = function (props) {\r\n        this.serviceProps = props;\r\n        return this;\r\n    };\r\n    Component.prototype.setInstanceCreatedCallback = function (callback) {\r\n        this.onInstanceCreated = callback;\r\n        return this;\r\n    };\r\n    return Component;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\r\nvar Provider = /** @class */ (function () {\r\n    function Provider(name, container) {\r\n        this.name = name;\r\n        this.container = container;\r\n        this.component = null;\r\n        this.instances = new Map();\r\n        this.instancesDeferred = new Map();\r\n        this.instancesOptions = new Map();\r\n        this.onInitCallbacks = new Map();\r\n    }\r\n    /**\r\n     * @param identifier A provider can provide mulitple instances of a service\r\n     * if this.component.multipleInstances is true.\r\n     */\r\n    Provider.prototype.get = function (identifier) {\r\n        // if multipleInstances is not supported, use the default name\r\n        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        if (!this.instancesDeferred.has(normalizedIdentifier)) {\r\n            var deferred = new _firebase_util__WEBPACK_IMPORTED_MODULE_0__.Deferred();\r\n            this.instancesDeferred.set(normalizedIdentifier, deferred);\r\n            if (this.isInitialized(normalizedIdentifier) ||\r\n                this.shouldAutoInitialize()) {\r\n                // initialize the service if it can be auto-initialized\r\n                try {\r\n                    var instance = this.getOrInitializeService({\r\n                        instanceIdentifier: normalizedIdentifier\r\n                    });\r\n                    if (instance) {\r\n                        deferred.resolve(instance);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // when the instance factory throws an exception during get(), it should not cause\r\n                    // a fatal error. We just return the unresolved promise in this case.\r\n                }\r\n            }\r\n        }\r\n        return this.instancesDeferred.get(normalizedIdentifier).promise;\r\n    };\r\n    Provider.prototype.getImmediate = function (options) {\r\n        var _a;\r\n        // if multipleInstances is not supported, use the default name\r\n        var normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\r\n        var optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\r\n        if (this.isInitialized(normalizedIdentifier) ||\r\n            this.shouldAutoInitialize()) {\r\n            try {\r\n                return this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n            }\r\n            catch (e) {\r\n                if (optional) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\r\n            if (optional) {\r\n                return null;\r\n            }\r\n            else {\r\n                throw Error(\"Service \" + this.name + \" is not available\");\r\n            }\r\n        }\r\n    };\r\n    Provider.prototype.getComponent = function () {\r\n        return this.component;\r\n    };\r\n    Provider.prototype.setComponent = function (component) {\r\n        var e_1, _a;\r\n        if (component.name !== this.name) {\r\n            throw Error(\"Mismatching Component \" + component.name + \" for Provider \" + this.name + \".\");\r\n        }\r\n        if (this.component) {\r\n            throw Error(\"Component for \" + this.name + \" has already been provided\");\r\n        }\r\n        this.component = component;\r\n        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\r\n        if (!this.shouldAutoInitialize()) {\r\n            return;\r\n        }\r\n        // if the service is eager, initialize the default instance\r\n        if (isComponentEager(component)) {\r\n            try {\r\n                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\r\n            }\r\n            catch (e) {\r\n                // when the instance factory for an eager Component throws an exception during the eager\r\n                // initialization, it should not cause a fatal error.\r\n                // TODO: Investigate if we need to make it configurable, because some component may want to cause\r\n                // a fatal error in this case?\r\n            }\r\n        }\r\n        try {\r\n            // Create service instances for the pending promises and resolve them\r\n            // NOTE: if this.multipleInstances is false, only the default instance will be created\r\n            // and all promises with resolve with it regardless of the identifier.\r\n            for (var _b = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__values)(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var _d = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)(_c.value, 2), instanceIdentifier = _d[0], instanceDeferred = _d[1];\r\n                var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n                try {\r\n                    // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\r\n                    var instance = this.getOrInitializeService({\r\n                        instanceIdentifier: normalizedIdentifier\r\n                    });\r\n                    instanceDeferred.resolve(instance);\r\n                }\r\n                catch (e) {\r\n                    // when the instance factory throws an exception, it should not cause\r\n                    // a fatal error. We just leave the promise unresolved.\r\n                }\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n    };\r\n    Provider.prototype.clearInstance = function (identifier) {\r\n        if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }\r\n        this.instancesDeferred.delete(identifier);\r\n        this.instancesOptions.delete(identifier);\r\n        this.instances.delete(identifier);\r\n    };\r\n    // app.delete() will call this method on every provider to delete the services\r\n    // TODO: should we mark the provider as deleted?\r\n    Provider.prototype.delete = function () {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {\r\n            var services;\r\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        services = Array.from(this.instances.values());\r\n                        return [4 /*yield*/, Promise.all((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)(services\r\n                                .filter(function (service) { return 'INTERNAL' in service; }) // legacy services\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                .map(function (service) { return service.INTERNAL.delete(); }))), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)(services\r\n                                .filter(function (service) { return '_delete' in service; }) // modularized services\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                .map(function (service) { return service._delete(); }))))];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Provider.prototype.isComponentSet = function () {\r\n        return this.component != null;\r\n    };\r\n    Provider.prototype.isInitialized = function (identifier) {\r\n        if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }\r\n        return this.instances.has(identifier);\r\n    };\r\n    Provider.prototype.getOptions = function (identifier) {\r\n        if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }\r\n        return this.instancesOptions.get(identifier) || {};\r\n    };\r\n    Provider.prototype.initialize = function (opts) {\r\n        var e_2, _a;\r\n        if (opts === void 0) { opts = {}; }\r\n        var _b = opts.options, options = _b === void 0 ? {} : _b;\r\n        var normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\r\n        if (this.isInitialized(normalizedIdentifier)) {\r\n            throw Error(this.name + \"(\" + normalizedIdentifier + \") has already been initialized\");\r\n        }\r\n        if (!this.isComponentSet()) {\r\n            throw Error(\"Component \" + this.name + \" has not been registered yet\");\r\n        }\r\n        var instance = this.getOrInitializeService({\r\n            instanceIdentifier: normalizedIdentifier,\r\n            options: options\r\n        });\r\n        try {\r\n            // resolve any pending promise waiting for the service instance\r\n            for (var _c = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__values)(this.instancesDeferred.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {\r\n                var _e = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)(_d.value, 2), instanceIdentifier = _e[0], instanceDeferred = _e[1];\r\n                var normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n                if (normalizedIdentifier === normalizedDeferredIdentifier) {\r\n                    instanceDeferred.resolve(instance);\r\n                }\r\n            }\r\n        }\r\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n        finally {\r\n            try {\r\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\r\n            }\r\n            finally { if (e_2) throw e_2.error; }\r\n        }\r\n        return instance;\r\n    };\r\n    /**\r\n     *\r\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n     *\r\n     * @param identifier An optional instance identifier\r\n     * @returns a function to unregister the callback\r\n     */\r\n    Provider.prototype.onInit = function (callback, identifier) {\r\n        var _a;\r\n        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        var existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\r\n        existingCallbacks.add(callback);\r\n        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\r\n        var existingInstance = this.instances.get(normalizedIdentifier);\r\n        if (existingInstance) {\r\n            callback(existingInstance, normalizedIdentifier);\r\n        }\r\n        return function () {\r\n            existingCallbacks.delete(callback);\r\n        };\r\n    };\r\n    /**\r\n     * Invoke onInit callbacks synchronously\r\n     * @param instance the service instance`\r\n     */\r\n    Provider.prototype.invokeOnInitCallbacks = function (instance, identifier) {\r\n        var e_3, _a;\r\n        var callbacks = this.onInitCallbacks.get(identifier);\r\n        if (!callbacks) {\r\n            return;\r\n        }\r\n        try {\r\n            for (var callbacks_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__values)(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()) {\r\n                var callback = callbacks_1_1.value;\r\n                try {\r\n                    callback(instance, identifier);\r\n                }\r\n                catch (_b) {\r\n                    // ignore errors in the onInit callback\r\n                }\r\n            }\r\n        }\r\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\r\n        finally {\r\n            try {\r\n                if (callbacks_1_1 && !callbacks_1_1.done && (_a = callbacks_1.return)) _a.call(callbacks_1);\r\n            }\r\n            finally { if (e_3) throw e_3.error; }\r\n        }\r\n    };\r\n    Provider.prototype.getOrInitializeService = function (_a) {\r\n        var instanceIdentifier = _a.instanceIdentifier, _b = _a.options, options = _b === void 0 ? {} : _b;\r\n        var instance = this.instances.get(instanceIdentifier);\r\n        if (!instance && this.component) {\r\n            instance = this.component.instanceFactory(this.container, {\r\n                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\r\n                options: options\r\n            });\r\n            this.instances.set(instanceIdentifier, instance);\r\n            this.instancesOptions.set(instanceIdentifier, options);\r\n            /**\r\n             * Invoke onInit listeners.\r\n             * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n             * while onInit listeners are registered by consumers of the provider.\r\n             */\r\n            this.invokeOnInitCallbacks(instance, instanceIdentifier);\r\n            /**\r\n             * Order is important\r\n             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n             * makes `isInitialized()` return true.\r\n             */\r\n            if (this.component.onInstanceCreated) {\r\n                try {\r\n                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\r\n                }\r\n                catch (_c) {\r\n                    // ignore errors in the onInstanceCreatedCallback\r\n                }\r\n            }\r\n        }\r\n        return instance || null;\r\n    };\r\n    Provider.prototype.normalizeInstanceIdentifier = function (identifier) {\r\n        if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }\r\n        if (this.component) {\r\n            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\r\n        }\r\n        else {\r\n            return identifier; // assume multiple instances are supported before the component is provided.\r\n        }\r\n    };\r\n    Provider.prototype.shouldAutoInitialize = function () {\r\n        return (!!this.component &&\r\n            this.component.instantiationMode !== \"EXPLICIT\" /* EXPLICIT */);\r\n    };\r\n    return Provider;\r\n}());\r\n// undefined should be passed to the service factory for the default instance\r\nfunction normalizeIdentifierForFactory(identifier) {\r\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\r\n}\r\nfunction isComponentEager(component) {\r\n    return component.instantiationMode === \"EAGER\" /* EAGER */;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nvar ComponentContainer = /** @class */ (function () {\r\n    function ComponentContainer(name) {\r\n        this.name = name;\r\n        this.providers = new Map();\r\n    }\r\n    /**\r\n     *\r\n     * @param component Component being added\r\n     * @param overwrite When a component with the same name has already been registered,\r\n     * if overwrite is true: overwrite the existing component with the new component and create a new\r\n     * provider with the new component. It can be useful in tests where you want to use different mocks\r\n     * for different tests.\r\n     * if overwrite is false: throw an exception\r\n     */\r\n    ComponentContainer.prototype.addComponent = function (component) {\r\n        var provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            throw new Error(\"Component \" + component.name + \" has already been registered with \" + this.name);\r\n        }\r\n        provider.setComponent(component);\r\n    };\r\n    ComponentContainer.prototype.addOrOverwriteComponent = function (component) {\r\n        var provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            // delete the existing provider from the container, so we can register the new component\r\n            this.providers.delete(component.name);\r\n        }\r\n        this.addComponent(component);\r\n    };\r\n    /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */\r\n    ComponentContainer.prototype.getProvider = function (name) {\r\n        if (this.providers.has(name)) {\r\n            return this.providers.get(name);\r\n        }\r\n        // create a Provider for a service that hasn't registered with Firebase\r\n        var provider = new Provider(name, this);\r\n        this.providers.set(name, provider);\r\n        return provider;\r\n    };\r\n    ComponentContainer.prototype.getProviders = function () {\r\n        return Array.from(this.providers.values());\r\n    };\r\n    return ComponentContainer;\r\n}());\n\n\n//# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@firebase/component/dist/index.esm.js\n");

/***/ }),

/***/ "./node_modules/@firebase/logger/dist/index.esm2017.js":
/*!*************************************************************!*\
  !*** ./node_modules/@firebase/logger/dist/index.esm2017.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LogLevel\": () => (/* binding */ LogLevel),\n/* harmony export */   \"Logger\": () => (/* binding */ Logger),\n/* harmony export */   \"setLogLevel\": () => (/* binding */ setLogLevel),\n/* harmony export */   \"setUserLogHandler\": () => (/* binding */ setUserLogHandler)\n/* harmony export */ });\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nconst instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\nconst levelStringToEnum = {\r\n    'debug': LogLevel.DEBUG,\r\n    'verbose': LogLevel.VERBOSE,\r\n    'info': LogLevel.INFO,\r\n    'warn': LogLevel.WARN,\r\n    'error': LogLevel.ERROR,\r\n    'silent': LogLevel.SILENT\r\n};\r\n/**\r\n * The default log level\r\n */\r\nconst defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\r\nconst ConsoleMethod = {\r\n    [LogLevel.DEBUG]: 'log',\r\n    [LogLevel.VERBOSE]: 'log',\r\n    [LogLevel.INFO]: 'info',\r\n    [LogLevel.WARN]: 'warn',\r\n    [LogLevel.ERROR]: 'error'\r\n};\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nconst defaultLogHandler = (instance, logType, ...args) => {\r\n    if (logType < instance.logLevel) {\r\n        return;\r\n    }\r\n    const now = new Date().toISOString();\r\n    const method = ConsoleMethod[logType];\r\n    if (method) {\r\n        console[method](`[${now}]  ${instance.name}:`, ...args);\r\n    }\r\n    else {\r\n        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\r\n    }\r\n};\r\nclass Logger {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The main (internal) log handler for the Logger instance.\r\n         * Can be set to a new function in internal package code but not by user.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * The optional, additional, user-defined log handler for the Logger instance.\r\n         */\r\n        this._userLogHandler = null;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    get logLevel() {\r\n        return this._logLevel;\r\n    }\r\n    set logLevel(val) {\r\n        if (!(val in LogLevel)) {\r\n            throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\r\n        }\r\n        this._logLevel = val;\r\n    }\r\n    // Workaround for setter/getter having to be the same type.\r\n    setLogLevel(val) {\r\n        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\r\n    }\r\n    get logHandler() {\r\n        return this._logHandler;\r\n    }\r\n    set logHandler(val) {\r\n        if (typeof val !== 'function') {\r\n            throw new TypeError('Value assigned to `logHandler` must be a function');\r\n        }\r\n        this._logHandler = val;\r\n    }\r\n    get userLogHandler() {\r\n        return this._userLogHandler;\r\n    }\r\n    set userLogHandler(val) {\r\n        this._userLogHandler = val;\r\n    }\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    debug(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\r\n        this._logHandler(this, LogLevel.DEBUG, ...args);\r\n    }\r\n    log(...args) {\r\n        this._userLogHandler &&\r\n            this._userLogHandler(this, LogLevel.VERBOSE, ...args);\r\n        this._logHandler(this, LogLevel.VERBOSE, ...args);\r\n    }\r\n    info(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\r\n        this._logHandler(this, LogLevel.INFO, ...args);\r\n    }\r\n    warn(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\r\n        this._logHandler(this, LogLevel.WARN, ...args);\r\n    }\r\n    error(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\r\n        this._logHandler(this, LogLevel.ERROR, ...args);\r\n    }\r\n}\r\nfunction setLogLevel(level) {\r\n    instances.forEach(inst => {\r\n        inst.setLogLevel(level);\r\n    });\r\n}\r\nfunction setUserLogHandler(logCallback, options) {\r\n    for (const instance of instances) {\r\n        let customLogLevel = null;\r\n        if (options && options.level) {\r\n            customLogLevel = levelStringToEnum[options.level];\r\n        }\r\n        if (logCallback === null) {\r\n            instance.userLogHandler = null;\r\n        }\r\n        else {\r\n            instance.userLogHandler = (instance, level, ...args) => {\r\n                const message = args\r\n                    .map(arg => {\r\n                    if (arg == null) {\r\n                        return null;\r\n                    }\r\n                    else if (typeof arg === 'string') {\r\n                        return arg;\r\n                    }\r\n                    else if (typeof arg === 'number' || typeof arg === 'boolean') {\r\n                        return arg.toString();\r\n                    }\r\n                    else if (arg instanceof Error) {\r\n                        return arg.message;\r\n                    }\r\n                    else {\r\n                        try {\r\n                            return JSON.stringify(arg);\r\n                        }\r\n                        catch (ignored) {\r\n                            return null;\r\n                        }\r\n                    }\r\n                })\r\n                    .filter(arg => arg)\r\n                    .join(' ');\r\n                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\r\n                    logCallback({\r\n                        level: LogLevel[level].toLowerCase(),\r\n                        message,\r\n                        args,\r\n                        type: instance.name\r\n                    });\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\n\n\n//# sourceMappingURL=index.esm2017.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@firebase/logger/dist/index.esm2017.js\n");

/***/ }),

/***/ "./node_modules/@firebase/util/dist/index.esm2017.js":
/*!***********************************************************!*\
  !*** ./node_modules/@firebase/util/dist/index.esm2017.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CONSTANTS\": () => (/* binding */ CONSTANTS),\n/* harmony export */   \"Deferred\": () => (/* binding */ Deferred),\n/* harmony export */   \"ErrorFactory\": () => (/* binding */ ErrorFactory),\n/* harmony export */   \"FirebaseError\": () => (/* binding */ FirebaseError),\n/* harmony export */   \"MAX_VALUE_MILLIS\": () => (/* binding */ MAX_VALUE_MILLIS),\n/* harmony export */   \"RANDOM_FACTOR\": () => (/* binding */ RANDOM_FACTOR),\n/* harmony export */   \"Sha1\": () => (/* binding */ Sha1),\n/* harmony export */   \"areCookiesEnabled\": () => (/* binding */ areCookiesEnabled),\n/* harmony export */   \"assert\": () => (/* binding */ assert),\n/* harmony export */   \"assertionError\": () => (/* binding */ assertionError),\n/* harmony export */   \"async\": () => (/* binding */ async),\n/* harmony export */   \"base64\": () => (/* binding */ base64),\n/* harmony export */   \"base64Decode\": () => (/* binding */ base64Decode),\n/* harmony export */   \"base64Encode\": () => (/* binding */ base64Encode),\n/* harmony export */   \"base64urlEncodeWithoutPadding\": () => (/* binding */ base64urlEncodeWithoutPadding),\n/* harmony export */   \"calculateBackoffMillis\": () => (/* binding */ calculateBackoffMillis),\n/* harmony export */   \"contains\": () => (/* binding */ contains),\n/* harmony export */   \"createMockUserToken\": () => (/* binding */ createMockUserToken),\n/* harmony export */   \"createSubscribe\": () => (/* binding */ createSubscribe),\n/* harmony export */   \"decode\": () => (/* binding */ decode),\n/* harmony export */   \"deepCopy\": () => (/* binding */ deepCopy),\n/* harmony export */   \"deepEqual\": () => (/* binding */ deepEqual),\n/* harmony export */   \"deepExtend\": () => (/* binding */ deepExtend),\n/* harmony export */   \"errorPrefix\": () => (/* binding */ errorPrefix),\n/* harmony export */   \"extractQuerystring\": () => (/* binding */ extractQuerystring),\n/* harmony export */   \"getGlobal\": () => (/* binding */ getGlobal),\n/* harmony export */   \"getModularInstance\": () => (/* binding */ getModularInstance),\n/* harmony export */   \"getUA\": () => (/* binding */ getUA),\n/* harmony export */   \"isAdmin\": () => (/* binding */ isAdmin),\n/* harmony export */   \"isBrowser\": () => (/* binding */ isBrowser),\n/* harmony export */   \"isBrowserExtension\": () => (/* binding */ isBrowserExtension),\n/* harmony export */   \"isElectron\": () => (/* binding */ isElectron),\n/* harmony export */   \"isEmpty\": () => (/* binding */ isEmpty),\n/* harmony export */   \"isIE\": () => (/* binding */ isIE),\n/* harmony export */   \"isIndexedDBAvailable\": () => (/* binding */ isIndexedDBAvailable),\n/* harmony export */   \"isMobileCordova\": () => (/* binding */ isMobileCordova),\n/* harmony export */   \"isNode\": () => (/* binding */ isNode),\n/* harmony export */   \"isNodeSdk\": () => (/* binding */ isNodeSdk),\n/* harmony export */   \"isReactNative\": () => (/* binding */ isReactNative),\n/* harmony export */   \"isSafari\": () => (/* binding */ isSafari),\n/* harmony export */   \"isUWP\": () => (/* binding */ isUWP),\n/* harmony export */   \"isValidFormat\": () => (/* binding */ isValidFormat),\n/* harmony export */   \"isValidTimestamp\": () => (/* binding */ isValidTimestamp),\n/* harmony export */   \"issuedAtTime\": () => (/* binding */ issuedAtTime),\n/* harmony export */   \"jsonEval\": () => (/* binding */ jsonEval),\n/* harmony export */   \"map\": () => (/* binding */ map),\n/* harmony export */   \"ordinal\": () => (/* binding */ ordinal),\n/* harmony export */   \"querystring\": () => (/* binding */ querystring),\n/* harmony export */   \"querystringDecode\": () => (/* binding */ querystringDecode),\n/* harmony export */   \"safeGet\": () => (/* binding */ safeGet),\n/* harmony export */   \"stringLength\": () => (/* binding */ stringLength),\n/* harmony export */   \"stringToByteArray\": () => (/* binding */ stringToByteArray),\n/* harmony export */   \"stringify\": () => (/* binding */ stringify),\n/* harmony export */   \"validateArgCount\": () => (/* binding */ validateArgCount),\n/* harmony export */   \"validateCallback\": () => (/* binding */ validateCallback),\n/* harmony export */   \"validateContextObject\": () => (/* binding */ validateContextObject),\n/* harmony export */   \"validateIndexedDBOpenable\": () => (/* binding */ validateIndexedDBOpenable),\n/* harmony export */   \"validateNamespace\": () => (/* binding */ validateNamespace)\n/* harmony export */ });\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\r\nconst CONSTANTS = {\r\n    /**\r\n     * @define {boolean} Whether this is the client Node.js SDK.\r\n     */\r\n    NODE_CLIENT: false,\r\n    /**\r\n     * @define {boolean} Whether this is the Admin Node.js SDK.\r\n     */\r\n    NODE_ADMIN: false,\r\n    /**\r\n     * Firebase SDK Version\r\n     */\r\n    SDK_VERSION: '${JSCORE_VERSION}'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws an error if the provided assertion is falsy\r\n */\r\nconst assert = function (assertion, message) {\r\n    if (!assertion) {\r\n        throw assertionError(message);\r\n    }\r\n};\r\n/**\r\n * Returns an Error object suitable for throwing.\r\n */\r\nconst assertionError = function (message) {\r\n    return new Error('Firebase Database (' +\r\n        CONSTANTS.SDK_VERSION +\r\n        ') INTERNAL ASSERT FAILED: ' +\r\n        message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst stringToByteArray$1 = function (str) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if ((c & 0xfc00) === 0xd800 &&\r\n            i + 1 < str.length &&\r\n            (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\r\n            // Surrogate Pair\r\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param bytes Array of numbers representing characters.\r\n * @return Stringification of the array.\r\n */\r\nconst byteArrayToString = function (bytes) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let pos = 0, c = 0;\r\n    while (pos < bytes.length) {\r\n        const c1 = bytes[pos++];\r\n        if (c1 < 128) {\r\n            out[c++] = String.fromCharCode(c1);\r\n        }\r\n        else if (c1 > 191 && c1 < 224) {\r\n            const c2 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n        }\r\n        else if (c1 > 239 && c1 < 365) {\r\n            // Surrogate Pair\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            const c4 = bytes[pos++];\r\n            const u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\r\n                0x10000;\r\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n        }\r\n        else {\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        }\r\n    }\r\n    return out.join('');\r\n};\r\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\r\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\r\n// Static lookup maps, lazily populated by init_()\r\nconst base64 = {\r\n    /**\r\n     * Maps bytes to characters.\r\n     */\r\n    byteToCharMap_: null,\r\n    /**\r\n     * Maps characters to bytes.\r\n     */\r\n    charToByteMap_: null,\r\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @private\r\n     */\r\n    byteToCharMapWebSafe_: null,\r\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @private\r\n     */\r\n    charToByteMapWebSafe_: null,\r\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     */\r\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\r\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     */\r\n    get ENCODED_VALS() {\r\n        return this.ENCODED_VALS_BASE + '+/=';\r\n    },\r\n    /**\r\n     * Our websafe alphabet.\r\n     */\r\n    get ENCODED_VALS_WEBSAFE() {\r\n        return this.ENCODED_VALS_BASE + '-_.';\r\n    },\r\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     */\r\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\r\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeByteArray(input, webSafe) {\r\n        if (!Array.isArray(input)) {\r\n            throw Error('encodeByteArray takes an array as a parameter');\r\n        }\r\n        this.init_();\r\n        const byteToCharMap = webSafe\r\n            ? this.byteToCharMapWebSafe_\r\n            : this.byteToCharMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length; i += 3) {\r\n            const byte1 = input[i];\r\n            const haveByte2 = i + 1 < input.length;\r\n            const byte2 = haveByte2 ? input[i + 1] : 0;\r\n            const haveByte3 = i + 2 < input.length;\r\n            const byte3 = haveByte3 ? input[i + 2] : 0;\r\n            const outByte1 = byte1 >> 2;\r\n            const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\r\n            let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\r\n            let outByte4 = byte3 & 0x3f;\r\n            if (!haveByte3) {\r\n                outByte4 = 64;\r\n                if (!haveByte2) {\r\n                    outByte3 = 64;\r\n                }\r\n            }\r\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\r\n        }\r\n        return output.join('');\r\n    },\r\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param input A string to encode.\r\n     * @param webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return btoa(input);\r\n        }\r\n        return this.encodeByteArray(stringToByteArray$1(input), webSafe);\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param input to decode.\r\n     * @param webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return string representing the decoded value.\r\n     */\r\n    decodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return atob(input);\r\n        }\r\n        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param input Input to decode.\r\n     * @param webSafe True if we should use the web-safe alphabet.\r\n     * @return bytes representing the decoded value.\r\n     */\r\n    decodeStringToByteArray(input, webSafe) {\r\n        this.init_();\r\n        const charToByteMap = webSafe\r\n            ? this.charToByteMapWebSafe_\r\n            : this.charToByteMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length;) {\r\n            const byte1 = charToByteMap[input.charAt(i++)];\r\n            const haveByte2 = i < input.length;\r\n            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\r\n            ++i;\r\n            const haveByte3 = i < input.length;\r\n            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            const haveByte4 = i < input.length;\r\n            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\r\n                throw Error();\r\n            }\r\n            const outByte1 = (byte1 << 2) | (byte2 >> 4);\r\n            output.push(outByte1);\r\n            if (byte3 !== 64) {\r\n                const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\r\n                output.push(outByte2);\r\n                if (byte4 !== 64) {\r\n                    const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\r\n                    output.push(outByte3);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\r\n    init_() {\r\n        if (!this.byteToCharMap_) {\r\n            this.byteToCharMap_ = {};\r\n            this.charToByteMap_ = {};\r\n            this.byteToCharMapWebSafe_ = {};\r\n            this.charToByteMapWebSafe_ = {};\r\n            // We want quick mappings back and forth, so we precompute two maps.\r\n            for (let i = 0; i < this.ENCODED_VALS.length; i++) {\r\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\r\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\r\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\r\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\r\n                // Be forgiving when decoding and correctly decode both encodings.\r\n                if (i >= this.ENCODED_VALS_BASE.length) {\r\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\r\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * URL-safe base64 encoding\r\n */\r\nconst base64Encode = function (str) {\r\n    const utf8Bytes = stringToByteArray$1(str);\r\n    return base64.encodeByteArray(utf8Bytes, true);\r\n};\r\n/**\r\n * URL-safe base64 encoding (without \".\" padding in the end).\r\n * e.g. Used in JSON Web Token (JWT) parts.\r\n */\r\nconst base64urlEncodeWithoutPadding = function (str) {\r\n    // Use base64url encoding and remove padding in the end (dot characters).\r\n    return base64Encode(str).replace(/\\./g, '');\r\n};\r\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param str To be decoded\r\n * @return Decoded result, if possible\r\n */\r\nconst base64Decode = function (str) {\r\n    try {\r\n        return base64.decodeString(str, true);\r\n    }\r\n    catch (e) {\r\n        console.error('base64Decode failed: ', e);\r\n    }\r\n    return null;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\r\nfunction deepCopy(value) {\r\n    return deepExtend(undefined, value);\r\n}\r\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n *\r\n * Note: we don't merge __proto__ to prevent prototype pollution\r\n */\r\nfunction deepExtend(target, source) {\r\n    if (!(source instanceof Object)) {\r\n        return source;\r\n    }\r\n    switch (source.constructor) {\r\n        case Date:\r\n            // Treat Dates like scalars; if the target date object had any child\r\n            // properties - they will be lost!\r\n            const dateValue = source;\r\n            return new Date(dateValue.getTime());\r\n        case Object:\r\n            if (target === undefined) {\r\n                target = {};\r\n            }\r\n            break;\r\n        case Array:\r\n            // Always copy the array source and overwrite the target.\r\n            target = [];\r\n            break;\r\n        default:\r\n            // Not a plain Object - treat it as a scalar.\r\n            return source;\r\n    }\r\n    for (const prop in source) {\r\n        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\r\n        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\r\n            continue;\r\n        }\r\n        target[prop] = deepExtend(target[prop], source[prop]);\r\n    }\r\n    return target;\r\n}\r\nfunction isValidKey(key) {\r\n    return key !== '__proto__';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Deferred {\r\n    constructor() {\r\n        this.reject = () => { };\r\n        this.resolve = () => { };\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     */\r\n    wrapCallback(callback) {\r\n        return (error, value) => {\r\n            if (error) {\r\n                this.reject(error);\r\n            }\r\n            else {\r\n                this.resolve(value);\r\n            }\r\n            if (typeof callback === 'function') {\r\n                // Attaching noop handler just in case developer wasn't expecting\r\n                // promises\r\n                this.promise.catch(() => { });\r\n                // Some of our callbacks don't expect a value and our own tests\r\n                // assert that the parameter length is 1\r\n                if (callback.length === 1) {\r\n                    callback(error);\r\n                }\r\n                else {\r\n                    callback(error, value);\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction createMockUserToken(token, projectId) {\r\n    if (token.uid) {\r\n        throw new Error('The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.');\r\n    }\r\n    // Unsecured JWTs use \"none\" as the algorithm.\r\n    const header = {\r\n        alg: 'none',\r\n        type: 'JWT'\r\n    };\r\n    const project = projectId || 'demo-project';\r\n    const iat = token.iat || 0;\r\n    const sub = token.sub || token.user_id;\r\n    if (!sub) {\r\n        throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\r\n    }\r\n    const payload = Object.assign({ \r\n        // Set all required fields to decent defaults\r\n        iss: `https://securetoken.google.com/${project}`, aud: project, iat, exp: iat + 3600, auth_time: iat, sub, user_id: sub, firebase: {\r\n            sign_in_provider: 'custom',\r\n            identities: {}\r\n        } }, token);\r\n    // Unsecured JWTs use the empty string as a signature.\r\n    const signature = '';\r\n    return [\r\n        base64urlEncodeWithoutPadding(JSON.stringify(header)),\r\n        base64urlEncodeWithoutPadding(JSON.stringify(payload)),\r\n        signature\r\n    ].join('.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return user agent string\r\n */\r\nfunction getUA() {\r\n    if (typeof navigator !== 'undefined' &&\r\n        typeof navigator['userAgent'] === 'string') {\r\n        return navigator['userAgent'];\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n}\r\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\r\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\r\n * wait for a callback.\r\n */\r\nfunction isMobileCordova() {\r\n    return (typeof window !== 'undefined' &&\r\n        // @ts-ignore Setting up an broadly applicable index signature for Window\r\n        // just to deal with this case would probably be a bad idea.\r\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\r\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));\r\n}\r\n/**\r\n * Detect Node.js.\r\n *\r\n * @return true if Node.js environment is detected.\r\n */\r\n// Node detection logic from: https://github.com/iliakan/detect-node/\r\nfunction isNode() {\r\n    try {\r\n        return (Object.prototype.toString.call(__webpack_require__.g.process) === '[object process]');\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Detect Browser Environment\r\n */\r\nfunction isBrowser() {\r\n    return typeof self === 'object' && self.self === self;\r\n}\r\nfunction isBrowserExtension() {\r\n    const runtime = typeof chrome === 'object'\r\n        ? chrome.runtime\r\n        : typeof browser === 'object'\r\n            ? browser.runtime\r\n            : undefined;\r\n    return typeof runtime === 'object' && runtime.id !== undefined;\r\n}\r\n/**\r\n * Detect React Native.\r\n *\r\n * @return true if ReactNative environment is detected.\r\n */\r\nfunction isReactNative() {\r\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\r\n}\r\n/** Detects Electron apps. */\r\nfunction isElectron() {\r\n    return getUA().indexOf('Electron/') >= 0;\r\n}\r\n/** Detects Internet Explorer. */\r\nfunction isIE() {\r\n    const ua = getUA();\r\n    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\r\n}\r\n/** Detects Universal Windows Platform apps. */\r\nfunction isUWP() {\r\n    return getUA().indexOf('MSAppHost/') >= 0;\r\n}\r\n/**\r\n * Detect whether the current SDK build is the Node version.\r\n *\r\n * @return true if it's the Node SDK build.\r\n */\r\nfunction isNodeSdk() {\r\n    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\r\n}\r\n/** Returns true if we are running in Safari. */\r\nfunction isSafari() {\r\n    return (!isNode() &&\r\n        navigator.userAgent.includes('Safari') &&\r\n        !navigator.userAgent.includes('Chrome'));\r\n}\r\n/**\r\n * This method checks if indexedDB is supported by current browser/service worker context\r\n * @return true if indexedDB is supported by current browser/service worker context\r\n */\r\nfunction isIndexedDBAvailable() {\r\n    return typeof indexedDB === 'object';\r\n}\r\n/**\r\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\r\n * if errors occur during the database open operation.\r\n *\r\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\r\n * private browsing)\r\n */\r\nfunction validateIndexedDBOpenable() {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            let preExist = true;\r\n            const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';\r\n            const request = self.indexedDB.open(DB_CHECK_NAME);\r\n            request.onsuccess = () => {\r\n                request.result.close();\r\n                // delete database only when it doesn't pre-exist\r\n                if (!preExist) {\r\n                    self.indexedDB.deleteDatabase(DB_CHECK_NAME);\r\n                }\r\n                resolve(true);\r\n            };\r\n            request.onupgradeneeded = () => {\r\n                preExist = false;\r\n            };\r\n            request.onerror = () => {\r\n                var _a;\r\n                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');\r\n            };\r\n        }\r\n        catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n}\r\n/**\r\n *\r\n * This method checks whether cookie is enabled within current browser\r\n * @return true if cookie is enabled within current browser\r\n */\r\nfunction areCookiesEnabled() {\r\n    if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Polyfill for `globalThis` object.\r\n * @returns the `globalThis` object for the given environment.\r\n */\r\nfunction getGlobal() {\r\n    if (typeof self !== 'undefined') {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        return window;\r\n    }\r\n    if (typeof __webpack_require__.g !== 'undefined') {\r\n        return __webpack_require__.g;\r\n    }\r\n    throw new Error('Unable to locate global object.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Standardized Firebase Error.\r\n *\r\n * Usage:\r\n *\r\n *   // Typescript string literals for type-safe codes\r\n *   type Err =\r\n *     'unknown' |\r\n *     'object-not-found'\r\n *     ;\r\n *\r\n *   // Closure enum for type-safe error codes\r\n *   // at-enum {string}\r\n *   var Err = {\r\n *     UNKNOWN: 'unknown',\r\n *     OBJECT_NOT_FOUND: 'object-not-found',\r\n *   }\r\n *\r\n *   let errors: Map<Err, string> = {\r\n *     'generic-error': \"Unknown error\",\r\n *     'file-not-found': \"Could not find file: {$file}\",\r\n *   };\r\n *\r\n *   // Type-safe function - must pass a valid error code as param.\r\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\r\n *\r\n *   ...\r\n *   throw error.create(Err.GENERIC);\r\n *   ...\r\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\r\n *   ...\r\n *   // Service: Could not file file: foo.txt (service/file-not-found).\r\n *\r\n *   catch (e) {\r\n *     assert(e.message === \"Could not find file: foo.txt.\");\r\n *     if (e.code === 'service/file-not-found') {\r\n *       console.log(\"Could not read file: \" + e['file']);\r\n *     }\r\n *   }\r\n */\r\nconst ERROR_NAME = 'FirebaseError';\r\n// Based on code from:\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\r\nclass FirebaseError extends Error {\r\n    constructor(code, message, customData) {\r\n        super(message);\r\n        this.code = code;\r\n        this.customData = customData;\r\n        this.name = ERROR_NAME;\r\n        // Fix For ES5\r\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, FirebaseError.prototype);\r\n        // Maintains proper stack trace for where our error was thrown.\r\n        // Only available on V8.\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, ErrorFactory.prototype.create);\r\n        }\r\n    }\r\n}\r\nclass ErrorFactory {\r\n    constructor(service, serviceName, errors) {\r\n        this.service = service;\r\n        this.serviceName = serviceName;\r\n        this.errors = errors;\r\n    }\r\n    create(code, ...data) {\r\n        const customData = data[0] || {};\r\n        const fullCode = `${this.service}/${code}`;\r\n        const template = this.errors[code];\r\n        const message = template ? replaceTemplate(template, customData) : 'Error';\r\n        // Service Name: Error message (service/code).\r\n        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\r\n        const error = new FirebaseError(fullCode, fullMessage, customData);\r\n        return error;\r\n    }\r\n}\r\nfunction replaceTemplate(template, data) {\r\n    return template.replace(PATTERN, (_, key) => {\r\n        const value = data[key];\r\n        return value != null ? String(value) : `<${key}?>`;\r\n    });\r\n}\r\nconst PATTERN = /\\{\\$([^}]+)}/g;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\r\nfunction jsonEval(str) {\r\n    return JSON.parse(str);\r\n}\r\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\r\nfunction stringify(data) {\r\n    return JSON.stringify(data);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst decode = function (token) {\r\n    let header = {}, claims = {}, data = {}, signature = '';\r\n    try {\r\n        const parts = token.split('.');\r\n        header = jsonEval(base64Decode(parts[0]) || '');\r\n        claims = jsonEval(base64Decode(parts[1]) || '');\r\n        signature = parts[2];\r\n        data = claims['d'] || {};\r\n        delete claims['d'];\r\n    }\r\n    catch (e) { }\r\n    return {\r\n        header,\r\n        claims,\r\n        data,\r\n        signature\r\n    };\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidTimestamp = function (token) {\r\n    const claims = decode(token).claims;\r\n    const now = Math.floor(new Date().getTime() / 1000);\r\n    let validSince = 0, validUntil = 0;\r\n    if (typeof claims === 'object') {\r\n        if (claims.hasOwnProperty('nbf')) {\r\n            validSince = claims['nbf'];\r\n        }\r\n        else if (claims.hasOwnProperty('iat')) {\r\n            validSince = claims['iat'];\r\n        }\r\n        if (claims.hasOwnProperty('exp')) {\r\n            validUntil = claims['exp'];\r\n        }\r\n        else {\r\n            // token will expire after 24h by default\r\n            validUntil = validSince + 86400;\r\n        }\r\n    }\r\n    return (!!now &&\r\n        !!validSince &&\r\n        !!validUntil &&\r\n        now >= validSince &&\r\n        now <= validUntil);\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst issuedAtTime = function (token) {\r\n    const claims = decode(token).claims;\r\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\r\n        return claims['iat'];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidFormat = function (token) {\r\n    const decoded = decode(token), claims = decoded.claims;\r\n    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\r\n};\r\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isAdmin = function (token) {\r\n    const claims = decode(token).claims;\r\n    return typeof claims === 'object' && claims['admin'] === true;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction contains(obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n}\r\nfunction safeGet(obj, key) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\nfunction isEmpty(obj) {\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction map(obj, fn, contextObj) {\r\n    const res = {};\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            res[key] = fn.call(contextObj, obj[key], key, obj);\r\n        }\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * Deep equal two objects. Support Arrays and Objects.\r\n */\r\nfunction deepEqual(a, b) {\r\n    if (a === b) {\r\n        return true;\r\n    }\r\n    const aKeys = Object.keys(a);\r\n    const bKeys = Object.keys(b);\r\n    for (const k of aKeys) {\r\n        if (!bKeys.includes(k)) {\r\n            return false;\r\n        }\r\n        const aProp = a[k];\r\n        const bProp = b[k];\r\n        if (isObject(aProp) && isObject(bProp)) {\r\n            if (!deepEqual(aProp, bProp)) {\r\n                return false;\r\n            }\r\n        }\r\n        else if (aProp !== bProp) {\r\n            return false;\r\n        }\r\n    }\r\n    for (const k of bKeys) {\r\n        if (!aKeys.includes(k)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isObject(thing) {\r\n    return thing !== null && typeof thing === 'object';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\r\n * params object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n */\r\nfunction querystring(querystringParams) {\r\n    const params = [];\r\n    for (const [key, value] of Object.entries(querystringParams)) {\r\n        if (Array.isArray(value)) {\r\n            value.forEach(arrayVal => {\r\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\r\n            });\r\n        }\r\n        else {\r\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        }\r\n    }\r\n    return params.length ? '&' + params.join('&') : '';\r\n}\r\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\r\n * (e.g. {arg: 'val', arg2: 'val2'})\r\n */\r\nfunction querystringDecode(querystring) {\r\n    const obj = {};\r\n    const tokens = querystring.replace(/^\\?/, '').split('&');\r\n    tokens.forEach(token => {\r\n        if (token) {\r\n            const [key, value] = token.split('=');\r\n            obj[decodeURIComponent(key)] = decodeURIComponent(value);\r\n        }\r\n    });\r\n    return obj;\r\n}\r\n/**\r\n * Extract the query string part of a URL, including the leading question mark (if present).\r\n */\r\nfunction extractQuerystring(url) {\r\n    const queryStart = url.indexOf('?');\r\n    if (!queryStart) {\r\n        return '';\r\n    }\r\n    const fragmentStart = url.indexOf('#', queryStart);\r\n    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\r\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @final\r\n * @struct\r\n */\r\nclass Sha1 {\r\n    constructor() {\r\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @private\r\n         */\r\n        this.chain_ = [];\r\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @private\r\n         */\r\n        this.buf_ = [];\r\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @private\r\n         */\r\n        this.W_ = [];\r\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @private\r\n         */\r\n        this.pad_ = [];\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.inbuf_ = 0;\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.total_ = 0;\r\n        this.blockSize = 512 / 8;\r\n        this.pad_[0] = 128;\r\n        for (let i = 1; i < this.blockSize; ++i) {\r\n            this.pad_[i] = 0;\r\n        }\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.chain_[0] = 0x67452301;\r\n        this.chain_[1] = 0xefcdab89;\r\n        this.chain_[2] = 0x98badcfe;\r\n        this.chain_[3] = 0x10325476;\r\n        this.chain_[4] = 0xc3d2e1f0;\r\n        this.inbuf_ = 0;\r\n        this.total_ = 0;\r\n    }\r\n    /**\r\n     * Internal compress helper function.\r\n     * @param buf Block to compress.\r\n     * @param offset Offset of the block in the buffer.\r\n     * @private\r\n     */\r\n    compress_(buf, offset) {\r\n        if (!offset) {\r\n            offset = 0;\r\n        }\r\n        const W = this.W_;\r\n        // get 16 big endian words\r\n        if (typeof buf === 'string') {\r\n            for (let i = 0; i < 16; i++) {\r\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\r\n                // have a bug that turns the post-increment ++ operator into pre-increment\r\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\r\n                // correctness and which is affected by this bug, so I've removed all uses\r\n                // of post-increment ++ in which the result value is used.  We can revert\r\n                // this change once the Safari bug\r\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\r\n                // most clients have been updated.\r\n                W[i] =\r\n                    (buf.charCodeAt(offset) << 24) |\r\n                        (buf.charCodeAt(offset + 1) << 16) |\r\n                        (buf.charCodeAt(offset + 2) << 8) |\r\n                        buf.charCodeAt(offset + 3);\r\n                offset += 4;\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < 16; i++) {\r\n                W[i] =\r\n                    (buf[offset] << 24) |\r\n                        (buf[offset + 1] << 16) |\r\n                        (buf[offset + 2] << 8) |\r\n                        buf[offset + 3];\r\n                offset += 4;\r\n            }\r\n        }\r\n        // expand to 80 words\r\n        for (let i = 16; i < 80; i++) {\r\n            const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\r\n        }\r\n        let a = this.chain_[0];\r\n        let b = this.chain_[1];\r\n        let c = this.chain_[2];\r\n        let d = this.chain_[3];\r\n        let e = this.chain_[4];\r\n        let f, k;\r\n        // TODO(user): Try to unroll this loop to speed up the computation.\r\n        for (let i = 0; i < 80; i++) {\r\n            if (i < 40) {\r\n                if (i < 20) {\r\n                    f = d ^ (b & (c ^ d));\r\n                    k = 0x5a827999;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0x6ed9eba1;\r\n                }\r\n            }\r\n            else {\r\n                if (i < 60) {\r\n                    f = (b & c) | (d & (b | c));\r\n                    k = 0x8f1bbcdc;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0xca62c1d6;\r\n                }\r\n            }\r\n            const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\r\n            b = a;\r\n            a = t;\r\n        }\r\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\r\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\r\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\r\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\r\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\r\n    }\r\n    update(bytes, length) {\r\n        // TODO(johnlenz): tighten the function signature and remove this check\r\n        if (bytes == null) {\r\n            return;\r\n        }\r\n        if (length === undefined) {\r\n            length = bytes.length;\r\n        }\r\n        const lengthMinusBlock = length - this.blockSize;\r\n        let n = 0;\r\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\r\n        const buf = this.buf_;\r\n        let inbuf = this.inbuf_;\r\n        // The outer while loop should execute at most twice.\r\n        while (n < length) {\r\n            // When we have no data in the block to top up, we can directly process the\r\n            // input buffer (assuming it contains sufficient data). This gives ~25%\r\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\r\n            // the data is provided in large chunks (or in multiples of 64 bytes).\r\n            if (inbuf === 0) {\r\n                while (n <= lengthMinusBlock) {\r\n                    this.compress_(bytes, n);\r\n                    n += this.blockSize;\r\n                }\r\n            }\r\n            if (typeof bytes === 'string') {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes.charCodeAt(n);\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes[n];\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.inbuf_ = inbuf;\r\n        this.total_ += length;\r\n    }\r\n    /** @override */\r\n    digest() {\r\n        const digest = [];\r\n        let totalBits = this.total_ * 8;\r\n        // Add pad 0x80 0x00*.\r\n        if (this.inbuf_ < 56) {\r\n            this.update(this.pad_, 56 - this.inbuf_);\r\n        }\r\n        else {\r\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\r\n        }\r\n        // Add # bits.\r\n        for (let i = this.blockSize - 1; i >= 56; i--) {\r\n            this.buf_[i] = totalBits & 255;\r\n            totalBits /= 256; // Don't use bit-shifting here!\r\n        }\r\n        this.compress_(this.buf_);\r\n        let n = 0;\r\n        for (let i = 0; i < 5; i++) {\r\n            for (let j = 24; j >= 0; j -= 8) {\r\n                digest[n] = (this.chain_[i] >> j) & 255;\r\n                ++n;\r\n            }\r\n        }\r\n        return digest;\r\n    }\r\n}\n\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\r\nfunction createSubscribe(executor, onNoObservers) {\r\n    const proxy = new ObserverProxy(executor, onNoObservers);\r\n    return proxy.subscribe.bind(proxy);\r\n}\r\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */\r\nclass ObserverProxy {\r\n    /**\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    constructor(executor, onNoObservers) {\r\n        this.observers = [];\r\n        this.unsubscribes = [];\r\n        this.observerCount = 0;\r\n        // Micro-task scheduling by calling task.then().\r\n        this.task = Promise.resolve();\r\n        this.finalized = false;\r\n        this.onNoObservers = onNoObservers;\r\n        // Call the executor asynchronously so subscribers that are called\r\n        // synchronously after the creation of the subscribe function\r\n        // can still receive the very first value generated in the executor.\r\n        this.task\r\n            .then(() => {\r\n            executor(this);\r\n        })\r\n            .catch(e => {\r\n            this.error(e);\r\n        });\r\n    }\r\n    next(value) {\r\n        this.forEachObserver((observer) => {\r\n            observer.next(value);\r\n        });\r\n    }\r\n    error(error) {\r\n        this.forEachObserver((observer) => {\r\n            observer.error(error);\r\n        });\r\n        this.close(error);\r\n    }\r\n    complete() {\r\n        this.forEachObserver((observer) => {\r\n            observer.complete();\r\n        });\r\n        this.close();\r\n    }\r\n    /**\r\n     * Subscribe function that can be used to add an Observer to the fan-out list.\r\n     *\r\n     * - We require that no event is sent to a subscriber sychronously to their\r\n     *   call to subscribe().\r\n     */\r\n    subscribe(nextOrObserver, error, complete) {\r\n        let observer;\r\n        if (nextOrObserver === undefined &&\r\n            error === undefined &&\r\n            complete === undefined) {\r\n            throw new Error('Missing Observer.');\r\n        }\r\n        // Assemble an Observer object when passed as callback functions.\r\n        if (implementsAnyMethods(nextOrObserver, [\r\n            'next',\r\n            'error',\r\n            'complete'\r\n        ])) {\r\n            observer = nextOrObserver;\r\n        }\r\n        else {\r\n            observer = {\r\n                next: nextOrObserver,\r\n                error,\r\n                complete\r\n            };\r\n        }\r\n        if (observer.next === undefined) {\r\n            observer.next = noop;\r\n        }\r\n        if (observer.error === undefined) {\r\n            observer.error = noop;\r\n        }\r\n        if (observer.complete === undefined) {\r\n            observer.complete = noop;\r\n        }\r\n        const unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n        // Attempt to subscribe to a terminated Observable - we\r\n        // just respond to the Observer with the final error or complete\r\n        // event.\r\n        if (this.finalized) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this.task.then(() => {\r\n                try {\r\n                    if (this.finalError) {\r\n                        observer.error(this.finalError);\r\n                    }\r\n                    else {\r\n                        observer.complete();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // nothing\r\n                }\r\n                return;\r\n            });\r\n        }\r\n        this.observers.push(observer);\r\n        return unsub;\r\n    }\r\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n    // any unsubscribed Observer.\r\n    unsubscribeOne(i) {\r\n        if (this.observers === undefined || this.observers[i] === undefined) {\r\n            return;\r\n        }\r\n        delete this.observers[i];\r\n        this.observerCount -= 1;\r\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n            this.onNoObservers(this);\r\n        }\r\n    }\r\n    forEachObserver(fn) {\r\n        if (this.finalized) {\r\n            // Already closed by previous event....just eat the additional values.\r\n            return;\r\n        }\r\n        // Since sendOne calls asynchronously - there is no chance that\r\n        // this.observers will become undefined.\r\n        for (let i = 0; i < this.observers.length; i++) {\r\n            this.sendOne(i, fn);\r\n        }\r\n    }\r\n    // Call the Observer via one of it's callback function. We are careful to\r\n    // confirm that the observe has not been unsubscribed since this asynchronous\r\n    // function had been queued.\r\n    sendOne(i, fn) {\r\n        // Execute the callback asynchronously\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            if (this.observers !== undefined && this.observers[i] !== undefined) {\r\n                try {\r\n                    fn(this.observers[i]);\r\n                }\r\n                catch (e) {\r\n                    // Ignore exceptions raised in Observers or missing methods of an\r\n                    // Observer.\r\n                    // Log error to console. b/31404806\r\n                    if (typeof console !== 'undefined' && console.error) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    close(err) {\r\n        if (this.finalized) {\r\n            return;\r\n        }\r\n        this.finalized = true;\r\n        if (err !== undefined) {\r\n            this.finalError = err;\r\n        }\r\n        // Proxy is no longer needed - garbage collect references\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            this.observers = undefined;\r\n            this.onNoObservers = undefined;\r\n        });\r\n    }\r\n}\r\n/** Turn synchronous function into one called asynchronously. */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(fn, onError) {\r\n    return (...args) => {\r\n        Promise.resolve(true)\r\n            .then(() => {\r\n            fn(...args);\r\n        })\r\n            .catch((error) => {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n        });\r\n    };\r\n}\r\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    for (const method of methods) {\r\n        if (method in obj && typeof obj[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction noop() {\r\n    // do nothing\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param fnName The function name\r\n * @param minCount The minimum number of arguments to allow for the function call\r\n * @param maxCount The maximum number of argument to allow for the function call\r\n * @param argCount The actual number of arguments provided.\r\n */\r\nconst validateArgCount = function (fnName, minCount, maxCount, argCount) {\r\n    let argError;\r\n    if (argCount < minCount) {\r\n        argError = 'at least ' + minCount;\r\n    }\r\n    else if (argCount > maxCount) {\r\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\r\n    }\r\n    if (argError) {\r\n        const error = fnName +\r\n            ' failed: Was called with ' +\r\n            argCount +\r\n            (argCount === 1 ? ' argument.' : ' arguments.') +\r\n            ' Expects ' +\r\n            argError +\r\n            '.';\r\n        throw new Error(error);\r\n    }\r\n};\r\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param fnName The function name\r\n * @param argName The name of the argument\r\n * @return The prefix to add to the error thrown for validation.\r\n */\r\nfunction errorPrefix(fnName, argName) {\r\n    return `${fnName} failed: ${argName} argument `;\r\n}\r\n/**\r\n * @param fnName\r\n * @param argumentNumber\r\n * @param namespace\r\n * @param optional\r\n */\r\nfunction validateNamespace(fnName, namespace, optional) {\r\n    if (optional && !namespace) {\r\n        return;\r\n    }\r\n    if (typeof namespace !== 'string') {\r\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\r\n        throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');\r\n    }\r\n}\r\nfunction validateCallback(fnName, argumentName, \r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\ncallback, optional) {\r\n    if (optional && !callback) {\r\n        return;\r\n    }\r\n    if (typeof callback !== 'function') {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');\r\n    }\r\n}\r\nfunction validateContextObject(fnName, argumentName, context, optional) {\r\n    if (optional && !context) {\r\n        return;\r\n    }\r\n    if (typeof context !== 'object' || context === null) {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\r\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\r\n// so it's been modified.\r\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\r\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\r\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\r\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\r\n// pair).\r\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\r\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\r\nconst stringToByteArray = function (str) {\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        // Is this the lead surrogate in a surrogate pair?\r\n        if (c >= 0xd800 && c <= 0xdbff) {\r\n            const high = c - 0xd800; // the high 10 bits.\r\n            i++;\r\n            assert(i < str.length, 'Surrogate pair missing trail surrogate.');\r\n            const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\r\n            c = 0x10000 + (high << 10) + low;\r\n        }\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if (c < 65536) {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nconst stringLength = function (str) {\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        const c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            p++;\r\n        }\r\n        else if (c < 2048) {\r\n            p += 2;\r\n        }\r\n        else if (c >= 0xd800 && c <= 0xdbff) {\r\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\r\n            p += 4;\r\n            i++; // skip trail surrogate.\r\n        }\r\n        else {\r\n            p += 3;\r\n        }\r\n    }\r\n    return p;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The amount of milliseconds to exponentially increase.\r\n */\r\nconst DEFAULT_INTERVAL_MILLIS = 1000;\r\n/**\r\n * The factor to backoff by.\r\n * Should be a number greater than 1.\r\n */\r\nconst DEFAULT_BACKOFF_FACTOR = 2;\r\n/**\r\n * The maximum milliseconds to increase to.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\r\n/**\r\n * The percentage of backoff time to randomize by.\r\n * See\r\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\r\n * for context.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst RANDOM_FACTOR = 0.5;\r\n/**\r\n * Based on the backoff method from\r\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\r\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\r\n */\r\nfunction calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {\r\n    // Calculates an exponentially increasing value.\r\n    // Deviation: calculates value from count and a constant interval, so we only need to save value\r\n    // and count to restore state.\r\n    const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\r\n    // A random \"fuzz\" to avoid waves of retries.\r\n    // Deviation: randomFactor is required.\r\n    const randomWait = Math.round(\r\n    // A fraction of the backoff value to add/subtract.\r\n    // Deviation: changes multiplication order to improve readability.\r\n    RANDOM_FACTOR *\r\n        currBaseValue *\r\n        // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\r\n        // if we add or subtract.\r\n        (Math.random() - 0.5) *\r\n        2);\r\n    // Limits backoff to max to avoid effectively permanent backoff.\r\n    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provide English ordinal letters after a number\r\n */\r\nfunction ordinal(i) {\r\n    if (!Number.isFinite(i)) {\r\n        return `${i}`;\r\n    }\r\n    return i + indicator(i);\r\n}\r\nfunction indicator(i) {\r\n    i = Math.abs(i);\r\n    const cent = i % 100;\r\n    if (cent >= 10 && cent <= 20) {\r\n        return 'th';\r\n    }\r\n    const dec = i % 10;\r\n    if (dec === 1) {\r\n        return 'st';\r\n    }\r\n    if (dec === 2) {\r\n        return 'nd';\r\n    }\r\n    if (dec === 3) {\r\n        return 'rd';\r\n    }\r\n    return 'th';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getModularInstance(service) {\r\n    if (service && service._delegate) {\r\n        return service._delegate;\r\n    }\r\n    else {\r\n        return service;\r\n    }\r\n}\n\n\n//# sourceMappingURL=index.esm2017.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@firebase/util/dist/index.esm2017.js\n");

/***/ }),

/***/ "./node_modules/@ionic-native/bluetooth-serial/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@ionic-native/bluetooth-serial/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BluetoothSerial\": () => (/* binding */ BluetoothSerial)\n/* harmony export */ });\n/* harmony import */ var _ionic_native_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ionic-native/core */ \"./node_modules/@ionic-native/core/index.js\");\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module 'rxjs'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\nvar BluetoothSerialOriginal = /** @class */ (function (_super) {\n    __extends(BluetoothSerialOriginal, _super);\n    function BluetoothSerialOriginal() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    BluetoothSerialOriginal.prototype.connect = function (macAddress_or_uuid) { return (0,_ionic_native_core__WEBPACK_IMPORTED_MODULE_0__.cordova)(this, \"connect\", { \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"], \"observable\": true, \"clearFunction\": \"disconnect\" }, arguments); };\n    BluetoothSerialOriginal.prototype.connectInsecure = function (macAddress) { return (0,_ionic_native_core__WEBPACK_IMPORTED_MODULE_0__.cordova)(this, \"connectInsecure\", { \"platforms\": [\"Android\"], \"observable\": true, \"clearFunction\": \"disconnect\" }, arguments); };\n    BluetoothSerialOriginal.prototype.disconnect = function () { return (0,_ionic_native_core__WEBPACK_IMPORTED_MODULE_0__.cordova)(this, \"disconnect\", {}, arguments); };\n    BluetoothSerialOriginal.prototype.write = function (data) { return (0,_ionic_native_core__WEBPACK_IMPORTED_MODULE_0__.cordova)(this, \"write\", { \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"] }, arguments); };\n    BluetoothSerialOriginal.prototype.available = function () { return (0,_ionic_native_core__WEBPACK_IMPORTED_MODULE_0__.cordova)(this, \"available\", { \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"] }, arguments); };\n    BluetoothSerialOriginal.prototype.read = function () { return (0,_ionic_native_core__WEBPACK_IMPORTED_MODULE_0__.cordova)(this, \"read\", { \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"] }, arguments); };\n    BluetoothSerialOriginal.prototype.readUntil = function (delimiter) { return (0,_ionic_native_core__WEBPACK_IMPORTED_MODULE_0__.cordova)(this, \"readUntil\", { \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"] }, arguments); };\n    BluetoothSerialOriginal.prototype.subscribe = function (delimiter) { return (0,_ionic_native_core__WEBPACK_IMPORTED_MODULE_0__.cordova)(this, \"subscribe\", { \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"], \"observable\": true, \"clearFunction\": \"unsubscribe\" }, arguments); };\n    BluetoothSerialOriginal.prototype.subscribeRawData = function () { return (0,_ionic_native_core__WEBPACK_IMPORTED_MODULE_0__.cordova)(this, \"subscribeRawData\", { \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"], \"observable\": true, \"clearFunction\": \"unsubscribeRawData\" }, arguments); };\n    BluetoothSerialOriginal.prototype.clear = function () { return (0,_ionic_native_core__WEBPACK_IMPORTED_MODULE_0__.cordova)(this, \"clear\", { \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"] }, arguments); };\n    BluetoothSerialOriginal.prototype.list = function () { return (0,_ionic_native_core__WEBPACK_IMPORTED_MODULE_0__.cordova)(this, \"list\", { \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"] }, arguments); };\n    BluetoothSerialOriginal.prototype.isEnabled = function () { return (0,_ionic_native_core__WEBPACK_IMPORTED_MODULE_0__.cordova)(this, \"isEnabled\", { \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"] }, arguments); };\n    BluetoothSerialOriginal.prototype.isConnected = function () { return (0,_ionic_native_core__WEBPACK_IMPORTED_MODULE_0__.cordova)(this, \"isConnected\", { \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"] }, arguments); };\n    BluetoothSerialOriginal.prototype.readRSSI = function () { return (0,_ionic_native_core__WEBPACK_IMPORTED_MODULE_0__.cordova)(this, \"readRSSI\", { \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"] }, arguments); };\n    BluetoothSerialOriginal.prototype.showBluetoothSettings = function () { return (0,_ionic_native_core__WEBPACK_IMPORTED_MODULE_0__.cordova)(this, \"showBluetoothSettings\", { \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"] }, arguments); };\n    BluetoothSerialOriginal.prototype.enable = function () { return (0,_ionic_native_core__WEBPACK_IMPORTED_MODULE_0__.cordova)(this, \"enable\", { \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"] }, arguments); };\n    BluetoothSerialOriginal.prototype.discoverUnpaired = function () { return (0,_ionic_native_core__WEBPACK_IMPORTED_MODULE_0__.cordova)(this, \"discoverUnpaired\", { \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"] }, arguments); };\n    BluetoothSerialOriginal.prototype.setDeviceDiscoveredListener = function () { return (0,_ionic_native_core__WEBPACK_IMPORTED_MODULE_0__.cordova)(this, \"setDeviceDiscoveredListener\", { \"platforms\": [\"Android\", \"iOS\", \"Windows Phone\"], \"observable\": true, \"clearFunction\": \"clearDeviceDiscoveredListener\" }, arguments); };\n    BluetoothSerialOriginal.prototype.setName = function (newName) { return (0,_ionic_native_core__WEBPACK_IMPORTED_MODULE_0__.cordova)(this, \"setName\", { \"platforms\": [\"Android\"], \"sync\": true }, arguments); };\n    BluetoothSerialOriginal.prototype.setDiscoverable = function (discoverableDuration) { return (0,_ionic_native_core__WEBPACK_IMPORTED_MODULE_0__.cordova)(this, \"setDiscoverable\", { \"platforms\": [\"Android\"], \"sync\": true }, arguments); };\n    BluetoothSerialOriginal.pluginName = \"BluetoothSerial\";\n    BluetoothSerialOriginal.repo = \"https://github.com/don/BluetoothSerial\";\n    BluetoothSerialOriginal.plugin = \"cordova-plugin-bluetooth-serial\";\n    BluetoothSerialOriginal.pluginRef = \"bluetoothSerial\";\n    BluetoothSerialOriginal.platforms = [\"Android\", \"iOS\", \"Windows Phone 8\"];\n    return BluetoothSerialOriginal;\n}(_ionic_native_core__WEBPACK_IMPORTED_MODULE_0__.IonicNativePlugin));\nvar BluetoothSerial = new BluetoothSerialOriginal();\n\n//# sourceMappingURL=data:application/json;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@ionic-native/bluetooth-serial/index.js\n");

/***/ }),

/***/ "./node_modules/@ionic-native/core/bootstrap.js":
/*!******************************************************!*\
  !*** ./node_modules/@ionic-native/core/bootstrap.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"checkReady\": () => (/* binding */ checkReady)\n/* harmony export */ });\nfunction checkReady() {\n    if (typeof process === 'undefined') {\n        var win_1 = typeof window !== 'undefined' ? window : {};\n        var DEVICE_READY_TIMEOUT_1 = 5000;\n        // To help developers using cordova, we listen for the device ready event and\n        // log an error if it didn't fire in a reasonable amount of time. Generally,\n        // when this happens, developers should remove and reinstall plugins, since\n        // an inconsistent plugin is often the culprit.\n        var before_1 = Date.now();\n        var didFireReady_1 = false;\n        win_1.document.addEventListener('deviceready', function () {\n            console.log(\"Ionic Native: deviceready event fired after \" + (Date.now() - before_1) + \" ms\");\n            didFireReady_1 = true;\n        });\n        setTimeout(function () {\n            if (!didFireReady_1 && win_1.cordova) {\n                console.warn(\"Ionic Native: deviceready did not fire within \" + DEVICE_READY_TIMEOUT_1 + \"ms. This can happen when plugins are in an inconsistent state. Try removing plugins from plugins/ and reinstalling them.\");\n            }\n        }, DEVICE_READY_TIMEOUT_1);\n    }\n}\n//# sourceMappingURL=bootstrap.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGlvbmljLW5hdGl2ZS9jb3JlL2Jvb3RzdHJhcC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL0Bpb25pYy1uYXRpdmUvY29yZS9ib290c3RyYXAuanM/MWNmMSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gY2hlY2tSZWFkeSgpIHtcbiAgICBpZiAodHlwZW9mIHByb2Nlc3MgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciB3aW5fMSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDoge307XG4gICAgICAgIHZhciBERVZJQ0VfUkVBRFlfVElNRU9VVF8xID0gNTAwMDtcbiAgICAgICAgLy8gVG8gaGVscCBkZXZlbG9wZXJzIHVzaW5nIGNvcmRvdmEsIHdlIGxpc3RlbiBmb3IgdGhlIGRldmljZSByZWFkeSBldmVudCBhbmRcbiAgICAgICAgLy8gbG9nIGFuIGVycm9yIGlmIGl0IGRpZG4ndCBmaXJlIGluIGEgcmVhc29uYWJsZSBhbW91bnQgb2YgdGltZS4gR2VuZXJhbGx5LFxuICAgICAgICAvLyB3aGVuIHRoaXMgaGFwcGVucywgZGV2ZWxvcGVycyBzaG91bGQgcmVtb3ZlIGFuZCByZWluc3RhbGwgcGx1Z2lucywgc2luY2VcbiAgICAgICAgLy8gYW4gaW5jb25zaXN0ZW50IHBsdWdpbiBpcyBvZnRlbiB0aGUgY3VscHJpdC5cbiAgICAgICAgdmFyIGJlZm9yZV8xID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdmFyIGRpZEZpcmVSZWFkeV8xID0gZmFsc2U7XG4gICAgICAgIHdpbl8xLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RldmljZXJlYWR5JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJJb25pYyBOYXRpdmU6IGRldmljZXJlYWR5IGV2ZW50IGZpcmVkIGFmdGVyIFwiICsgKERhdGUubm93KCkgLSBiZWZvcmVfMSkgKyBcIiBtc1wiKTtcbiAgICAgICAgICAgIGRpZEZpcmVSZWFkeV8xID0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFkaWRGaXJlUmVhZHlfMSAmJiB3aW5fMS5jb3Jkb3ZhKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiSW9uaWMgTmF0aXZlOiBkZXZpY2VyZWFkeSBkaWQgbm90IGZpcmUgd2l0aGluIFwiICsgREVWSUNFX1JFQURZX1RJTUVPVVRfMSArIFwibXMuIFRoaXMgY2FuIGhhcHBlbiB3aGVuIHBsdWdpbnMgYXJlIGluIGFuIGluY29uc2lzdGVudCBzdGF0ZS4gVHJ5IHJlbW92aW5nIHBsdWdpbnMgZnJvbSBwbHVnaW5zLyBhbmQgcmVpbnN0YWxsaW5nIHRoZW0uXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBERVZJQ0VfUkVBRFlfVElNRU9VVF8xKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ib290c3RyYXAuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@ionic-native/core/bootstrap.js\n");

/***/ }),

/***/ "./node_modules/@ionic-native/core/decorators/common.js":
/*!**************************************************************!*\
  !*** ./node_modules/@ionic-native/core/decorators/common.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ERR_CORDOVA_NOT_AVAILABLE\": () => (/* binding */ ERR_CORDOVA_NOT_AVAILABLE),\n/* harmony export */   \"ERR_PLUGIN_NOT_INSTALLED\": () => (/* binding */ ERR_PLUGIN_NOT_INSTALLED),\n/* harmony export */   \"getPromise\": () => (/* binding */ getPromise),\n/* harmony export */   \"wrapPromise\": () => (/* binding */ wrapPromise),\n/* harmony export */   \"checkAvailability\": () => (/* binding */ checkAvailability),\n/* harmony export */   \"instanceAvailability\": () => (/* binding */ instanceAvailability),\n/* harmony export */   \"setIndex\": () => (/* binding */ setIndex),\n/* harmony export */   \"callCordovaPlugin\": () => (/* binding */ callCordovaPlugin),\n/* harmony export */   \"callInstance\": () => (/* binding */ callInstance),\n/* harmony export */   \"getPlugin\": () => (/* binding */ getPlugin),\n/* harmony export */   \"get\": () => (/* binding */ get),\n/* harmony export */   \"pluginWarn\": () => (/* binding */ pluginWarn),\n/* harmony export */   \"cordovaWarn\": () => (/* binding */ cordovaWarn),\n/* harmony export */   \"wrap\": () => (/* binding */ wrap),\n/* harmony export */   \"wrapInstance\": () => (/* binding */ wrapInstance)\n/* harmony export */ });\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module 'rxjs'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n\nvar ERR_CORDOVA_NOT_AVAILABLE = { error: 'cordova_not_available' };\nvar ERR_PLUGIN_NOT_INSTALLED = { error: 'plugin_not_installed' };\nfunction getPromise(callback) {\n    var tryNativePromise = function () {\n        if (Promise) {\n            return new Promise(function (resolve, reject) {\n                callback(resolve, reject);\n            });\n        }\n        else {\n            console.error('No Promise support or polyfill found. To enable Ionic Native support, please add the es6-promise polyfill before this script, or run with a library like Angular or on a recent browser.');\n        }\n    };\n    if (typeof window !== 'undefined' && window.angular) {\n        var doc = window.document;\n        var injector = window.angular.element(doc.querySelector('[ng-app]') || doc.body).injector();\n        if (injector) {\n            var $q = injector.get('$q');\n            return $q(function (resolve, reject) {\n                callback(resolve, reject);\n            });\n        }\n        console.warn(\"Angular 1 was detected but $q couldn't be retrieved. This is usually when the app is not bootstrapped on the html or body tag. Falling back to native promises which won't trigger an automatic digest when promises resolve.\");\n    }\n    return tryNativePromise();\n}\nfunction wrapPromise(pluginObj, methodName, args, opts) {\n    if (opts === void 0) { opts = {}; }\n    var pluginResult, rej;\n    var p = getPromise(function (resolve, reject) {\n        if (opts.destruct) {\n            pluginResult = callCordovaPlugin(pluginObj, methodName, args, opts, function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                return resolve(args);\n            }, function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                return reject(args);\n            });\n        }\n        else {\n            pluginResult = callCordovaPlugin(pluginObj, methodName, args, opts, resolve, reject);\n        }\n        rej = reject;\n    });\n    // Angular throws an error on unhandled rejection, but in this case we have already printed\n    // a warning that Cordova is undefined or the plugin is uninstalled, so there is no reason\n    // to error\n    if (pluginResult && pluginResult.error) {\n        p.catch(function () { });\n        typeof rej === 'function' && rej(pluginResult.error);\n    }\n    return p;\n}\nfunction wrapOtherPromise(pluginObj, methodName, args, opts) {\n    if (opts === void 0) { opts = {}; }\n    return getPromise(function (resolve, reject) {\n        var pluginResult = callCordovaPlugin(pluginObj, methodName, args, opts);\n        if (pluginResult) {\n            if (pluginResult.error) {\n                reject(pluginResult.error);\n            }\n            else if (pluginResult.then) {\n                pluginResult.then(resolve).catch(reject);\n            }\n        }\n        else {\n            reject({ error: 'unexpected_error' });\n        }\n    });\n}\nfunction wrapObservable(pluginObj, methodName, args, opts) {\n    if (opts === void 0) { opts = {}; }\n    return new Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'rxjs'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(function (observer) {\n        var pluginResult;\n        if (opts.destruct) {\n            pluginResult = callCordovaPlugin(pluginObj, methodName, args, opts, function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                return observer.next(args);\n            }, function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                return observer.error(args);\n            });\n        }\n        else {\n            pluginResult = callCordovaPlugin(pluginObj, methodName, args, opts, observer.next.bind(observer), observer.error.bind(observer));\n        }\n        if (pluginResult && pluginResult.error) {\n            observer.error(pluginResult.error);\n            observer.complete();\n        }\n        return function () {\n            try {\n                if (opts.clearFunction) {\n                    if (opts.clearWithArgs) {\n                        return callCordovaPlugin(pluginObj, opts.clearFunction, args, opts, observer.next.bind(observer), observer.error.bind(observer));\n                    }\n                    return callCordovaPlugin(pluginObj, opts.clearFunction, []);\n                }\n            }\n            catch (e) {\n                console.warn('Unable to clear the previous observable watch for', pluginObj.constructor.getPluginName(), methodName);\n                console.warn(e);\n            }\n        };\n    });\n}\n/**\n * Wrap the event with an observable\n * @private\n * @param event event name\n * @param element The element to attach the event listener to\n * @returns {Observable}\n */\nfunction wrapEventObservable(event, element) {\n    element =\n        typeof window !== 'undefined' && element\n            ? get(window, element)\n            : element || (typeof window !== 'undefined' ? window : {});\n    return Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'rxjs'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(element, event);\n}\nfunction checkAvailability(plugin, methodName, pluginName) {\n    var pluginRef, pluginInstance, pluginPackage;\n    if (typeof plugin === 'string') {\n        pluginRef = plugin;\n    }\n    else {\n        pluginRef = plugin.constructor.getPluginRef();\n        pluginName = plugin.constructor.getPluginName();\n        pluginPackage = plugin.constructor.getPluginInstallName();\n    }\n    pluginInstance = getPlugin(pluginRef);\n    if (!pluginInstance || (!!methodName && typeof pluginInstance[methodName] === 'undefined')) {\n        if (typeof window === 'undefined' || !window.cordova) {\n            cordovaWarn(pluginName, methodName);\n            return ERR_CORDOVA_NOT_AVAILABLE;\n        }\n        pluginWarn(pluginName, pluginPackage, methodName);\n        return ERR_PLUGIN_NOT_INSTALLED;\n    }\n    return true;\n}\n/**\n * Checks if _objectInstance exists and has the method/property\n * @private\n */\nfunction instanceAvailability(pluginObj, methodName) {\n    return pluginObj._objectInstance && (!methodName || typeof pluginObj._objectInstance[methodName] !== 'undefined');\n}\nfunction setIndex(args, opts, resolve, reject) {\n    if (opts === void 0) { opts = {}; }\n    // ignore resolve and reject in case sync\n    if (opts.sync) {\n        return args;\n    }\n    // If the plugin method expects myMethod(success, err, options)\n    if (opts.callbackOrder === 'reverse') {\n        // Get those arguments in the order [resolve, reject, ...restOfArgs]\n        args.unshift(reject);\n        args.unshift(resolve);\n    }\n    else if (opts.callbackStyle === 'node') {\n        args.push(function (err, result) {\n            if (err) {\n                reject(err);\n            }\n            else {\n                resolve(result);\n            }\n        });\n    }\n    else if (opts.callbackStyle === 'object' && opts.successName && opts.errorName) {\n        var obj = {};\n        obj[opts.successName] = resolve;\n        obj[opts.errorName] = reject;\n        args.push(obj);\n    }\n    else if (typeof opts.successIndex !== 'undefined' || typeof opts.errorIndex !== 'undefined') {\n        var setSuccessIndex = function () {\n            // If we've specified a success/error index\n            if (opts.successIndex > args.length) {\n                args[opts.successIndex] = resolve;\n            }\n            else {\n                args.splice(opts.successIndex, 0, resolve);\n            }\n        };\n        var setErrorIndex = function () {\n            // We don't want that the reject cb gets spliced into the position of an optional argument that has not been\n            // defined and thus causing non expected behavior.\n            if (opts.errorIndex > args.length) {\n                args[opts.errorIndex] = reject; // insert the reject fn at the correct specific index\n            }\n            else {\n                args.splice(opts.errorIndex, 0, reject); // otherwise just splice it into the array\n            }\n        };\n        if (opts.successIndex > opts.errorIndex) {\n            setErrorIndex();\n            setSuccessIndex();\n        }\n        else {\n            setSuccessIndex();\n            setErrorIndex();\n        }\n    }\n    else {\n        // Otherwise, let's tack them on to the end of the argument list\n        // which is 90% of cases\n        args.push(resolve);\n        args.push(reject);\n    }\n    return args;\n}\nfunction callCordovaPlugin(pluginObj, methodName, args, opts, resolve, reject) {\n    if (opts === void 0) { opts = {}; }\n    // Try to figure out where the success/error callbacks need to be bound\n    // to our promise resolve/reject handlers.\n    args = setIndex(args, opts, resolve, reject);\n    var availabilityCheck = checkAvailability(pluginObj, methodName);\n    if (availabilityCheck === true) {\n        var pluginInstance = getPlugin(pluginObj.constructor.getPluginRef());\n        return pluginInstance[methodName].apply(pluginInstance, args);\n    }\n    else {\n        return availabilityCheck;\n    }\n}\nfunction callInstance(pluginObj, methodName, args, opts, resolve, reject) {\n    if (opts === void 0) { opts = {}; }\n    args = setIndex(args, opts, resolve, reject);\n    if (instanceAvailability(pluginObj, methodName)) {\n        return pluginObj._objectInstance[methodName].apply(pluginObj._objectInstance, args);\n    }\n}\nfunction getPlugin(pluginRef) {\n    if (typeof window !== 'undefined') {\n        return get(window, pluginRef);\n    }\n    return null;\n}\nfunction get(element, path) {\n    var paths = path.split('.');\n    var obj = element;\n    for (var i = 0; i < paths.length; i++) {\n        if (!obj) {\n            return null;\n        }\n        obj = obj[paths[i]];\n    }\n    return obj;\n}\nfunction pluginWarn(pluginName, plugin, method) {\n    if (method) {\n        console.warn('Native: tried calling ' + pluginName + '.' + method + ', but the ' + pluginName + ' plugin is not installed.');\n    }\n    else {\n        console.warn(\"Native: tried accessing the \" + pluginName + \" plugin but it's not installed.\");\n    }\n    if (plugin) {\n        console.warn(\"Install the \" + pluginName + \" plugin: 'ionic cordova plugin add \" + plugin + \"'\");\n    }\n}\n/**\n * @private\n * @param pluginName\n * @param method\n */\nfunction cordovaWarn(pluginName, method) {\n    if (typeof process === 'undefined') {\n        if (method) {\n            console.warn('Native: tried calling ' +\n                pluginName +\n                '.' +\n                method +\n                ', but Cordova is not available. Make sure to include cordova.js or run in a device/simulator');\n        }\n        else {\n            console.warn('Native: tried accessing the ' +\n                pluginName +\n                ' plugin but Cordova is not available. Make sure to include cordova.js or run in a device/simulator');\n        }\n    }\n}\n/**\n * @private\n */\nvar wrap = function (pluginObj, methodName, opts) {\n    if (opts === void 0) { opts = {}; }\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (opts.sync) {\n            // Sync doesn't wrap the plugin with a promise or observable, it returns the result as-is\n            return callCordovaPlugin(pluginObj, methodName, args, opts);\n        }\n        else if (opts.observable) {\n            return wrapObservable(pluginObj, methodName, args, opts);\n        }\n        else if (opts.eventObservable && opts.event) {\n            return wrapEventObservable(opts.event, opts.element);\n        }\n        else if (opts.otherPromise) {\n            return wrapOtherPromise(pluginObj, methodName, args, opts);\n        }\n        else {\n            return wrapPromise(pluginObj, methodName, args, opts);\n        }\n    };\n};\n/**\n * @private\n */\nfunction wrapInstance(pluginObj, methodName, opts) {\n    if (opts === void 0) { opts = {}; }\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (opts.sync) {\n            return callInstance(pluginObj, methodName, args, opts);\n        }\n        else if (opts.observable) {\n            return new Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'rxjs'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(function (observer) {\n                var pluginResult;\n                if (opts.destruct) {\n                    pluginResult = callInstance(pluginObj, methodName, args, opts, function () {\n                        var args = [];\n                        for (var _i = 0; _i < arguments.length; _i++) {\n                            args[_i] = arguments[_i];\n                        }\n                        return observer.next(args);\n                    }, function () {\n                        var args = [];\n                        for (var _i = 0; _i < arguments.length; _i++) {\n                            args[_i] = arguments[_i];\n                        }\n                        return observer.error(args);\n                    });\n                }\n                else {\n                    pluginResult = callInstance(pluginObj, methodName, args, opts, observer.next.bind(observer), observer.error.bind(observer));\n                }\n                if (pluginResult && pluginResult.error) {\n                    observer.error(pluginResult.error);\n                }\n                return function () {\n                    try {\n                        if (opts.clearWithArgs) {\n                            return callInstance(pluginObj, opts.clearFunction, args, opts, observer.next.bind(observer), observer.error.bind(observer));\n                        }\n                        return callInstance(pluginObj, opts.clearFunction, []);\n                    }\n                    catch (e) {\n                        console.warn('Unable to clear the previous observable watch for', pluginObj.constructor.getPluginName(), methodName);\n                        console.warn(e);\n                    }\n                };\n            });\n        }\n        else if (opts.otherPromise) {\n            return getPromise(function (resolve, reject) {\n                var result;\n                if (opts.destruct) {\n                    result = callInstance(pluginObj, methodName, args, opts, function () {\n                        var args = [];\n                        for (var _i = 0; _i < arguments.length; _i++) {\n                            args[_i] = arguments[_i];\n                        }\n                        return resolve(args);\n                    }, function () {\n                        var args = [];\n                        for (var _i = 0; _i < arguments.length; _i++) {\n                            args[_i] = arguments[_i];\n                        }\n                        return reject(args);\n                    });\n                }\n                else {\n                    result = callInstance(pluginObj, methodName, args, opts, resolve, reject);\n                }\n                if (result && result.then) {\n                    result.then(resolve, reject);\n                }\n                else {\n                    reject();\n                }\n            });\n        }\n        else {\n            var pluginResult_1, rej_1;\n            var p = getPromise(function (resolve, reject) {\n                if (opts.destruct) {\n                    pluginResult_1 = callInstance(pluginObj, methodName, args, opts, function () {\n                        var args = [];\n                        for (var _i = 0; _i < arguments.length; _i++) {\n                            args[_i] = arguments[_i];\n                        }\n                        return resolve(args);\n                    }, function () {\n                        var args = [];\n                        for (var _i = 0; _i < arguments.length; _i++) {\n                            args[_i] = arguments[_i];\n                        }\n                        return reject(args);\n                    });\n                }\n                else {\n                    pluginResult_1 = callInstance(pluginObj, methodName, args, opts, resolve, reject);\n                }\n                rej_1 = reject;\n            });\n            // Angular throws an error on unhandled rejection, but in this case we have already printed\n            // a warning that Cordova is undefined or the plugin is uninstalled, so there is no reason\n            // to error\n            if (pluginResult_1 && pluginResult_1.error) {\n                p.catch(function () { });\n                typeof rej_1 === 'function' && rej_1(pluginResult_1.error);\n            }\n            return p;\n        }\n    };\n}\n//# sourceMappingURL=common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@ionic-native/core/decorators/common.js\n");

/***/ }),

/***/ "./node_modules/@ionic-native/core/decorators/cordova-function-override.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@ionic-native/core/decorators/cordova-function-override.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cordovaFunctionOverride\": () => (/* binding */ cordovaFunctionOverride)\n/* harmony export */ });\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module 'rxjs'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common */ \"./node_modules/@ionic-native/core/decorators/common.js\");\n\n\nfunction overrideFunction(pluginObj, methodName) {\n    return new Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'rxjs'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(function (observer) {\n        var availabilityCheck = (0,_common__WEBPACK_IMPORTED_MODULE_1__.checkAvailability)(pluginObj, methodName);\n        if (availabilityCheck === true) {\n            var pluginInstance_1 = (0,_common__WEBPACK_IMPORTED_MODULE_1__.getPlugin)(pluginObj.constructor.getPluginRef());\n            pluginInstance_1[methodName] = observer.next.bind(observer);\n            return function () { return (pluginInstance_1[methodName] = function () { }); };\n        }\n        else {\n            observer.error(availabilityCheck);\n            observer.complete();\n        }\n    });\n}\nfunction cordovaFunctionOverride(pluginObj, methodName, args) {\n    if (args === void 0) { args = []; }\n    return overrideFunction(pluginObj, methodName);\n}\n//# sourceMappingURL=cordova-function-override.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGlvbmljLW5hdGl2ZS9jb3JlL2RlY29yYXRvcnMvY29yZG92YS1mdW5jdGlvbi1vdmVycmlkZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBa0M7QUFDc0I7QUFDeEQ7QUFDQSxlQUFlLG1JQUFVO0FBQ3pCLGdDQUFnQywwREFBaUI7QUFDakQ7QUFDQSxtQ0FBbUMsa0RBQVM7QUFDNUM7QUFDQSxpQ0FBaUMsc0RBQXNEO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDTztBQUNQLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGlvbmljLW5hdGl2ZS9jb3JlL2RlY29yYXRvcnMvY29yZG92YS1mdW5jdGlvbi1vdmVycmlkZS5qcz84NGE0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNoZWNrQXZhaWxhYmlsaXR5LCBnZXRQbHVnaW4gfSBmcm9tICcuL2NvbW1vbic7XG5mdW5jdGlvbiBvdmVycmlkZUZ1bmN0aW9uKHBsdWdpbk9iaiwgbWV0aG9kTmFtZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgdmFyIGF2YWlsYWJpbGl0eUNoZWNrID0gY2hlY2tBdmFpbGFiaWxpdHkocGx1Z2luT2JqLCBtZXRob2ROYW1lKTtcbiAgICAgICAgaWYgKGF2YWlsYWJpbGl0eUNoZWNrID09PSB0cnVlKSB7XG4gICAgICAgICAgICB2YXIgcGx1Z2luSW5zdGFuY2VfMSA9IGdldFBsdWdpbihwbHVnaW5PYmouY29uc3RydWN0b3IuZ2V0UGx1Z2luUmVmKCkpO1xuICAgICAgICAgICAgcGx1Z2luSW5zdGFuY2VfMVttZXRob2ROYW1lXSA9IG9ic2VydmVyLm5leHQuYmluZChvYnNlcnZlcik7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHBsdWdpbkluc3RhbmNlXzFbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbiAoKSB7IH0pOyB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoYXZhaWxhYmlsaXR5Q2hlY2spO1xuICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvcmRvdmFGdW5jdGlvbk92ZXJyaWRlKHBsdWdpbk9iaiwgbWV0aG9kTmFtZSwgYXJncykge1xuICAgIGlmIChhcmdzID09PSB2b2lkIDApIHsgYXJncyA9IFtdOyB9XG4gICAgcmV0dXJuIG92ZXJyaWRlRnVuY3Rpb24ocGx1Z2luT2JqLCBtZXRob2ROYW1lKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvcmRvdmEtZnVuY3Rpb24tb3ZlcnJpZGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@ionic-native/core/decorators/cordova-function-override.js\n");

/***/ }),

/***/ "./node_modules/@ionic-native/core/decorators/cordova-instance.js":
/*!************************************************************************!*\
  !*** ./node_modules/@ionic-native/core/decorators/cordova-instance.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cordovaInstance\": () => (/* binding */ cordovaInstance)\n/* harmony export */ });\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common */ \"./node_modules/@ionic-native/core/decorators/common.js\");\n\nfunction cordovaInstance(pluginObj, methodName, config, args) {\n    args = Array.from(args);\n    return (0,_common__WEBPACK_IMPORTED_MODULE_0__.wrapInstance)(pluginObj, methodName, config).apply(this, args);\n}\n//# sourceMappingURL=cordova-instance.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGlvbmljLW5hdGl2ZS9jb3JlL2RlY29yYXRvcnMvY29yZG92YS1pbnN0YW5jZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF3QztBQUNqQztBQUNQO0FBQ0EsV0FBVyxxREFBWTtBQUN2QjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL0Bpb25pYy1uYXRpdmUvY29yZS9kZWNvcmF0b3JzL2NvcmRvdmEtaW5zdGFuY2UuanM/NDZkZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB3cmFwSW5zdGFuY2UgfSBmcm9tICcuL2NvbW1vbic7XG5leHBvcnQgZnVuY3Rpb24gY29yZG92YUluc3RhbmNlKHBsdWdpbk9iaiwgbWV0aG9kTmFtZSwgY29uZmlnLCBhcmdzKSB7XG4gICAgYXJncyA9IEFycmF5LmZyb20oYXJncyk7XG4gICAgcmV0dXJuIHdyYXBJbnN0YW5jZShwbHVnaW5PYmosIG1ldGhvZE5hbWUsIGNvbmZpZykuYXBwbHkodGhpcywgYXJncyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb3Jkb3ZhLWluc3RhbmNlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@ionic-native/core/decorators/cordova-instance.js\n");

/***/ }),

/***/ "./node_modules/@ionic-native/core/decorators/cordova-property.js":
/*!************************************************************************!*\
  !*** ./node_modules/@ionic-native/core/decorators/cordova-property.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cordovaPropertyGet\": () => (/* binding */ cordovaPropertyGet),\n/* harmony export */   \"cordovaPropertySet\": () => (/* binding */ cordovaPropertySet)\n/* harmony export */ });\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common */ \"./node_modules/@ionic-native/core/decorators/common.js\");\n\nfunction cordovaPropertyGet(pluginObj, key) {\n    if ((0,_common__WEBPACK_IMPORTED_MODULE_0__.checkAvailability)(pluginObj, key) === true) {\n        return (0,_common__WEBPACK_IMPORTED_MODULE_0__.getPlugin)(pluginObj.constructor.getPluginRef())[key];\n    }\n    return null;\n}\nfunction cordovaPropertySet(pluginObj, key, value) {\n    if ((0,_common__WEBPACK_IMPORTED_MODULE_0__.checkAvailability)(pluginObj, key) === true) {\n        (0,_common__WEBPACK_IMPORTED_MODULE_0__.getPlugin)(pluginObj.constructor.getPluginRef())[key] = value;\n    }\n}\n//# sourceMappingURL=cordova-property.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGlvbmljLW5hdGl2ZS9jb3JlL2RlY29yYXRvcnMvY29yZG92YS1wcm9wZXJ0eS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBd0Q7QUFDakQ7QUFDUCxRQUFRLDBEQUFpQjtBQUN6QixlQUFlLGtEQUFTO0FBQ3hCO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsUUFBUSwwREFBaUI7QUFDekIsUUFBUSxrREFBUztBQUNqQjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGlvbmljLW5hdGl2ZS9jb3JlL2RlY29yYXRvcnMvY29yZG92YS1wcm9wZXJ0eS5qcz9hNzE0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNoZWNrQXZhaWxhYmlsaXR5LCBnZXRQbHVnaW4gfSBmcm9tICcuL2NvbW1vbic7XG5leHBvcnQgZnVuY3Rpb24gY29yZG92YVByb3BlcnR5R2V0KHBsdWdpbk9iaiwga2V5KSB7XG4gICAgaWYgKGNoZWNrQXZhaWxhYmlsaXR5KHBsdWdpbk9iaiwga2V5KSA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gZ2V0UGx1Z2luKHBsdWdpbk9iai5jb25zdHJ1Y3Rvci5nZXRQbHVnaW5SZWYoKSlba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5leHBvcnQgZnVuY3Rpb24gY29yZG92YVByb3BlcnR5U2V0KHBsdWdpbk9iaiwga2V5LCB2YWx1ZSkge1xuICAgIGlmIChjaGVja0F2YWlsYWJpbGl0eShwbHVnaW5PYmosIGtleSkgPT09IHRydWUpIHtcbiAgICAgICAgZ2V0UGx1Z2luKHBsdWdpbk9iai5jb25zdHJ1Y3Rvci5nZXRQbHVnaW5SZWYoKSlba2V5XSA9IHZhbHVlO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvcmRvdmEtcHJvcGVydHkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@ionic-native/core/decorators/cordova-property.js\n");

/***/ }),

/***/ "./node_modules/@ionic-native/core/decorators/cordova.js":
/*!***************************************************************!*\
  !*** ./node_modules/@ionic-native/core/decorators/cordova.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cordova\": () => (/* binding */ cordova)\n/* harmony export */ });\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common */ \"./node_modules/@ionic-native/core/decorators/common.js\");\n\nfunction cordova(pluginObj, methodName, config, args) {\n    return (0,_common__WEBPACK_IMPORTED_MODULE_0__.wrap)(pluginObj, methodName, config).apply(this, args);\n}\n//# sourceMappingURL=cordova.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGlvbmljLW5hdGl2ZS9jb3JlL2RlY29yYXRvcnMvY29yZG92YS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFnQztBQUN6QjtBQUNQLFdBQVcsNkNBQUk7QUFDZjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL0Bpb25pYy1uYXRpdmUvY29yZS9kZWNvcmF0b3JzL2NvcmRvdmEuanM/YzUyOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB3cmFwIH0gZnJvbSAnLi9jb21tb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGNvcmRvdmEocGx1Z2luT2JqLCBtZXRob2ROYW1lLCBjb25maWcsIGFyZ3MpIHtcbiAgICByZXR1cm4gd3JhcChwbHVnaW5PYmosIG1ldGhvZE5hbWUsIGNvbmZpZykuYXBwbHkodGhpcywgYXJncyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb3Jkb3ZhLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@ionic-native/core/decorators/cordova.js\n");

/***/ }),

/***/ "./node_modules/@ionic-native/core/decorators/instance-property.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@ionic-native/core/decorators/instance-property.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"instancePropertyGet\": () => (/* binding */ instancePropertyGet),\n/* harmony export */   \"instancePropertySet\": () => (/* binding */ instancePropertySet)\n/* harmony export */ });\nfunction instancePropertyGet(pluginObj, key) {\n    if (pluginObj._objectInstance && pluginObj._objectInstance[key]) {\n        return pluginObj._objectInstance[key];\n    }\n    return null;\n}\nfunction instancePropertySet(pluginObj, key, value) {\n    if (pluginObj._objectInstance) {\n        pluginObj._objectInstance[key] = value;\n    }\n}\n//# sourceMappingURL=instance-property.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGlvbmljLW5hdGl2ZS9jb3JlL2RlY29yYXRvcnMvaW5zdGFuY2UtcHJvcGVydHkuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGlvbmljLW5hdGl2ZS9jb3JlL2RlY29yYXRvcnMvaW5zdGFuY2UtcHJvcGVydHkuanM/MjYyZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaW5zdGFuY2VQcm9wZXJ0eUdldChwbHVnaW5PYmosIGtleSkge1xuICAgIGlmIChwbHVnaW5PYmouX29iamVjdEluc3RhbmNlICYmIHBsdWdpbk9iai5fb2JqZWN0SW5zdGFuY2Vba2V5XSkge1xuICAgICAgICByZXR1cm4gcGx1Z2luT2JqLl9vYmplY3RJbnN0YW5jZVtrZXldO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpbnN0YW5jZVByb3BlcnR5U2V0KHBsdWdpbk9iaiwga2V5LCB2YWx1ZSkge1xuICAgIGlmIChwbHVnaW5PYmouX29iamVjdEluc3RhbmNlKSB7XG4gICAgICAgIHBsdWdpbk9iai5fb2JqZWN0SW5zdGFuY2Vba2V5XSA9IHZhbHVlO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluc3RhbmNlLXByb3BlcnR5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@ionic-native/core/decorators/instance-property.js\n");

/***/ }),

/***/ "./node_modules/@ionic-native/core/decorators/interfaces.js":
/*!******************************************************************!*\
  !*** ./node_modules/@ionic-native/core/decorators/interfaces.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=interfaces.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGlvbmljLW5hdGl2ZS9jb3JlL2RlY29yYXRvcnMvaW50ZXJmYWNlcy5qcy5qcyIsIm1hcHBpbmdzIjoiO0FBQVU7QUFDViIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AaW9uaWMtbmF0aXZlL2NvcmUvZGVjb3JhdG9ycy9pbnRlcmZhY2VzLmpzP2UyOTQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHt9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJmYWNlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@ionic-native/core/decorators/interfaces.js\n");

/***/ }),

/***/ "./node_modules/@ionic-native/core/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@ionic-native/core/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"IonicNativePlugin\": () => (/* reexport safe */ _ionic_native_plugin__WEBPACK_IMPORTED_MODULE_1__.IonicNativePlugin),\n/* harmony export */   \"checkAvailability\": () => (/* reexport safe */ _decorators_common__WEBPACK_IMPORTED_MODULE_2__.checkAvailability),\n/* harmony export */   \"instanceAvailability\": () => (/* reexport safe */ _decorators_common__WEBPACK_IMPORTED_MODULE_2__.instanceAvailability),\n/* harmony export */   \"wrap\": () => (/* reexport safe */ _decorators_common__WEBPACK_IMPORTED_MODULE_2__.wrap),\n/* harmony export */   \"getPromise\": () => (/* reexport safe */ _decorators_common__WEBPACK_IMPORTED_MODULE_2__.getPromise),\n/* harmony export */   \"cordova\": () => (/* reexport safe */ _decorators_cordova__WEBPACK_IMPORTED_MODULE_3__.cordova),\n/* harmony export */   \"cordovaFunctionOverride\": () => (/* reexport safe */ _decorators_cordova_function_override__WEBPACK_IMPORTED_MODULE_4__.cordovaFunctionOverride),\n/* harmony export */   \"cordovaInstance\": () => (/* reexport safe */ _decorators_cordova_instance__WEBPACK_IMPORTED_MODULE_5__.cordovaInstance),\n/* harmony export */   \"cordovaPropertyGet\": () => (/* reexport safe */ _decorators_cordova_property__WEBPACK_IMPORTED_MODULE_6__.cordovaPropertyGet),\n/* harmony export */   \"cordovaPropertySet\": () => (/* reexport safe */ _decorators_cordova_property__WEBPACK_IMPORTED_MODULE_6__.cordovaPropertySet),\n/* harmony export */   \"instancePropertyGet\": () => (/* reexport safe */ _decorators_instance_property__WEBPACK_IMPORTED_MODULE_7__.instancePropertyGet),\n/* harmony export */   \"instancePropertySet\": () => (/* reexport safe */ _decorators_instance_property__WEBPACK_IMPORTED_MODULE_7__.instancePropertySet)\n/* harmony export */ });\n/* harmony import */ var _bootstrap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bootstrap */ \"./node_modules/@ionic-native/core/bootstrap.js\");\n/* harmony import */ var _ionic_native_plugin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ionic-native-plugin */ \"./node_modules/@ionic-native/core/ionic-native-plugin.js\");\n/* harmony import */ var _decorators_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./decorators/common */ \"./node_modules/@ionic-native/core/decorators/common.js\");\n/* harmony import */ var _decorators_cordova__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./decorators/cordova */ \"./node_modules/@ionic-native/core/decorators/cordova.js\");\n/* harmony import */ var _decorators_cordova_function_override__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./decorators/cordova-function-override */ \"./node_modules/@ionic-native/core/decorators/cordova-function-override.js\");\n/* harmony import */ var _decorators_cordova_instance__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./decorators/cordova-instance */ \"./node_modules/@ionic-native/core/decorators/cordova-instance.js\");\n/* harmony import */ var _decorators_cordova_property__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./decorators/cordova-property */ \"./node_modules/@ionic-native/core/decorators/cordova-property.js\");\n/* harmony import */ var _decorators_instance_property__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./decorators/instance-property */ \"./node_modules/@ionic-native/core/decorators/instance-property.js\");\n/* harmony import */ var _decorators_interfaces__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./decorators/interfaces */ \"./node_modules/@ionic-native/core/decorators/interfaces.js\");\n\n\n// Decorators\n\n\n\n\n\n\n\n(0,_bootstrap__WEBPACK_IMPORTED_MODULE_0__.checkReady)();\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGlvbmljLW5hdGl2ZS9jb3JlL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF5QztBQUNpQjtBQUMxRDtBQUNnRztBQUMzRDtBQUNrQjtBQUNUO0FBQ0E7QUFDQztBQUNQO0FBQ3hDLHNEQUFVO0FBQ1YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGlvbmljLW5hdGl2ZS9jb3JlL2luZGV4LmpzPzZiNzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2hlY2tSZWFkeSB9IGZyb20gJy4vYm9vdHN0cmFwJztcbmV4cG9ydCB7IElvbmljTmF0aXZlUGx1Z2luIH0gZnJvbSAnLi9pb25pYy1uYXRpdmUtcGx1Z2luJztcbi8vIERlY29yYXRvcnNcbmV4cG9ydCB7IGNoZWNrQXZhaWxhYmlsaXR5LCBpbnN0YW5jZUF2YWlsYWJpbGl0eSwgd3JhcCwgZ2V0UHJvbWlzZSB9IGZyb20gJy4vZGVjb3JhdG9ycy9jb21tb24nO1xuZXhwb3J0ICogZnJvbSAnLi9kZWNvcmF0b3JzL2NvcmRvdmEnO1xuZXhwb3J0ICogZnJvbSAnLi9kZWNvcmF0b3JzL2NvcmRvdmEtZnVuY3Rpb24tb3ZlcnJpZGUnO1xuZXhwb3J0ICogZnJvbSAnLi9kZWNvcmF0b3JzL2NvcmRvdmEtaW5zdGFuY2UnO1xuZXhwb3J0ICogZnJvbSAnLi9kZWNvcmF0b3JzL2NvcmRvdmEtcHJvcGVydHknO1xuZXhwb3J0ICogZnJvbSAnLi9kZWNvcmF0b3JzL2luc3RhbmNlLXByb3BlcnR5JztcbmV4cG9ydCAqIGZyb20gJy4vZGVjb3JhdG9ycy9pbnRlcmZhY2VzJztcbmNoZWNrUmVhZHkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@ionic-native/core/index.js\n");

/***/ }),

/***/ "./node_modules/@ionic-native/core/ionic-native-plugin.js":
/*!****************************************************************!*\
  !*** ./node_modules/@ionic-native/core/ionic-native-plugin.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"IonicNativePlugin\": () => (/* binding */ IonicNativePlugin)\n/* harmony export */ });\n/* harmony import */ var _decorators_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./decorators/common */ \"./node_modules/@ionic-native/core/decorators/common.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ \"./node_modules/@ionic-native/core/util.js\");\n\n\nvar IonicNativePlugin = /** @class */ (function () {\n    function IonicNativePlugin() {\n    }\n    /**\n     * Returns a boolean that indicates whether the plugin is installed\n     * @return {boolean}\n     */\n    IonicNativePlugin.installed = function () {\n        var isAvailable = (0,_decorators_common__WEBPACK_IMPORTED_MODULE_0__.checkAvailability)(this.pluginRef) === true;\n        return isAvailable;\n    };\n    /**\n     * Returns the original plugin object\n     */\n    IonicNativePlugin.getPlugin = function () {\n        if (typeof window !== 'undefined') {\n            return (0,_util__WEBPACK_IMPORTED_MODULE_1__.get)(window, this.pluginRef);\n        }\n        return null;\n    };\n    /**\n     * Returns the plugin's name\n     */\n    IonicNativePlugin.getPluginName = function () {\n        var pluginName = this.pluginName;\n        return pluginName;\n    };\n    /**\n     * Returns the plugin's reference\n     */\n    IonicNativePlugin.getPluginRef = function () {\n        var pluginRef = this.pluginRef;\n        return pluginRef;\n    };\n    /**\n     * Returns the plugin's install name\n     */\n    IonicNativePlugin.getPluginInstallName = function () {\n        var plugin = this.plugin;\n        return plugin;\n    };\n    /**\n     * Returns the plugin's supported platforms\n     */\n    IonicNativePlugin.getSupportedPlatforms = function () {\n        var platform = this.platforms;\n        return platform;\n    };\n    IonicNativePlugin.pluginName = '';\n    IonicNativePlugin.pluginRef = '';\n    IonicNativePlugin.plugin = '';\n    IonicNativePlugin.repo = '';\n    IonicNativePlugin.platforms = [];\n    IonicNativePlugin.install = '';\n    return IonicNativePlugin;\n}());\n\n//# sourceMappingURL=ionic-native-plugin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGlvbmljLW5hdGl2ZS9jb3JlL2lvbmljLW5hdGl2ZS1wbHVnaW4uanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXdEO0FBQzNCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLDBCQUEwQixxRUFBaUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsMENBQUc7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDNEI7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGlvbmljLW5hdGl2ZS9jb3JlL2lvbmljLW5hdGl2ZS1wbHVnaW4uanM/MmVhZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjaGVja0F2YWlsYWJpbGl0eSB9IGZyb20gJy4vZGVjb3JhdG9ycy9jb21tb24nO1xuaW1wb3J0IHsgZ2V0IH0gZnJvbSAnLi91dGlsJztcbnZhciBJb25pY05hdGl2ZVBsdWdpbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBJb25pY05hdGl2ZVBsdWdpbigpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgcGx1Z2luIGlzIGluc3RhbGxlZFxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAgICovXG4gICAgSW9uaWNOYXRpdmVQbHVnaW4uaW5zdGFsbGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaXNBdmFpbGFibGUgPSBjaGVja0F2YWlsYWJpbGl0eSh0aGlzLnBsdWdpblJlZikgPT09IHRydWU7XG4gICAgICAgIHJldHVybiBpc0F2YWlsYWJsZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG9yaWdpbmFsIHBsdWdpbiBvYmplY3RcbiAgICAgKi9cbiAgICBJb25pY05hdGl2ZVBsdWdpbi5nZXRQbHVnaW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIGdldCh3aW5kb3csIHRoaXMucGx1Z2luUmVmKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHBsdWdpbidzIG5hbWVcbiAgICAgKi9cbiAgICBJb25pY05hdGl2ZVBsdWdpbi5nZXRQbHVnaW5OYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcGx1Z2luTmFtZSA9IHRoaXMucGx1Z2luTmFtZTtcbiAgICAgICAgcmV0dXJuIHBsdWdpbk5hbWU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwbHVnaW4ncyByZWZlcmVuY2VcbiAgICAgKi9cbiAgICBJb25pY05hdGl2ZVBsdWdpbi5nZXRQbHVnaW5SZWYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwbHVnaW5SZWYgPSB0aGlzLnBsdWdpblJlZjtcbiAgICAgICAgcmV0dXJuIHBsdWdpblJlZjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHBsdWdpbidzIGluc3RhbGwgbmFtZVxuICAgICAqL1xuICAgIElvbmljTmF0aXZlUGx1Z2luLmdldFBsdWdpbkluc3RhbGxOYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcGx1Z2luID0gdGhpcy5wbHVnaW47XG4gICAgICAgIHJldHVybiBwbHVnaW47XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwbHVnaW4ncyBzdXBwb3J0ZWQgcGxhdGZvcm1zXG4gICAgICovXG4gICAgSW9uaWNOYXRpdmVQbHVnaW4uZ2V0U3VwcG9ydGVkUGxhdGZvcm1zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcGxhdGZvcm0gPSB0aGlzLnBsYXRmb3JtcztcbiAgICAgICAgcmV0dXJuIHBsYXRmb3JtO1xuICAgIH07XG4gICAgSW9uaWNOYXRpdmVQbHVnaW4ucGx1Z2luTmFtZSA9ICcnO1xuICAgIElvbmljTmF0aXZlUGx1Z2luLnBsdWdpblJlZiA9ICcnO1xuICAgIElvbmljTmF0aXZlUGx1Z2luLnBsdWdpbiA9ICcnO1xuICAgIElvbmljTmF0aXZlUGx1Z2luLnJlcG8gPSAnJztcbiAgICBJb25pY05hdGl2ZVBsdWdpbi5wbGF0Zm9ybXMgPSBbXTtcbiAgICBJb25pY05hdGl2ZVBsdWdpbi5pbnN0YWxsID0gJyc7XG4gICAgcmV0dXJuIElvbmljTmF0aXZlUGx1Z2luO1xufSgpKTtcbmV4cG9ydCB7IElvbmljTmF0aXZlUGx1Z2luIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pb25pYy1uYXRpdmUtcGx1Z2luLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@ionic-native/core/ionic-native-plugin.js\n");

/***/ }),

/***/ "./node_modules/@ionic-native/core/util.js":
/*!*************************************************!*\
  !*** ./node_modules/@ionic-native/core/util.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"get\": () => (/* binding */ get),\n/* harmony export */   \"getPromise\": () => (/* binding */ getPromise)\n/* harmony export */ });\n/**\n * @private\n */\nfunction get(element, path) {\n    var paths = path.split('.');\n    var obj = element;\n    for (var i = 0; i < paths.length; i++) {\n        if (!obj) {\n            return null;\n        }\n        obj = obj[paths[i]];\n    }\n    return obj;\n}\n/**\n * @private\n */\nfunction getPromise(callback) {\n    if (callback === void 0) { callback = function () { }; }\n    var tryNativePromise = function () {\n        if (typeof Promise === 'function' || (typeof window !== 'undefined' && window.Promise)) {\n            return new Promise(function (resolve, reject) {\n                callback(resolve, reject);\n            });\n        }\n        else {\n            console.error('No Promise support or polyfill found. To enable Ionic Native support, please add the es6-promise polyfill before this script, or run with a library like Angular or on a recent browser.');\n        }\n    };\n    return tryNativePromise();\n}\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGlvbmljLW5hdGl2ZS9jb3JlL3V0aWwuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSxvQkFBb0Isa0JBQWtCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AaW9uaWMtbmF0aXZlL2NvcmUvdXRpbC5qcz83ZTRiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldChlbGVtZW50LCBwYXRoKSB7XG4gICAgdmFyIHBhdGhzID0gcGF0aC5zcGxpdCgnLicpO1xuICAgIHZhciBvYmogPSBlbGVtZW50O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIG9iaiA9IG9ialtwYXRoc1tpXV07XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRQcm9taXNlKGNhbGxiYWNrKSB7XG4gICAgaWYgKGNhbGxiYWNrID09PSB2b2lkIDApIHsgY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7IH07IH1cbiAgICB2YXIgdHJ5TmF0aXZlUHJvbWlzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBQcm9taXNlID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuUHJvbWlzZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2socmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignTm8gUHJvbWlzZSBzdXBwb3J0IG9yIHBvbHlmaWxsIGZvdW5kLiBUbyBlbmFibGUgSW9uaWMgTmF0aXZlIHN1cHBvcnQsIHBsZWFzZSBhZGQgdGhlIGVzNi1wcm9taXNlIHBvbHlmaWxsIGJlZm9yZSB0aGlzIHNjcmlwdCwgb3IgcnVuIHdpdGggYSBsaWJyYXJ5IGxpa2UgQW5ndWxhciBvciBvbiBhIHJlY2VudCBicm93c2VyLicpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gdHJ5TmF0aXZlUHJvbWlzZSgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@ionic-native/core/util.js\n");

/***/ }),

/***/ "./node_modules/@ionic/angular/fesm5/ionic-angular.js":
/*!************************************************************!*\
  !*** ./node_modules/@ionic/angular/fesm5/ionic-angular.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"IonicSafeString\": () => (/* reexport safe */ _ionic_core__WEBPACK_IMPORTED_MODULE_1__.IonicSafeString),\n/* harmony export */   \"IonicSlides\": () => (/* reexport safe */ _ionic_core__WEBPACK_IMPORTED_MODULE_1__.IonicSlides),\n/* harmony export */   \"IonicSwiper\": () => (/* reexport safe */ _ionic_core__WEBPACK_IMPORTED_MODULE_1__.IonicSwiper),\n/* harmony export */   \"createAnimation\": () => (/* reexport safe */ _ionic_core__WEBPACK_IMPORTED_MODULE_1__.createAnimation),\n/* harmony export */   \"getPlatforms\": () => (/* reexport safe */ _ionic_core__WEBPACK_IMPORTED_MODULE_1__.getPlatforms),\n/* harmony export */   \"iosTransitionAnimation\": () => (/* reexport safe */ _ionic_core__WEBPACK_IMPORTED_MODULE_1__.iosTransitionAnimation),\n/* harmony export */   \"isPlatform\": () => (/* reexport safe */ _ionic_core__WEBPACK_IMPORTED_MODULE_1__.isPlatform),\n/* harmony export */   \"mdTransitionAnimation\": () => (/* reexport safe */ _ionic_core__WEBPACK_IMPORTED_MODULE_1__.mdTransitionAnimation),\n/* harmony export */   \"ActionSheetController\": () => (/* binding */ ActionSheetController),\n/* harmony export */   \"AlertController\": () => (/* binding */ AlertController),\n/* harmony export */   \"AngularDelegate\": () => (/* binding */ AngularDelegate),\n/* harmony export */   \"AnimationController\": () => (/* binding */ AnimationController),\n/* harmony export */   \"BooleanValueAccessor\": () => (/* binding */ BooleanValueAccessor),\n/* harmony export */   \"Config\": () => (/* binding */ Config),\n/* harmony export */   \"DomController\": () => (/* binding */ DomController),\n/* harmony export */   \"GestureController\": () => (/* binding */ GestureController),\n/* harmony export */   \"IonApp\": () => (/* binding */ IonApp),\n/* harmony export */   \"IonAvatar\": () => (/* binding */ IonAvatar),\n/* harmony export */   \"IonBackButton\": () => (/* binding */ IonBackButton),\n/* harmony export */   \"IonBackButtonDelegate\": () => (/* binding */ IonBackButtonDelegate),\n/* harmony export */   \"IonBackdrop\": () => (/* binding */ IonBackdrop),\n/* harmony export */   \"IonBadge\": () => (/* binding */ IonBadge),\n/* harmony export */   \"IonButton\": () => (/* binding */ IonButton),\n/* harmony export */   \"IonButtons\": () => (/* binding */ IonButtons),\n/* harmony export */   \"IonCard\": () => (/* binding */ IonCard),\n/* harmony export */   \"IonCardContent\": () => (/* binding */ IonCardContent),\n/* harmony export */   \"IonCardHeader\": () => (/* binding */ IonCardHeader),\n/* harmony export */   \"IonCardSubtitle\": () => (/* binding */ IonCardSubtitle),\n/* harmony export */   \"IonCardTitle\": () => (/* binding */ IonCardTitle),\n/* harmony export */   \"IonCheckbox\": () => (/* binding */ IonCheckbox),\n/* harmony export */   \"IonChip\": () => (/* binding */ IonChip),\n/* harmony export */   \"IonCol\": () => (/* binding */ IonCol),\n/* harmony export */   \"IonContent\": () => (/* binding */ IonContent),\n/* harmony export */   \"IonDatetime\": () => (/* binding */ IonDatetime),\n/* harmony export */   \"IonFab\": () => (/* binding */ IonFab),\n/* harmony export */   \"IonFabButton\": () => (/* binding */ IonFabButton),\n/* harmony export */   \"IonFabList\": () => (/* binding */ IonFabList),\n/* harmony export */   \"IonFooter\": () => (/* binding */ IonFooter),\n/* harmony export */   \"IonGrid\": () => (/* binding */ IonGrid),\n/* harmony export */   \"IonHeader\": () => (/* binding */ IonHeader),\n/* harmony export */   \"IonIcon\": () => (/* binding */ IonIcon),\n/* harmony export */   \"IonImg\": () => (/* binding */ IonImg),\n/* harmony export */   \"IonInfiniteScroll\": () => (/* binding */ IonInfiniteScroll),\n/* harmony export */   \"IonInfiniteScrollContent\": () => (/* binding */ IonInfiniteScrollContent),\n/* harmony export */   \"IonInput\": () => (/* binding */ IonInput),\n/* harmony export */   \"IonItem\": () => (/* binding */ IonItem),\n/* harmony export */   \"IonItemDivider\": () => (/* binding */ IonItemDivider),\n/* harmony export */   \"IonItemGroup\": () => (/* binding */ IonItemGroup),\n/* harmony export */   \"IonItemOption\": () => (/* binding */ IonItemOption),\n/* harmony export */   \"IonItemOptions\": () => (/* binding */ IonItemOptions),\n/* harmony export */   \"IonItemSliding\": () => (/* binding */ IonItemSliding),\n/* harmony export */   \"IonLabel\": () => (/* binding */ IonLabel),\n/* harmony export */   \"IonList\": () => (/* binding */ IonList),\n/* harmony export */   \"IonListHeader\": () => (/* binding */ IonListHeader),\n/* harmony export */   \"IonMenu\": () => (/* binding */ IonMenu),\n/* harmony export */   \"IonMenuButton\": () => (/* binding */ IonMenuButton),\n/* harmony export */   \"IonMenuToggle\": () => (/* binding */ IonMenuToggle),\n/* harmony export */   \"IonNav\": () => (/* binding */ IonNav),\n/* harmony export */   \"IonNavLink\": () => (/* binding */ IonNavLink),\n/* harmony export */   \"IonNote\": () => (/* binding */ IonNote),\n/* harmony export */   \"IonProgressBar\": () => (/* binding */ IonProgressBar),\n/* harmony export */   \"IonRadio\": () => (/* binding */ IonRadio),\n/* harmony export */   \"IonRadioGroup\": () => (/* binding */ IonRadioGroup),\n/* harmony export */   \"IonRange\": () => (/* binding */ IonRange),\n/* harmony export */   \"IonRefresher\": () => (/* binding */ IonRefresher),\n/* harmony export */   \"IonRefresherContent\": () => (/* binding */ IonRefresherContent),\n/* harmony export */   \"IonReorder\": () => (/* binding */ IonReorder),\n/* harmony export */   \"IonReorderGroup\": () => (/* binding */ IonReorderGroup),\n/* harmony export */   \"IonRippleEffect\": () => (/* binding */ IonRippleEffect),\n/* harmony export */   \"IonRouterOutlet\": () => (/* binding */ IonRouterOutlet),\n/* harmony export */   \"IonRow\": () => (/* binding */ IonRow),\n/* harmony export */   \"IonSearchbar\": () => (/* binding */ IonSearchbar),\n/* harmony export */   \"IonSegment\": () => (/* binding */ IonSegment),\n/* harmony export */   \"IonSegmentButton\": () => (/* binding */ IonSegmentButton),\n/* harmony export */   \"IonSelect\": () => (/* binding */ IonSelect),\n/* harmony export */   \"IonSelectOption\": () => (/* binding */ IonSelectOption),\n/* harmony export */   \"IonSkeletonText\": () => (/* binding */ IonSkeletonText),\n/* harmony export */   \"IonSlide\": () => (/* binding */ IonSlide),\n/* harmony export */   \"IonSlides\": () => (/* binding */ IonSlides),\n/* harmony export */   \"IonSpinner\": () => (/* binding */ IonSpinner),\n/* harmony export */   \"IonSplitPane\": () => (/* binding */ IonSplitPane),\n/* harmony export */   \"IonTabBar\": () => (/* binding */ IonTabBar),\n/* harmony export */   \"IonTabButton\": () => (/* binding */ IonTabButton),\n/* harmony export */   \"IonTabs\": () => (/* binding */ IonTabs),\n/* harmony export */   \"IonText\": () => (/* binding */ IonText),\n/* harmony export */   \"IonTextarea\": () => (/* binding */ IonTextarea),\n/* harmony export */   \"IonThumbnail\": () => (/* binding */ IonThumbnail),\n/* harmony export */   \"IonTitle\": () => (/* binding */ IonTitle),\n/* harmony export */   \"IonToggle\": () => (/* binding */ IonToggle),\n/* harmony export */   \"IonToolbar\": () => (/* binding */ IonToolbar),\n/* harmony export */   \"IonVirtualScroll\": () => (/* binding */ IonVirtualScroll),\n/* harmony export */   \"IonicModule\": () => (/* binding */ IonicModule),\n/* harmony export */   \"IonicRouteStrategy\": () => (/* binding */ IonicRouteStrategy),\n/* harmony export */   \"LoadingController\": () => (/* binding */ LoadingController),\n/* harmony export */   \"MenuController\": () => (/* binding */ MenuController),\n/* harmony export */   \"ModalController\": () => (/* binding */ ModalController),\n/* harmony export */   \"NavController\": () => (/* binding */ NavController),\n/* harmony export */   \"NavDelegate\": () => (/* binding */ NavDelegate),\n/* harmony export */   \"NavParams\": () => (/* binding */ NavParams),\n/* harmony export */   \"NumericValueAccessor\": () => (/* binding */ NumericValueAccessor),\n/* harmony export */   \"PickerController\": () => (/* binding */ PickerController),\n/* harmony export */   \"Platform\": () => (/* binding */ Platform),\n/* harmony export */   \"PopoverController\": () => (/* binding */ PopoverController),\n/* harmony export */   \"RadioValueAccessor\": () => (/* binding */ RadioValueAccessor),\n/* harmony export */   \"RouterLinkDelegate\": () => (/* binding */ RouterLinkDelegate),\n/* harmony export */   \"SelectValueAccessor\": () => (/* binding */ SelectValueAccessor),\n/* harmony export */   \"TextValueAccessor\": () => (/* binding */ TextValueAccessor),\n/* harmony export */   \"ToastController\": () => (/* binding */ ToastController),\n/* harmony export */   \"VirtualFooter\": () => (/* binding */ VirtualFooter),\n/* harmony export */   \"VirtualHeader\": () => (/* binding */ VirtualHeader),\n/* harmony export */   \"VirtualItem\": () => (/* binding */ VirtualItem),\n/* harmony export */   \"ɵa\": () => (/* binding */ ConfigToken),\n/* harmony export */   \"ɵb\": () => (/* binding */ ValueAccessor),\n/* harmony export */   \"ɵc\": () => (/* binding */ ProxyCmp),\n/* harmony export */   \"ɵe\": () => (/* binding */ OverlayBaseController),\n/* harmony export */   \"ɵf\": () => (/* binding */ appInitialize)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"./node_modules/@ionic/angular/node_modules/tslib/tslib.es6.js\");\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/forms'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/common'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/router'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n/* harmony import */ var _ionic_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ionic/core */ \"./node_modules/@ionic/core/dist/index.js\");\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module 'rxjs'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module 'rxjs/operators'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n/* harmony import */ var _ionic_core_loader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ionic/core/loader */ \"./node_modules/@ionic/core/loader/index.js\");\n\n\n\n\n\n\n\n\n\n\n\nvar raf = function (h) {\n    if (typeof __zone_symbol__requestAnimationFrame === 'function') {\n        return __zone_symbol__requestAnimationFrame(h);\n    }\n    if (typeof requestAnimationFrame === 'function') {\n        return requestAnimationFrame(h);\n    }\n    return setTimeout(h);\n};\n\nvar ValueAccessor = /** @class */ (function () {\n    function ValueAccessor(injector, el) {\n        this.injector = injector;\n        this.el = el;\n        this.onChange = function () { };\n        this.onTouched = function () { };\n    }\n    ValueAccessor.prototype.writeValue = function (value) {\n        /**\n         * TODO for Ionic 6:\n         * Change `value == null ? '' : value;`\n         * to `value`. This was a fix for IE9, but IE9\n         * is no longer supported; however, this change\n         * is potentially a breaking change\n         */\n        this.el.nativeElement.value = this.lastValue = value == null ? '' : value;\n        setIonicClasses(this.el);\n    };\n    ValueAccessor.prototype.handleChangeEvent = function (el, value) {\n        if (el === this.el.nativeElement) {\n            if (value !== this.lastValue) {\n                this.lastValue = value;\n                this.onChange(value);\n            }\n            setIonicClasses(this.el);\n        }\n    };\n    ValueAccessor.prototype._handleBlurEvent = function (el) {\n        if (el === this.el.nativeElement) {\n            this.onTouched();\n            setIonicClasses(this.el);\n        }\n    };\n    ValueAccessor.prototype.registerOnChange = function (fn) {\n        this.onChange = fn;\n    };\n    ValueAccessor.prototype.registerOnTouched = function (fn) {\n        this.onTouched = fn;\n    };\n    ValueAccessor.prototype.setDisabledState = function (isDisabled) {\n        this.el.nativeElement.disabled = isDisabled;\n    };\n    ValueAccessor.prototype.ngOnDestroy = function () {\n        if (this.statusChanges) {\n            this.statusChanges.unsubscribe();\n        }\n    };\n    ValueAccessor.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        var ngControl;\n        try {\n            ngControl = this.injector.get(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/forms'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n        }\n        catch ( /* No FormControl or ngModel binding */_a) { /* No FormControl or ngModel binding */ }\n        if (!ngControl) {\n            return;\n        }\n        // Listen for changes in validity, disabled, or pending states\n        if (ngControl.statusChanges) {\n            this.statusChanges = ngControl.statusChanges.subscribe(function () { return setIonicClasses(_this.el); });\n        }\n        /**\n         * TODO Remove this in favor of https://github.com/angular/angular/issues/10887\n         * whenever it is implemented. Currently, Ionic's form status classes\n         * do not react to changes when developers manually call\n         * Angular form control methods such as markAsTouched.\n         * This results in Ionic's form status classes being out\n         * of sync with the ng form status classes.\n         * This patches the methods to manually sync\n         * the classes until this feature is implemented in Angular.\n         */\n        var formControl = ngControl.control;\n        if (formControl) {\n            var methodsToPatch = ['markAsTouched', 'markAllAsTouched', 'markAsUntouched', 'markAsDirty', 'markAsPristine'];\n            methodsToPatch.forEach(function (method) {\n                if (formControl[method]) {\n                    var oldFn_1 = formControl[method].bind(formControl);\n                    formControl[method] = function () {\n                        var params = [];\n                        for (var _i = 0; _i < arguments.length; _i++) {\n                            params[_i] = arguments[_i];\n                        }\n                        oldFn_1.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__spread)(params));\n                        setIonicClasses(_this.el);\n                    };\n                }\n            });\n        }\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())('ionBlur', ['$event.target'])\n    ], ValueAccessor.prototype, \"_handleBlurEvent\", null);\n    return ValueAccessor;\n}());\nvar setIonicClasses = function (element) {\n    raf(function () {\n        var input = element.nativeElement;\n        var classes = getClasses(input);\n        setClasses(input, classes);\n        var item = input.closest('ion-item');\n        if (item) {\n            setClasses(item, classes);\n        }\n    });\n};\nvar getClasses = function (element) {\n    var classList = element.classList;\n    var classes = [];\n    for (var i = 0; i < classList.length; i++) {\n        var item = classList.item(i);\n        if (item !== null && startsWith(item, 'ng-')) {\n            classes.push(\"ion-\" + item.substr(3));\n        }\n    }\n    return classes;\n};\nvar ɵ0 = getClasses;\nvar setClasses = function (element, classes) {\n    var classList = element.classList;\n    [\n        'ion-valid',\n        'ion-invalid',\n        'ion-touched',\n        'ion-untouched',\n        'ion-dirty',\n        'ion-pristine'\n    ].forEach(function (c) { return classList.remove(c); });\n    classes.forEach(function (c) { return classList.add(c); });\n};\nvar ɵ1 = setClasses;\nvar startsWith = function (input, search) {\n    return input.substr(0, search.length) === search;\n};\nvar ɵ2 = startsWith;\n\nvar BooleanValueAccessor = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(BooleanValueAccessor, _super);\n    function BooleanValueAccessor(injector, el) {\n        return _super.call(this, injector, el) || this;\n    }\n    BooleanValueAccessor_1 = BooleanValueAccessor;\n    BooleanValueAccessor.prototype.writeValue = function (value) {\n        this.el.nativeElement.checked = this.lastValue = value == null ? false : value;\n        setIonicClasses(this.el);\n    };\n    BooleanValueAccessor.prototype._handleIonChange = function (el) {\n        this.handleChangeEvent(el, el.checked);\n    };\n    var BooleanValueAccessor_1;\n    BooleanValueAccessor.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())('ionChange', ['$event.target'])\n    ], BooleanValueAccessor.prototype, \"_handleIonChange\", null);\n    BooleanValueAccessor = BooleanValueAccessor_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n            /* tslint:disable-next-line:directive-selector */\n            selector: 'ion-checkbox,ion-toggle',\n            providers: [\n                {\n                    provide: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/forms'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()),\n                    useExisting: BooleanValueAccessor_1,\n                    multi: true\n                }\n            ]\n        })\n    ], BooleanValueAccessor);\n    return BooleanValueAccessor;\n}(ValueAccessor));\n\nvar NumericValueAccessor = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(NumericValueAccessor, _super);\n    function NumericValueAccessor(injector, el) {\n        return _super.call(this, injector, el) || this;\n    }\n    NumericValueAccessor_1 = NumericValueAccessor;\n    NumericValueAccessor.prototype._handleIonChange = function (el) {\n        this.handleChangeEvent(el, el.value);\n    };\n    NumericValueAccessor.prototype.registerOnChange = function (fn) {\n        _super.prototype.registerOnChange.call(this, function (value) {\n            fn(value === '' ? null : parseFloat(value));\n        });\n    };\n    var NumericValueAccessor_1;\n    NumericValueAccessor.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())('ionChange', ['$event.target'])\n    ], NumericValueAccessor.prototype, \"_handleIonChange\", null);\n    NumericValueAccessor = NumericValueAccessor_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n            /* tslint:disable-next-line:directive-selector */\n            selector: 'ion-input[type=number]',\n            providers: [\n                {\n                    provide: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/forms'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()),\n                    useExisting: NumericValueAccessor_1,\n                    multi: true\n                }\n            ]\n        })\n    ], NumericValueAccessor);\n    return NumericValueAccessor;\n}(ValueAccessor));\n\nvar RadioValueAccessor = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(RadioValueAccessor, _super);\n    function RadioValueAccessor(injector, el) {\n        return _super.call(this, injector, el) || this;\n    }\n    RadioValueAccessor_1 = RadioValueAccessor;\n    RadioValueAccessor.prototype._handleIonSelect = function (el) {\n        this.handleChangeEvent(el, el.checked);\n    };\n    var RadioValueAccessor_1;\n    RadioValueAccessor.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())('ionSelect', ['$event.target'])\n    ], RadioValueAccessor.prototype, \"_handleIonSelect\", null);\n    RadioValueAccessor = RadioValueAccessor_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n            /* tslint:disable-next-line:directive-selector */\n            selector: 'ion-radio',\n            providers: [\n                {\n                    provide: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/forms'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()),\n                    useExisting: RadioValueAccessor_1,\n                    multi: true\n                }\n            ]\n        })\n    ], RadioValueAccessor);\n    return RadioValueAccessor;\n}(ValueAccessor));\n\nvar SelectValueAccessor = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(SelectValueAccessor, _super);\n    function SelectValueAccessor(injector, el) {\n        return _super.call(this, injector, el) || this;\n    }\n    SelectValueAccessor_1 = SelectValueAccessor;\n    SelectValueAccessor.prototype._handleChangeEvent = function (el) {\n        this.handleChangeEvent(el, el.value);\n    };\n    var SelectValueAccessor_1;\n    SelectValueAccessor.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())('ionChange', ['$event.target'])\n    ], SelectValueAccessor.prototype, \"_handleChangeEvent\", null);\n    SelectValueAccessor = SelectValueAccessor_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n            /* tslint:disable-next-line:directive-selector */\n            selector: 'ion-range, ion-select, ion-radio-group, ion-segment, ion-datetime',\n            providers: [\n                {\n                    provide: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/forms'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()),\n                    useExisting: SelectValueAccessor_1,\n                    multi: true\n                }\n            ]\n        })\n    ], SelectValueAccessor);\n    return SelectValueAccessor;\n}(ValueAccessor));\n\nvar TextValueAccessor = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(TextValueAccessor, _super);\n    function TextValueAccessor(injector, el) {\n        return _super.call(this, injector, el) || this;\n    }\n    TextValueAccessor_1 = TextValueAccessor;\n    TextValueAccessor.prototype._handleInputEvent = function (el) {\n        this.handleChangeEvent(el, el.value);\n    };\n    var TextValueAccessor_1;\n    TextValueAccessor.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())('ionChange', ['$event.target'])\n    ], TextValueAccessor.prototype, \"_handleInputEvent\", null);\n    TextValueAccessor = TextValueAccessor_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n            /* tslint:disable-next-line:directive-selector */\n            selector: 'ion-input:not([type=number]),ion-textarea,ion-searchbar',\n            providers: [\n                {\n                    provide: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/forms'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()),\n                    useExisting: TextValueAccessor_1,\n                    multi: true\n                }\n            ]\n        })\n    ], TextValueAccessor);\n    return TextValueAccessor;\n}(ValueAccessor));\n\nvar Platform = /** @class */ (function () {\n    function Platform(doc, zone) {\n        var _this = this;\n        this.doc = doc;\n        /**\n         * @hidden\n         */\n        this.backButton = new Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'rxjs'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())();\n        /**\n         * The keyboardDidShow event emits when the\n         * on-screen keyboard is presented.\n         */\n        this.keyboardDidShow = new Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'rxjs'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())();\n        /**\n         * The keyboardDidHide event emits when the\n         * on-screen keyboard is hidden.\n         */\n        this.keyboardDidHide = new Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'rxjs'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())();\n        /**\n         * The pause event emits when the native platform puts the application\n         * into the background, typically when the user switches to a different\n         * application. This event would emit when a Cordova app is put into\n         * the background, however, it would not fire on a standard web browser.\n         */\n        this.pause = new Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'rxjs'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())();\n        /**\n         * The resume event emits when the native platform pulls the application\n         * out from the background. This event would emit when a Cordova app comes\n         * out from the background, however, it would not fire on a standard web browser.\n         */\n        this.resume = new Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'rxjs'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())();\n        /**\n         * The resize event emits when the browser window has changed dimensions. This\n         * could be from a browser window being physically resized, or from a device\n         * changing orientation.\n         */\n        this.resize = new Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'rxjs'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())();\n        zone.run(function () {\n            _this.win = doc.defaultView;\n            _this.backButton.subscribeWithPriority = function (priority, callback) {\n                return this.subscribe(function (ev) {\n                    return ev.register(priority, function (processNextHandler) { return zone.run(function () { return callback(processNextHandler); }); });\n                });\n            };\n            proxyEvent(_this.pause, doc, 'pause');\n            proxyEvent(_this.resume, doc, 'resume');\n            proxyEvent(_this.backButton, doc, 'ionBackButton');\n            proxyEvent(_this.resize, _this.win, 'resize');\n            proxyEvent(_this.keyboardDidShow, _this.win, 'ionKeyboardDidShow');\n            proxyEvent(_this.keyboardDidHide, _this.win, 'ionKeyboardDidHide');\n            var readyResolve;\n            _this._readyPromise = new Promise(function (res) { readyResolve = res; });\n            if (_this.win && _this.win['cordova']) {\n                doc.addEventListener('deviceready', function () {\n                    readyResolve('cordova');\n                }, { once: true });\n            }\n            else {\n                readyResolve('dom');\n            }\n        });\n    }\n    /**\n     * @returns returns true/false based on platform.\n     * @description\n     * Depending on the platform the user is on, `is(platformName)` will\n     * return `true` or `false`. Note that the same app can return `true`\n     * for more than one platform name. For example, an app running from\n     * an iPad would return `true` for the platform names: `mobile`,\n     * `ios`, `ipad`, and `tablet`. Additionally, if the app was running\n     * from Cordova then `cordova` would be true, and if it was running\n     * from a web browser on the iPad then `mobileweb` would be `true`.\n     *\n     * ```\n     * import { Platform } from 'ionic-angular';\n     *\n     * @Component({...})\n     * export MyPage {\n     *   constructor(public platform: Platform) {\n     *     if (this.platform.is('ios')) {\n     *       // This will only print when on iOS\n     *       console.log('I am an iOS device!');\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * | Platform Name   | Description                        |\n     * |-----------------|------------------------------------|\n     * | android         | on a device running Android.       |\n     * | capacitor       | on a device running Capacitor.     |\n     * | cordova         | on a device running Cordova.       |\n     * | ios             | on a device running iOS.           |\n     * | ipad            | on an iPad device.                 |\n     * | iphone          | on an iPhone device.               |\n     * | phablet         | on a phablet device.               |\n     * | tablet          | on a tablet device.                |\n     * | electron        | in Electron on a desktop device.   |\n     * | pwa             | as a PWA app.                      |\n     * | mobile          | on a mobile device.                |\n     * | mobileweb       | on a mobile device in a browser.   |\n     * | desktop         | on a desktop device.               |\n     * | hybrid          | is a cordova or capacitor app.     |\n     *\n     */\n    Platform.prototype.is = function (platformName) {\n        return (0,_ionic_core__WEBPACK_IMPORTED_MODULE_1__.isPlatform)(this.win, platformName);\n    };\n    /**\n     * @returns the array of platforms\n     * @description\n     * Depending on what device you are on, `platforms` can return multiple values.\n     * Each possible value is a hierarchy of platforms. For example, on an iPhone,\n     * it would return `mobile`, `ios`, and `iphone`.\n     *\n     * ```\n     * import { Platform } from 'ionic-angular';\n     *\n     * @Component({...})\n     * export MyPage {\n     *   constructor(public platform: Platform) {\n     *     // This will print an array of the current platforms\n     *     console.log(this.platform.platforms());\n     *   }\n     * }\n     * ```\n     */\n    Platform.prototype.platforms = function () {\n        return (0,_ionic_core__WEBPACK_IMPORTED_MODULE_1__.getPlatforms)(this.win);\n    };\n    /**\n     * Returns a promise when the platform is ready and native functionality\n     * can be called. If the app is running from within a web browser, then\n     * the promise will resolve when the DOM is ready. When the app is running\n     * from an application engine such as Cordova, then the promise will\n     * resolve when Cordova triggers the `deviceready` event.\n     *\n     * The resolved value is the `readySource`, which states which platform\n     * ready was used. For example, when Cordova is ready, the resolved ready\n     * source is `cordova`. The default ready source value will be `dom`. The\n     * `readySource` is useful if different logic should run depending on the\n     * platform the app is running from. For example, only Cordova can execute\n     * the status bar plugin, so the web should not run status bar plugin logic.\n     *\n     * ```\n     * import { Component } from '@angular/core';\n     * import { Platform } from 'ionic-angular';\n     *\n     * @Component({...})\n     * export MyApp {\n     *   constructor(public platform: Platform) {\n     *     this.platform.ready().then((readySource) => {\n     *       console.log('Platform ready from', readySource);\n     *       // Platform now ready, execute any required native code\n     *     });\n     *   }\n     * }\n     * ```\n     */\n    Platform.prototype.ready = function () {\n        return this._readyPromise;\n    };\n    Object.defineProperty(Platform.prototype, \"isRTL\", {\n        /**\n         * Returns if this app is using right-to-left language direction or not.\n         * We recommend the app's `index.html` file already has the correct `dir`\n         * attribute value set, such as `<html dir=\"ltr\">` or `<html dir=\"rtl\">`.\n         * [W3C: Structural markup and right-to-left text in HTML](http://www.w3.org/International/questions/qa-html-dir)\n         */\n        get: function () {\n            return this.doc.dir === 'rtl';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Get the query string parameter\n     */\n    Platform.prototype.getQueryParam = function (key) {\n        return readQueryParam(this.win.location.href, key);\n    };\n    /**\n     * Returns `true` if the app is in landscape mode.\n     */\n    Platform.prototype.isLandscape = function () {\n        return !this.isPortrait();\n    };\n    /**\n     * Returns `true` if the app is in portrait mode.\n     */\n    Platform.prototype.isPortrait = function () {\n        return this.win.matchMedia && this.win.matchMedia('(orientation: portrait)').matches;\n    };\n    Platform.prototype.testUserAgent = function (expression) {\n        var nav = this.win.navigator;\n        return !!(nav && nav.userAgent && nav.userAgent.indexOf(expression) >= 0);\n    };\n    /**\n     * Get the current url.\n     */\n    Platform.prototype.url = function () {\n        return this.win.location.href;\n    };\n    /**\n     * Gets the width of the platform's viewport using `window.innerWidth`.\n     */\n    Platform.prototype.width = function () {\n        return this.win.innerWidth;\n    };\n    /**\n     * Gets the height of the platform's viewport using `window.innerHeight`.\n     */\n    Platform.prototype.height = function () {\n        return this.win.innerHeight;\n    };\n    Platform.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), args: [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/common'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()),] }] },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    Platform.ngInjectableDef = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ factory: function Platform_Factory() { return new Platform(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/common'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())), Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()))); }, token: Platform, providedIn: \"root\" });\n    Platform = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n            providedIn: 'root',\n        }),\n        (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__param)(0, Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/common'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())))\n    ], Platform);\n    return Platform;\n}());\nvar readQueryParam = function (url, key) {\n    key = key.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n    var regex = new RegExp('[\\\\?&]' + key + '=([^&#]*)');\n    var results = regex.exec(url);\n    return results ? decodeURIComponent(results[1].replace(/\\+/g, ' ')) : null;\n};\nvar ɵ0$1 = readQueryParam;\nvar proxyEvent = function (emitter, el, eventName) {\n    if (el) {\n        el.addEventListener(eventName, function (ev) {\n            // ?? cordova might emit \"null\" events\n            emitter.next(ev != null ? ev.detail : undefined);\n        });\n    }\n};\nvar ɵ1$1 = proxyEvent;\n\nvar NavController = /** @class */ (function () {\n    function NavController(platform, location, serializer, router) {\n        var _this = this;\n        this.location = location;\n        this.serializer = serializer;\n        this.router = router;\n        this.direction = DEFAULT_DIRECTION;\n        this.animated = DEFAULT_ANIMATED;\n        this.guessDirection = 'forward';\n        this.lastNavId = -1;\n        // Subscribe to router events to detect direction\n        if (router) {\n            router.events.subscribe(function (ev) {\n                if (ev instanceof Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/router'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())) {\n                    var id = (ev.restoredState) ? ev.restoredState.navigationId : ev.id;\n                    _this.guessDirection = id < _this.lastNavId ? 'back' : 'forward';\n                    _this.guessAnimation = !ev.restoredState ? _this.guessDirection : undefined;\n                    _this.lastNavId = _this.guessDirection === 'forward' ? ev.id : id;\n                }\n            });\n        }\n        // Subscribe to backButton events\n        platform.backButton.subscribeWithPriority(0, function (processNextHandler) {\n            _this.pop();\n            processNextHandler();\n        });\n    }\n    /**\n     * This method uses Angular's [Router](https://angular.io/api/router/Router) under the hood,\n     * it's equivalent to calling `this.router.navigateByUrl()`, but it's explicit about the **direction** of the transition.\n     *\n     * Going **forward** means that a new page is going to be pushed to the stack of the outlet (ion-router-outlet),\n     * and that it will show a \"forward\" animation by default.\n     *\n     * Navigating forward can also be triggered in a declarative manner by using the `[routerDirection]` directive:\n     *\n     * ```html\n     * <a routerLink=\"/path/to/page\" routerDirection=\"forward\">Link</a>\n     * ```\n     */\n    NavController.prototype.navigateForward = function (url, options) {\n        if (options === void 0) { options = {}; }\n        this.setDirection('forward', options.animated, options.animationDirection, options.animation);\n        return this.navigate(url, options);\n    };\n    /**\n     * This method uses Angular's [Router](https://angular.io/api/router/Router) under the hood,\n     * it's equivalent to calling:\n     *\n     * ```ts\n     * this.navController.setDirection('back');\n     * this.router.navigateByUrl(path);\n     * ```\n     *\n     * Going **back** means that all the pages in the stack until the navigated page is found will be popped,\n     * and that it will show a \"back\" animation by default.\n     *\n     * Navigating back can also be triggered in a declarative manner by using the `[routerDirection]` directive:\n     *\n     * ```html\n     * <a routerLink=\"/path/to/page\" routerDirection=\"back\">Link</a>\n     * ```\n     */\n    NavController.prototype.navigateBack = function (url, options) {\n        if (options === void 0) { options = {}; }\n        this.setDirection('back', options.animated, options.animationDirection, options.animation);\n        return this.navigate(url, options);\n    };\n    /**\n     * This method uses Angular's [Router](https://angular.io/api/router/Router) under the hood,\n     * it's equivalent to calling:\n     *\n     * ```ts\n     * this.navController.setDirection('root');\n     * this.router.navigateByUrl(path);\n     * ```\n     *\n     * Going **root** means that all existing pages in the stack will be removed,\n     * and the navigated page will become the single page in the stack.\n     *\n     * Navigating root can also be triggered in a declarative manner by using the `[routerDirection]` directive:\n     *\n     * ```html\n     * <a routerLink=\"/path/to/page\" routerDirection=\"root\">Link</a>\n     * ```\n     */\n    NavController.prototype.navigateRoot = function (url, options) {\n        if (options === void 0) { options = {}; }\n        this.setDirection('root', options.animated, options.animationDirection, options.animation);\n        return this.navigate(url, options);\n    };\n    /**\n     * Same as [Location](https://angular.io/api/common/Location)'s back() method.\n     * It will use the standard `window.history.back()` under the hood, but featuring a `back` animation\n     * by default.\n     */\n    NavController.prototype.back = function (options) {\n        if (options === void 0) { options = { animated: true, animationDirection: 'back' }; }\n        this.setDirection('back', options.animated, options.animationDirection, options.animation);\n        return this.location.back();\n    };\n    /**\n     * This methods goes back in the context of Ionic's stack navigation.\n     *\n     * It recursively finds the top active `ion-router-outlet` and calls `pop()`.\n     * This is the recommended way to go back when you are using `ion-router-outlet`.\n     */\n    NavController.prototype.pop = function () {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function () {\n            var outlet;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__generator)(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        outlet = this.topOutlet;\n                        _a.label = 1;\n                    case 1:\n                        if (!outlet) return [3 /*break*/, 3];\n                        return [4 /*yield*/, outlet.pop()];\n                    case 2:\n                        if (_a.sent()) {\n                            return [3 /*break*/, 3];\n                        }\n                        else {\n                            outlet = outlet.parentOutlet;\n                        }\n                        return [3 /*break*/, 1];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This methods specifies the direction of the next navigation performed by the Angular router.\n     *\n     * `setDirection()` does not trigger any transition, it just sets some flags to be consumed by `ion-router-outlet`.\n     *\n     * It's recommended to use `navigateForward()`, `navigateBack()` and `navigateRoot()` instead of `setDirection()`.\n     */\n    NavController.prototype.setDirection = function (direction, animated, animationDirection, animationBuilder) {\n        this.direction = direction;\n        this.animated = getAnimation(direction, animated, animationDirection);\n        this.animationBuilder = animationBuilder;\n    };\n    /**\n     * @internal\n     */\n    NavController.prototype.setTopOutlet = function (outlet) {\n        this.topOutlet = outlet;\n    };\n    /**\n     * @internal\n     */\n    NavController.prototype.consumeTransition = function () {\n        var direction = 'root';\n        var animation;\n        var animationBuilder = this.animationBuilder;\n        if (this.direction === 'auto') {\n            direction = this.guessDirection;\n            animation = this.guessAnimation;\n        }\n        else {\n            animation = this.animated;\n            direction = this.direction;\n        }\n        this.direction = DEFAULT_DIRECTION;\n        this.animated = DEFAULT_ANIMATED;\n        this.animationBuilder = undefined;\n        return {\n            direction: direction,\n            animation: animation,\n            animationBuilder: animationBuilder\n        };\n    };\n    NavController.prototype.navigate = function (url, options) {\n        if (Array.isArray(url)) {\n            return this.router.navigate(url, options);\n        }\n        else {\n            /**\n             * navigateByUrl ignores any properties that\n             * would change the url, so things like queryParams\n             * would be ignored unless we create a url tree\n             * More Info: https://github.com/angular/angular/issues/18798\n             */\n            var urlTree = this.serializer.parse(url.toString());\n            if (options.queryParams !== undefined) {\n                urlTree.queryParams = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options.queryParams);\n            }\n            if (options.fragment !== undefined) {\n                urlTree.fragment = options.fragment;\n            }\n            /**\n             * `navigateByUrl` will still apply `NavigationExtras` properties\n             * that do not modify the url, such as `replaceUrl` which is why\n             * `options` is passed in here.\n             */\n            return this.router.navigateByUrl(urlTree, options);\n        }\n    };\n    NavController.ctorParameters = function () { return [\n        { type: Platform },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/common'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/router'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/router'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), decorators: [{ type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }] }\n    ]; };\n    NavController.ngInjectableDef = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ factory: function NavController_Factory() { return new NavController(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(Platform), Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/common'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())), Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/router'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())), Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/router'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), 8)); }, token: NavController, providedIn: \"root\" });\n    NavController = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n            providedIn: 'root',\n        }),\n        (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__param)(3, Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())())\n    ], NavController);\n    return NavController;\n}());\nvar getAnimation = function (direction, animated, animationDirection) {\n    if (animated === false) {\n        return undefined;\n    }\n    if (animationDirection !== undefined) {\n        return animationDirection;\n    }\n    if (direction === 'forward' || direction === 'back') {\n        return direction;\n    }\n    else if (direction === 'root' && animated === true) {\n        return 'forward';\n    }\n    return undefined;\n};\nvar ɵ0$2 = getAnimation;\nvar DEFAULT_DIRECTION = 'auto';\nvar DEFAULT_ANIMATED = undefined;\n\n/* eslint-disable */\nvar proxyInputs = function (Cmp, inputs) {\n    var Prototype = Cmp.prototype;\n    inputs.forEach(function (item) {\n        Object.defineProperty(Prototype, item, {\n            get: function () {\n                return this.el[item];\n            },\n            set: function (val) {\n                var _this = this;\n                this.z.runOutsideAngular(function () { return (_this.el[item] = val); });\n            }\n        });\n    });\n};\nvar proxyMethods = function (Cmp, methods) {\n    var Prototype = Cmp.prototype;\n    methods.forEach(function (methodName) {\n        Prototype[methodName] = function () {\n            var _this = this;\n            var args = arguments;\n            return this.z.runOutsideAngular(function () {\n                return _this.el[methodName].apply(_this.el, args);\n            });\n        };\n    });\n};\nvar proxyOutputs = function (instance, el, events) {\n    events.forEach(function (eventName) { return instance[eventName] = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'rxjs'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(el, eventName); });\n};\nfunction ProxyCmp(opts) {\n    var decorator = function (cls) {\n        if (opts.inputs) {\n            proxyInputs(cls, opts.inputs);\n        }\n        if (opts.methods) {\n            proxyMethods(cls, opts.methods);\n        }\n        return cls;\n    };\n    return decorator;\n}\n\nvar IonApp = /** @class */ (function () {\n    function IonApp(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonApp.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonApp = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-app\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\" })\n    ], IonApp);\n    return IonApp;\n}());\nvar IonAvatar = /** @class */ (function () {\n    function IonAvatar(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonAvatar.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonAvatar = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-avatar\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\" })\n    ], IonAvatar);\n    return IonAvatar;\n}());\nvar IonBackButton = /** @class */ (function () {\n    function IonBackButton(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonBackButton.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonBackButton = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"color\", \"defaultHref\", \"disabled\", \"icon\", \"mode\", \"routerAnimation\", \"text\", \"type\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-back-button\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"color\", \"defaultHref\", \"disabled\", \"icon\", \"mode\", \"routerAnimation\", \"text\", \"type\"] })\n    ], IonBackButton);\n    return IonBackButton;\n}());\nvar IonBackdrop = /** @class */ (function () {\n    function IonBackdrop(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n        proxyOutputs(this, this.el, [\"ionBackdropTap\"]);\n    }\n    IonBackdrop.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonBackdrop = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"stopPropagation\", \"tappable\", \"visible\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-backdrop\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"stopPropagation\", \"tappable\", \"visible\"] })\n    ], IonBackdrop);\n    return IonBackdrop;\n}());\nvar IonBadge = /** @class */ (function () {\n    function IonBadge(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonBadge.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonBadge = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"color\", \"mode\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-badge\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"color\", \"mode\"] })\n    ], IonBadge);\n    return IonBadge;\n}());\nvar IonButton = /** @class */ (function () {\n    function IonButton(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n        proxyOutputs(this, this.el, [\"ionFocus\", \"ionBlur\"]);\n    }\n    IonButton.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonButton = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"buttonType\", \"color\", \"disabled\", \"download\", \"expand\", \"fill\", \"href\", \"mode\", \"rel\", \"routerAnimation\", \"routerDirection\", \"shape\", \"size\", \"strong\", \"target\", \"type\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-button\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"buttonType\", \"color\", \"disabled\", \"download\", \"expand\", \"fill\", \"href\", \"mode\", \"rel\", \"routerAnimation\", \"routerDirection\", \"shape\", \"size\", \"strong\", \"target\", \"type\"] })\n    ], IonButton);\n    return IonButton;\n}());\nvar IonButtons = /** @class */ (function () {\n    function IonButtons(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonButtons.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonButtons = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"collapse\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-buttons\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"collapse\"] })\n    ], IonButtons);\n    return IonButtons;\n}());\nvar IonCard = /** @class */ (function () {\n    function IonCard(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonCard.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonCard = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"button\", \"color\", \"disabled\", \"download\", \"href\", \"mode\", \"rel\", \"routerAnimation\", \"routerDirection\", \"target\", \"type\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-card\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"button\", \"color\", \"disabled\", \"download\", \"href\", \"mode\", \"rel\", \"routerAnimation\", \"routerDirection\", \"target\", \"type\"] })\n    ], IonCard);\n    return IonCard;\n}());\nvar IonCardContent = /** @class */ (function () {\n    function IonCardContent(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonCardContent.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonCardContent = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"mode\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-card-content\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"mode\"] })\n    ], IonCardContent);\n    return IonCardContent;\n}());\nvar IonCardHeader = /** @class */ (function () {\n    function IonCardHeader(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonCardHeader.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonCardHeader = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"color\", \"mode\", \"translucent\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-card-header\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"color\", \"mode\", \"translucent\"] })\n    ], IonCardHeader);\n    return IonCardHeader;\n}());\nvar IonCardSubtitle = /** @class */ (function () {\n    function IonCardSubtitle(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonCardSubtitle.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonCardSubtitle = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"color\", \"mode\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-card-subtitle\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"color\", \"mode\"] })\n    ], IonCardSubtitle);\n    return IonCardSubtitle;\n}());\nvar IonCardTitle = /** @class */ (function () {\n    function IonCardTitle(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonCardTitle.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonCardTitle = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"color\", \"mode\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-card-title\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"color\", \"mode\"] })\n    ], IonCardTitle);\n    return IonCardTitle;\n}());\nvar IonCheckbox = /** @class */ (function () {\n    function IonCheckbox(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n        proxyOutputs(this, this.el, [\"ionChange\", \"ionFocus\", \"ionBlur\"]);\n    }\n    IonCheckbox.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonCheckbox = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"checked\", \"color\", \"disabled\", \"indeterminate\", \"mode\", \"name\", \"value\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-checkbox\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"checked\", \"color\", \"disabled\", \"indeterminate\", \"mode\", \"name\", \"value\"] })\n    ], IonCheckbox);\n    return IonCheckbox;\n}());\nvar IonChip = /** @class */ (function () {\n    function IonChip(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonChip.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonChip = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"color\", \"disabled\", \"mode\", \"outline\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-chip\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"color\", \"disabled\", \"mode\", \"outline\"] })\n    ], IonChip);\n    return IonChip;\n}());\nvar IonCol = /** @class */ (function () {\n    function IonCol(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonCol.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonCol = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"offset\", \"offsetLg\", \"offsetMd\", \"offsetSm\", \"offsetXl\", \"offsetXs\", \"pull\", \"pullLg\", \"pullMd\", \"pullSm\", \"pullXl\", \"pullXs\", \"push\", \"pushLg\", \"pushMd\", \"pushSm\", \"pushXl\", \"pushXs\", \"size\", \"sizeLg\", \"sizeMd\", \"sizeSm\", \"sizeXl\", \"sizeXs\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-col\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"offset\", \"offsetLg\", \"offsetMd\", \"offsetSm\", \"offsetXl\", \"offsetXs\", \"pull\", \"pullLg\", \"pullMd\", \"pullSm\", \"pullXl\", \"pullXs\", \"push\", \"pushLg\", \"pushMd\", \"pushSm\", \"pushXl\", \"pushXs\", \"size\", \"sizeLg\", \"sizeMd\", \"sizeSm\", \"sizeXl\", \"sizeXs\"] })\n    ], IonCol);\n    return IonCol;\n}());\nvar IonContent = /** @class */ (function () {\n    function IonContent(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n        proxyOutputs(this, this.el, [\"ionScrollStart\", \"ionScroll\", \"ionScrollEnd\"]);\n    }\n    IonContent.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonContent = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"color\", \"forceOverscroll\", \"fullscreen\", \"scrollEvents\", \"scrollX\", \"scrollY\"], \"methods\": [\"getScrollElement\", \"scrollToTop\", \"scrollToBottom\", \"scrollByPoint\", \"scrollToPoint\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-content\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"color\", \"forceOverscroll\", \"fullscreen\", \"scrollEvents\", \"scrollX\", \"scrollY\"] })\n    ], IonContent);\n    return IonContent;\n}());\nvar IonDatetime = /** @class */ (function () {\n    function IonDatetime(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n        proxyOutputs(this, this.el, [\"ionCancel\", \"ionChange\", \"ionFocus\", \"ionBlur\"]);\n    }\n    IonDatetime.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonDatetime = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"cancelText\", \"dayNames\", \"dayShortNames\", \"dayValues\", \"disabled\", \"displayFormat\", \"displayTimezone\", \"doneText\", \"hourValues\", \"max\", \"min\", \"minuteValues\", \"mode\", \"monthNames\", \"monthShortNames\", \"monthValues\", \"name\", \"pickerFormat\", \"pickerOptions\", \"placeholder\", \"readonly\", \"value\", \"yearValues\"], \"methods\": [\"open\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-datetime\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"cancelText\", \"dayNames\", \"dayShortNames\", \"dayValues\", \"disabled\", \"displayFormat\", \"displayTimezone\", \"doneText\", \"hourValues\", \"max\", \"min\", \"minuteValues\", \"mode\", \"monthNames\", \"monthShortNames\", \"monthValues\", \"name\", \"pickerFormat\", \"pickerOptions\", \"placeholder\", \"readonly\", \"value\", \"yearValues\"] })\n    ], IonDatetime);\n    return IonDatetime;\n}());\nvar IonFab = /** @class */ (function () {\n    function IonFab(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonFab.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonFab = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"activated\", \"edge\", \"horizontal\", \"vertical\"], \"methods\": [\"close\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-fab\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"activated\", \"edge\", \"horizontal\", \"vertical\"] })\n    ], IonFab);\n    return IonFab;\n}());\nvar IonFabButton = /** @class */ (function () {\n    function IonFabButton(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n        proxyOutputs(this, this.el, [\"ionFocus\", \"ionBlur\"]);\n    }\n    IonFabButton.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonFabButton = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"activated\", \"closeIcon\", \"color\", \"disabled\", \"download\", \"href\", \"mode\", \"rel\", \"routerAnimation\", \"routerDirection\", \"show\", \"size\", \"target\", \"translucent\", \"type\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-fab-button\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"activated\", \"closeIcon\", \"color\", \"disabled\", \"download\", \"href\", \"mode\", \"rel\", \"routerAnimation\", \"routerDirection\", \"show\", \"size\", \"target\", \"translucent\", \"type\"] })\n    ], IonFabButton);\n    return IonFabButton;\n}());\nvar IonFabList = /** @class */ (function () {\n    function IonFabList(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonFabList.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonFabList = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"activated\", \"side\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-fab-list\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"activated\", \"side\"] })\n    ], IonFabList);\n    return IonFabList;\n}());\nvar IonFooter = /** @class */ (function () {\n    function IonFooter(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonFooter.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonFooter = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"mode\", \"translucent\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-footer\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"mode\", \"translucent\"] })\n    ], IonFooter);\n    return IonFooter;\n}());\nvar IonGrid = /** @class */ (function () {\n    function IonGrid(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonGrid.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonGrid = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"fixed\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-grid\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"fixed\"] })\n    ], IonGrid);\n    return IonGrid;\n}());\nvar IonHeader = /** @class */ (function () {\n    function IonHeader(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonHeader.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonHeader = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"collapse\", \"mode\", \"translucent\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-header\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"collapse\", \"mode\", \"translucent\"] })\n    ], IonHeader);\n    return IonHeader;\n}());\nvar IonIcon = /** @class */ (function () {\n    function IonIcon(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonIcon.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonIcon = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"ariaHidden\", \"ariaLabel\", \"color\", \"flipRtl\", \"icon\", \"ios\", \"lazy\", \"md\", \"mode\", \"name\", \"sanitize\", \"size\", \"src\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-icon\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"ariaHidden\", \"ariaLabel\", \"color\", \"flipRtl\", \"icon\", \"ios\", \"lazy\", \"md\", \"mode\", \"name\", \"sanitize\", \"size\", \"src\"] })\n    ], IonIcon);\n    return IonIcon;\n}());\nvar IonImg = /** @class */ (function () {\n    function IonImg(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n        proxyOutputs(this, this.el, [\"ionImgWillLoad\", \"ionImgDidLoad\", \"ionError\"]);\n    }\n    IonImg.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonImg = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"alt\", \"src\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-img\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"alt\", \"src\"] })\n    ], IonImg);\n    return IonImg;\n}());\nvar IonInfiniteScroll = /** @class */ (function () {\n    function IonInfiniteScroll(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n        proxyOutputs(this, this.el, [\"ionInfinite\"]);\n    }\n    IonInfiniteScroll.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonInfiniteScroll = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"disabled\", \"position\", \"threshold\"], \"methods\": [\"complete\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-infinite-scroll\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"disabled\", \"position\", \"threshold\"] })\n    ], IonInfiniteScroll);\n    return IonInfiniteScroll;\n}());\nvar IonInfiniteScrollContent = /** @class */ (function () {\n    function IonInfiniteScrollContent(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonInfiniteScrollContent.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonInfiniteScrollContent = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"loadingSpinner\", \"loadingText\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-infinite-scroll-content\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"loadingSpinner\", \"loadingText\"] })\n    ], IonInfiniteScrollContent);\n    return IonInfiniteScrollContent;\n}());\nvar IonInput = /** @class */ (function () {\n    function IonInput(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n        proxyOutputs(this, this.el, [\"ionInput\", \"ionChange\", \"ionBlur\", \"ionFocus\"]);\n    }\n    IonInput.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonInput = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"accept\", \"autocapitalize\", \"autocomplete\", \"autocorrect\", \"autofocus\", \"clearInput\", \"clearOnEdit\", \"color\", \"debounce\", \"disabled\", \"enterkeyhint\", \"inputmode\", \"max\", \"maxlength\", \"min\", \"minlength\", \"mode\", \"multiple\", \"name\", \"pattern\", \"placeholder\", \"readonly\", \"required\", \"size\", \"spellcheck\", \"step\", \"type\", \"value\"], \"methods\": [\"setFocus\", \"getInputElement\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-input\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"accept\", \"autocapitalize\", \"autocomplete\", \"autocorrect\", \"autofocus\", \"clearInput\", \"clearOnEdit\", \"color\", \"debounce\", \"disabled\", \"enterkeyhint\", \"inputmode\", \"max\", \"maxlength\", \"min\", \"minlength\", \"mode\", \"multiple\", \"name\", \"pattern\", \"placeholder\", \"readonly\", \"required\", \"size\", \"spellcheck\", \"step\", \"type\", \"value\"] })\n    ], IonInput);\n    return IonInput;\n}());\nvar IonItem = /** @class */ (function () {\n    function IonItem(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonItem.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonItem = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"button\", \"color\", \"detail\", \"detailIcon\", \"disabled\", \"download\", \"href\", \"lines\", \"mode\", \"rel\", \"routerAnimation\", \"routerDirection\", \"target\", \"type\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-item\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"button\", \"color\", \"detail\", \"detailIcon\", \"disabled\", \"download\", \"href\", \"lines\", \"mode\", \"rel\", \"routerAnimation\", \"routerDirection\", \"target\", \"type\"] })\n    ], IonItem);\n    return IonItem;\n}());\nvar IonItemDivider = /** @class */ (function () {\n    function IonItemDivider(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonItemDivider.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonItemDivider = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"color\", \"mode\", \"sticky\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-item-divider\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"color\", \"mode\", \"sticky\"] })\n    ], IonItemDivider);\n    return IonItemDivider;\n}());\nvar IonItemGroup = /** @class */ (function () {\n    function IonItemGroup(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonItemGroup.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonItemGroup = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-item-group\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\" })\n    ], IonItemGroup);\n    return IonItemGroup;\n}());\nvar IonItemOption = /** @class */ (function () {\n    function IonItemOption(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonItemOption.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonItemOption = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"color\", \"disabled\", \"download\", \"expandable\", \"href\", \"mode\", \"rel\", \"target\", \"type\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-item-option\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"color\", \"disabled\", \"download\", \"expandable\", \"href\", \"mode\", \"rel\", \"target\", \"type\"] })\n    ], IonItemOption);\n    return IonItemOption;\n}());\nvar IonItemOptions = /** @class */ (function () {\n    function IonItemOptions(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n        proxyOutputs(this, this.el, [\"ionSwipe\"]);\n    }\n    IonItemOptions.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonItemOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"side\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-item-options\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"side\"] })\n    ], IonItemOptions);\n    return IonItemOptions;\n}());\nvar IonItemSliding = /** @class */ (function () {\n    function IonItemSliding(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n        proxyOutputs(this, this.el, [\"ionDrag\"]);\n    }\n    IonItemSliding.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonItemSliding = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"disabled\"], \"methods\": [\"getOpenAmount\", \"getSlidingRatio\", \"open\", \"close\", \"closeOpened\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-item-sliding\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"disabled\"] })\n    ], IonItemSliding);\n    return IonItemSliding;\n}());\nvar IonLabel = /** @class */ (function () {\n    function IonLabel(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonLabel.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonLabel = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"color\", \"mode\", \"position\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-label\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"color\", \"mode\", \"position\"] })\n    ], IonLabel);\n    return IonLabel;\n}());\nvar IonList = /** @class */ (function () {\n    function IonList(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonList.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonList = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"inset\", \"lines\", \"mode\"], \"methods\": [\"closeSlidingItems\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-list\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"inset\", \"lines\", \"mode\"] })\n    ], IonList);\n    return IonList;\n}());\nvar IonListHeader = /** @class */ (function () {\n    function IonListHeader(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonListHeader.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonListHeader = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"color\", \"lines\", \"mode\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-list-header\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"color\", \"lines\", \"mode\"] })\n    ], IonListHeader);\n    return IonListHeader;\n}());\nvar IonMenu = /** @class */ (function () {\n    function IonMenu(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n        proxyOutputs(this, this.el, [\"ionWillOpen\", \"ionWillClose\", \"ionDidOpen\", \"ionDidClose\"]);\n    }\n    IonMenu.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonMenu = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"contentId\", \"disabled\", \"maxEdgeStart\", \"menuId\", \"side\", \"swipeGesture\", \"type\"], \"methods\": [\"isOpen\", \"isActive\", \"open\", \"close\", \"toggle\", \"setOpen\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-menu\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"contentId\", \"disabled\", \"maxEdgeStart\", \"menuId\", \"side\", \"swipeGesture\", \"type\"] })\n    ], IonMenu);\n    return IonMenu;\n}());\nvar IonMenuButton = /** @class */ (function () {\n    function IonMenuButton(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonMenuButton.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonMenuButton = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"autoHide\", \"color\", \"disabled\", \"menu\", \"mode\", \"type\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-menu-button\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"autoHide\", \"color\", \"disabled\", \"menu\", \"mode\", \"type\"] })\n    ], IonMenuButton);\n    return IonMenuButton;\n}());\nvar IonMenuToggle = /** @class */ (function () {\n    function IonMenuToggle(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonMenuToggle.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonMenuToggle = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"autoHide\", \"menu\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-menu-toggle\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"autoHide\", \"menu\"] })\n    ], IonMenuToggle);\n    return IonMenuToggle;\n}());\nvar IonNav = /** @class */ (function () {\n    function IonNav(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n        proxyOutputs(this, this.el, [\"ionNavWillChange\", \"ionNavDidChange\"]);\n    }\n    IonNav.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonNav = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"animated\", \"animation\", \"root\", \"rootParams\", \"swipeGesture\"], \"methods\": [\"push\", \"insert\", \"insertPages\", \"pop\", \"popTo\", \"popToRoot\", \"removeIndex\", \"setRoot\", \"setPages\", \"getActive\", \"getByIndex\", \"canGoBack\", \"getPrevious\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-nav\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"animated\", \"animation\", \"root\", \"rootParams\", \"swipeGesture\"] })\n    ], IonNav);\n    return IonNav;\n}());\nvar IonNavLink = /** @class */ (function () {\n    function IonNavLink(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonNavLink.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonNavLink = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"component\", \"componentProps\", \"routerAnimation\", \"routerDirection\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-nav-link\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"component\", \"componentProps\", \"routerAnimation\", \"routerDirection\"] })\n    ], IonNavLink);\n    return IonNavLink;\n}());\nvar IonNote = /** @class */ (function () {\n    function IonNote(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonNote.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonNote = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"color\", \"mode\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-note\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"color\", \"mode\"] })\n    ], IonNote);\n    return IonNote;\n}());\nvar IonProgressBar = /** @class */ (function () {\n    function IonProgressBar(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonProgressBar.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonProgressBar = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"buffer\", \"color\", \"mode\", \"reversed\", \"type\", \"value\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-progress-bar\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"buffer\", \"color\", \"mode\", \"reversed\", \"type\", \"value\"] })\n    ], IonProgressBar);\n    return IonProgressBar;\n}());\nvar IonRadio = /** @class */ (function () {\n    function IonRadio(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n        proxyOutputs(this, this.el, [\"ionFocus\", \"ionBlur\"]);\n    }\n    IonRadio.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonRadio = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"color\", \"disabled\", \"mode\", \"name\", \"value\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-radio\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"color\", \"disabled\", \"mode\", \"name\", \"value\"] })\n    ], IonRadio);\n    return IonRadio;\n}());\nvar IonRadioGroup = /** @class */ (function () {\n    function IonRadioGroup(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n        proxyOutputs(this, this.el, [\"ionChange\"]);\n    }\n    IonRadioGroup.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonRadioGroup = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"allowEmptySelection\", \"name\", \"value\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-radio-group\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"allowEmptySelection\", \"name\", \"value\"] })\n    ], IonRadioGroup);\n    return IonRadioGroup;\n}());\nvar IonRange = /** @class */ (function () {\n    function IonRange(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n        proxyOutputs(this, this.el, [\"ionChange\", \"ionFocus\", \"ionBlur\"]);\n    }\n    IonRange.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonRange = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"color\", \"debounce\", \"disabled\", \"dualKnobs\", \"max\", \"min\", \"mode\", \"name\", \"pin\", \"snaps\", \"step\", \"ticks\", \"value\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-range\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"color\", \"debounce\", \"disabled\", \"dualKnobs\", \"max\", \"min\", \"mode\", \"name\", \"pin\", \"snaps\", \"step\", \"ticks\", \"value\"] })\n    ], IonRange);\n    return IonRange;\n}());\nvar IonRefresher = /** @class */ (function () {\n    function IonRefresher(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n        proxyOutputs(this, this.el, [\"ionRefresh\", \"ionPull\", \"ionStart\"]);\n    }\n    IonRefresher.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonRefresher = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"closeDuration\", \"disabled\", \"pullFactor\", \"pullMax\", \"pullMin\", \"snapbackDuration\"], \"methods\": [\"complete\", \"cancel\", \"getProgress\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-refresher\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"closeDuration\", \"disabled\", \"pullFactor\", \"pullMax\", \"pullMin\", \"snapbackDuration\"] })\n    ], IonRefresher);\n    return IonRefresher;\n}());\nvar IonRefresherContent = /** @class */ (function () {\n    function IonRefresherContent(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonRefresherContent.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonRefresherContent = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"pullingIcon\", \"pullingText\", \"refreshingSpinner\", \"refreshingText\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-refresher-content\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"pullingIcon\", \"pullingText\", \"refreshingSpinner\", \"refreshingText\"] })\n    ], IonRefresherContent);\n    return IonRefresherContent;\n}());\nvar IonReorder = /** @class */ (function () {\n    function IonReorder(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonReorder.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonReorder = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-reorder\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\" })\n    ], IonReorder);\n    return IonReorder;\n}());\nvar IonReorderGroup = /** @class */ (function () {\n    function IonReorderGroup(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n        proxyOutputs(this, this.el, [\"ionItemReorder\"]);\n    }\n    IonReorderGroup.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonReorderGroup = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"disabled\"], \"methods\": [\"complete\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-reorder-group\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"disabled\"] })\n    ], IonReorderGroup);\n    return IonReorderGroup;\n}());\nvar IonRippleEffect = /** @class */ (function () {\n    function IonRippleEffect(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonRippleEffect.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonRippleEffect = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"type\"], \"methods\": [\"addRipple\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-ripple-effect\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"type\"] })\n    ], IonRippleEffect);\n    return IonRippleEffect;\n}());\nvar IonRow = /** @class */ (function () {\n    function IonRow(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonRow.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonRow = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-row\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\" })\n    ], IonRow);\n    return IonRow;\n}());\nvar IonSearchbar = /** @class */ (function () {\n    function IonSearchbar(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n        proxyOutputs(this, this.el, [\"ionInput\", \"ionChange\", \"ionCancel\", \"ionClear\", \"ionBlur\", \"ionFocus\"]);\n    }\n    IonSearchbar.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonSearchbar = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"animated\", \"autocomplete\", \"autocorrect\", \"cancelButtonIcon\", \"cancelButtonText\", \"clearIcon\", \"color\", \"debounce\", \"disabled\", \"enterkeyhint\", \"inputmode\", \"mode\", \"placeholder\", \"searchIcon\", \"showCancelButton\", \"showClearButton\", \"spellcheck\", \"type\", \"value\"], \"methods\": [\"setFocus\", \"getInputElement\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-searchbar\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"animated\", \"autocomplete\", \"autocorrect\", \"cancelButtonIcon\", \"cancelButtonText\", \"clearIcon\", \"color\", \"debounce\", \"disabled\", \"enterkeyhint\", \"inputmode\", \"mode\", \"placeholder\", \"searchIcon\", \"showCancelButton\", \"showClearButton\", \"spellcheck\", \"type\", \"value\"] })\n    ], IonSearchbar);\n    return IonSearchbar;\n}());\nvar IonSegment = /** @class */ (function () {\n    function IonSegment(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n        proxyOutputs(this, this.el, [\"ionChange\"]);\n    }\n    IonSegment.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonSegment = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"color\", \"disabled\", \"mode\", \"scrollable\", \"swipeGesture\", \"value\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-segment\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"color\", \"disabled\", \"mode\", \"scrollable\", \"swipeGesture\", \"value\"] })\n    ], IonSegment);\n    return IonSegment;\n}());\nvar IonSegmentButton = /** @class */ (function () {\n    function IonSegmentButton(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonSegmentButton.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonSegmentButton = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"disabled\", \"layout\", \"mode\", \"type\", \"value\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-segment-button\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"disabled\", \"layout\", \"mode\", \"type\", \"value\"] })\n    ], IonSegmentButton);\n    return IonSegmentButton;\n}());\nvar IonSelect = /** @class */ (function () {\n    function IonSelect(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n        proxyOutputs(this, this.el, [\"ionChange\", \"ionCancel\", \"ionFocus\", \"ionBlur\"]);\n    }\n    IonSelect.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonSelect = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"cancelText\", \"compareWith\", \"disabled\", \"interface\", \"interfaceOptions\", \"mode\", \"multiple\", \"name\", \"okText\", \"placeholder\", \"selectedText\", \"value\"], \"methods\": [\"open\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-select\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"cancelText\", \"compareWith\", \"disabled\", \"interface\", \"interfaceOptions\", \"mode\", \"multiple\", \"name\", \"okText\", \"placeholder\", \"selectedText\", \"value\"] })\n    ], IonSelect);\n    return IonSelect;\n}());\nvar IonSelectOption = /** @class */ (function () {\n    function IonSelectOption(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonSelectOption.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonSelectOption = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"disabled\", \"value\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-select-option\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"disabled\", \"value\"] })\n    ], IonSelectOption);\n    return IonSelectOption;\n}());\nvar IonSkeletonText = /** @class */ (function () {\n    function IonSkeletonText(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonSkeletonText.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonSkeletonText = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"animated\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-skeleton-text\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"animated\"] })\n    ], IonSkeletonText);\n    return IonSkeletonText;\n}());\nvar IonSlide = /** @class */ (function () {\n    function IonSlide(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonSlide.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonSlide = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-slide\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\" })\n    ], IonSlide);\n    return IonSlide;\n}());\nvar IonSlides = /** @class */ (function () {\n    function IonSlides(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n        proxyOutputs(this, this.el, [\"ionSlidesDidLoad\", \"ionSlideTap\", \"ionSlideDoubleTap\", \"ionSlideWillChange\", \"ionSlideDidChange\", \"ionSlideNextStart\", \"ionSlidePrevStart\", \"ionSlideNextEnd\", \"ionSlidePrevEnd\", \"ionSlideTransitionStart\", \"ionSlideTransitionEnd\", \"ionSlideDrag\", \"ionSlideReachStart\", \"ionSlideReachEnd\", \"ionSlideTouchStart\", \"ionSlideTouchEnd\"]);\n    }\n    IonSlides.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonSlides = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"mode\", \"options\", \"pager\", \"scrollbar\"], \"methods\": [\"update\", \"updateAutoHeight\", \"slideTo\", \"slideNext\", \"slidePrev\", \"getActiveIndex\", \"getPreviousIndex\", \"length\", \"isEnd\", \"isBeginning\", \"startAutoplay\", \"stopAutoplay\", \"lockSwipeToNext\", \"lockSwipeToPrev\", \"lockSwipes\", \"getSwiper\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-slides\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"mode\", \"options\", \"pager\", \"scrollbar\"] })\n    ], IonSlides);\n    return IonSlides;\n}());\nvar IonSpinner = /** @class */ (function () {\n    function IonSpinner(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonSpinner.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonSpinner = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"color\", \"duration\", \"name\", \"paused\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-spinner\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"color\", \"duration\", \"name\", \"paused\"] })\n    ], IonSpinner);\n    return IonSpinner;\n}());\nvar IonSplitPane = /** @class */ (function () {\n    function IonSplitPane(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n        proxyOutputs(this, this.el, [\"ionSplitPaneVisible\"]);\n    }\n    IonSplitPane.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonSplitPane = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"contentId\", \"disabled\", \"when\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-split-pane\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"contentId\", \"disabled\", \"when\"] })\n    ], IonSplitPane);\n    return IonSplitPane;\n}());\nvar IonTabBar = /** @class */ (function () {\n    function IonTabBar(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonTabBar.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonTabBar = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"color\", \"mode\", \"selectedTab\", \"translucent\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-tab-bar\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"color\", \"mode\", \"selectedTab\", \"translucent\"] })\n    ], IonTabBar);\n    return IonTabBar;\n}());\nvar IonTabButton = /** @class */ (function () {\n    function IonTabButton(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonTabButton.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonTabButton = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"disabled\", \"download\", \"href\", \"layout\", \"mode\", \"rel\", \"selected\", \"tab\", \"target\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-tab-button\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"disabled\", \"download\", \"href\", \"layout\", \"mode\", \"rel\", \"selected\", \"tab\", \"target\"] })\n    ], IonTabButton);\n    return IonTabButton;\n}());\nvar IonText = /** @class */ (function () {\n    function IonText(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonText.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonText = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"color\", \"mode\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-text\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"color\", \"mode\"] })\n    ], IonText);\n    return IonText;\n}());\nvar IonTextarea = /** @class */ (function () {\n    function IonTextarea(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n        proxyOutputs(this, this.el, [\"ionChange\", \"ionInput\", \"ionBlur\", \"ionFocus\"]);\n    }\n    IonTextarea.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonTextarea = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"autoGrow\", \"autocapitalize\", \"autofocus\", \"clearOnEdit\", \"color\", \"cols\", \"debounce\", \"disabled\", \"enterkeyhint\", \"inputmode\", \"maxlength\", \"minlength\", \"mode\", \"name\", \"placeholder\", \"readonly\", \"required\", \"rows\", \"spellcheck\", \"value\", \"wrap\"], \"methods\": [\"setFocus\", \"getInputElement\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-textarea\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"autoGrow\", \"autocapitalize\", \"autofocus\", \"clearOnEdit\", \"color\", \"cols\", \"debounce\", \"disabled\", \"enterkeyhint\", \"inputmode\", \"maxlength\", \"minlength\", \"mode\", \"name\", \"placeholder\", \"readonly\", \"required\", \"rows\", \"spellcheck\", \"value\", \"wrap\"] })\n    ], IonTextarea);\n    return IonTextarea;\n}());\nvar IonThumbnail = /** @class */ (function () {\n    function IonThumbnail(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonThumbnail.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonThumbnail = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-thumbnail\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\" })\n    ], IonThumbnail);\n    return IonThumbnail;\n}());\nvar IonTitle = /** @class */ (function () {\n    function IonTitle(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonTitle.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonTitle = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"color\", \"size\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-title\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"color\", \"size\"] })\n    ], IonTitle);\n    return IonTitle;\n}());\nvar IonToggle = /** @class */ (function () {\n    function IonToggle(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n        proxyOutputs(this, this.el, [\"ionChange\", \"ionFocus\", \"ionBlur\"]);\n    }\n    IonToggle.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonToggle = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"checked\", \"color\", \"disabled\", \"mode\", \"name\", \"value\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-toggle\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"checked\", \"color\", \"disabled\", \"mode\", \"name\", \"value\"] })\n    ], IonToggle);\n    return IonToggle;\n}());\nvar IonToolbar = /** @class */ (function () {\n    function IonToolbar(c, r, z) {\n        this.z = z;\n        c.detach();\n        this.el = r.nativeElement;\n    }\n    IonToolbar.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    IonToolbar = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({ inputs: [\"color\", \"mode\"] }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: \"ion-toolbar\", changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), template: \"<ng-content></ng-content>\", inputs: [\"color\", \"mode\"] })\n    ], IonToolbar);\n    return IonToolbar;\n}());\n\nvar Config = /** @class */ (function () {\n    function Config() {\n    }\n    Config.prototype.get = function (key, fallback) {\n        var c = getConfig();\n        if (c) {\n            return c.get(key, fallback);\n        }\n        return null;\n    };\n    Config.prototype.getBoolean = function (key, fallback) {\n        var c = getConfig();\n        if (c) {\n            return c.getBoolean(key, fallback);\n        }\n        return false;\n    };\n    Config.prototype.getNumber = function (key, fallback) {\n        var c = getConfig();\n        if (c) {\n            return c.getNumber(key, fallback);\n        }\n        return 0;\n    };\n    Config.prototype.set = function (key, value) {\n        console.warn(\"[DEPRECATION][Config]: The Config.set() method is deprecated and will be removed in Ionic Framework 6.0. Please see https://ionicframework.com/docs/angular/config for alternatives.\");\n        var c = getConfig();\n        if (c) {\n            c.set(key, value);\n        }\n    };\n    Config.ngInjectableDef = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ factory: function Config_Factory() { return new Config(); }, token: Config, providedIn: \"root\" });\n    Config = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n            providedIn: 'root'\n        })\n    ], Config);\n    return Config;\n}());\nvar ConfigToken = new Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())('USERCONFIG');\nvar getConfig = function () {\n    if (typeof window !== 'undefined') {\n        var Ionic = window.Ionic;\n        if (Ionic && Ionic.config) {\n            return Ionic.config;\n        }\n    }\n    return null;\n};\nvar ɵ0$3 = getConfig;\n\n/**\n * @description\n * NavParams are an object that exists on a page and can contain data for that particular view.\n * Similar to how data was pass to a view in V1 with `$stateParams`, NavParams offer a much more flexible\n * option with a simple `get` method.\n *\n * @usage\n * ```ts\n * import { NavParams } from '@ionic/angular';\n *\n * export class MyClass{\n *\n *  constructor(navParams: NavParams){\n *    // userParams is an object we have in our nav-parameters\n *    navParams.get('userParams');\n *  }\n *\n * }\n * ```\n */\nvar NavParams = /** @class */ (function () {\n    function NavParams(data) {\n        if (data === void 0) { data = {}; }\n        this.data = data;\n    }\n    /**\n     * Get the value of a nav-parameter for the current view\n     *\n     * ```ts\n     * import { NavParams } from 'ionic-angular';\n     *\n     * export class MyClass{\n     *  constructor(public navParams: NavParams){\n     *    // userParams is an object we have in our nav-parameters\n     *    this.navParams.get('userParams');\n     *  }\n     * }\n     * ```\n     *\n     * @param param Which param you want to look up\n     */\n    NavParams.prototype.get = function (param) {\n        return this.data[param];\n    };\n    return NavParams;\n}());\n\nvar AngularDelegate = /** @class */ (function () {\n    function AngularDelegate(zone, appRef) {\n        this.zone = zone;\n        this.appRef = appRef;\n    }\n    AngularDelegate.prototype.create = function (resolver, injector, location) {\n        return new AngularFrameworkDelegate(resolver, injector, location, this.appRef, this.zone);\n    };\n    AngularDelegate.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    AngularDelegate = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())()\n    ], AngularDelegate);\n    return AngularDelegate;\n}());\nvar AngularFrameworkDelegate = /** @class */ (function () {\n    function AngularFrameworkDelegate(resolver, injector, location, appRef, zone) {\n        this.resolver = resolver;\n        this.injector = injector;\n        this.location = location;\n        this.appRef = appRef;\n        this.zone = zone;\n        this.elRefMap = new WeakMap();\n        this.elEventsMap = new WeakMap();\n    }\n    AngularFrameworkDelegate.prototype.attachViewToDom = function (container, component, params, cssClasses) {\n        var _this = this;\n        return this.zone.run(function () {\n            return new Promise(function (resolve) {\n                var el = attachView(_this.zone, _this.resolver, _this.injector, _this.location, _this.appRef, _this.elRefMap, _this.elEventsMap, container, component, params, cssClasses);\n                resolve(el);\n            });\n        });\n    };\n    AngularFrameworkDelegate.prototype.removeViewFromDom = function (_container, component) {\n        var _this = this;\n        return this.zone.run(function () {\n            return new Promise(function (resolve) {\n                var componentRef = _this.elRefMap.get(component);\n                if (componentRef) {\n                    componentRef.destroy();\n                    _this.elRefMap.delete(component);\n                    var unbindEvents = _this.elEventsMap.get(component);\n                    if (unbindEvents) {\n                        unbindEvents();\n                        _this.elEventsMap.delete(component);\n                    }\n                }\n                resolve();\n            });\n        });\n    };\n    return AngularFrameworkDelegate;\n}());\nvar attachView = function (zone, resolver, injector, location, appRef, elRefMap, elEventsMap, container, component, params, cssClasses) {\n    var e_1, _a;\n    var factory = resolver.resolveComponentFactory(component);\n    var childInjector = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n        providers: getProviders(params),\n        parent: injector\n    });\n    var componentRef = (location)\n        ? location.createComponent(factory, location.length, childInjector)\n        : factory.create(childInjector);\n    var instance = componentRef.instance;\n    var hostElement = componentRef.location.nativeElement;\n    if (params) {\n        Object.assign(instance, params);\n    }\n    if (cssClasses) {\n        try {\n            for (var cssClasses_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__values)(cssClasses), cssClasses_1_1 = cssClasses_1.next(); !cssClasses_1_1.done; cssClasses_1_1 = cssClasses_1.next()) {\n                var clazz = cssClasses_1_1.value;\n                hostElement.classList.add(clazz);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (cssClasses_1_1 && !cssClasses_1_1.done && (_a = cssClasses_1.return)) _a.call(cssClasses_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    }\n    var unbindEvents = bindLifecycleEvents(zone, instance, hostElement);\n    container.appendChild(hostElement);\n    if (!location) {\n        appRef.attachView(componentRef.hostView);\n    }\n    componentRef.changeDetectorRef.reattach();\n    elRefMap.set(hostElement, componentRef);\n    elEventsMap.set(hostElement, unbindEvents);\n    return hostElement;\n};\nvar LIFECYCLES = [\n    _ionic_core__WEBPACK_IMPORTED_MODULE_1__.LIFECYCLE_WILL_ENTER,\n    _ionic_core__WEBPACK_IMPORTED_MODULE_1__.LIFECYCLE_DID_ENTER,\n    _ionic_core__WEBPACK_IMPORTED_MODULE_1__.LIFECYCLE_WILL_LEAVE,\n    _ionic_core__WEBPACK_IMPORTED_MODULE_1__.LIFECYCLE_DID_LEAVE,\n    _ionic_core__WEBPACK_IMPORTED_MODULE_1__.LIFECYCLE_WILL_UNLOAD\n];\nvar bindLifecycleEvents = function (zone, instance, element) {\n    return zone.run(function () {\n        var unregisters = LIFECYCLES\n            .filter(function (eventName) { return typeof instance[eventName] === 'function'; })\n            .map(function (eventName) {\n            var handler = function (ev) { return instance[eventName](ev.detail); };\n            element.addEventListener(eventName, handler);\n            return function () { return element.removeEventListener(eventName, handler); };\n        });\n        return function () { return unregisters.forEach(function (fn) { return fn(); }); };\n    });\n};\nvar NavParamsToken = new Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())('NavParamsToken');\nvar getProviders = function (params) {\n    return [\n        {\n            provide: NavParamsToken, useValue: params\n        },\n        {\n            provide: NavParams, useFactory: provideNavParamsInjectable, deps: [NavParamsToken]\n        }\n    ];\n};\nvar ɵ0$4 = getProviders;\nvar provideNavParamsInjectable = function (params) {\n    return new NavParams(params);\n};\nvar ɵ1$2 = provideNavParamsInjectable;\n\nvar insertView = function (views, view, direction) {\n    if (direction === 'root') {\n        return setRoot(views, view);\n    }\n    else if (direction === 'forward') {\n        return setForward(views, view);\n    }\n    else {\n        return setBack(views, view);\n    }\n};\nvar setRoot = function (views, view) {\n    views = views.filter(function (v) { return v.stackId !== view.stackId; });\n    views.push(view);\n    return views;\n};\nvar ɵ0$5 = setRoot;\nvar setForward = function (views, view) {\n    var index = views.indexOf(view);\n    if (index >= 0) {\n        views = views.filter(function (v) { return v.stackId !== view.stackId || v.id <= view.id; });\n    }\n    else {\n        views.push(view);\n    }\n    return views;\n};\nvar ɵ1$3 = setForward;\nvar setBack = function (views, view) {\n    var index = views.indexOf(view);\n    if (index >= 0) {\n        return views.filter(function (v) { return v.stackId !== view.stackId || v.id <= view.id; });\n    }\n    else {\n        return setRoot(views, view);\n    }\n};\nvar ɵ2$1 = setBack;\nvar getUrl = function (router, activatedRoute) {\n    var urlTree = router.createUrlTree(['.'], { relativeTo: activatedRoute });\n    return router.serializeUrl(urlTree);\n};\nvar isTabSwitch = function (enteringView, leavingView) {\n    if (!leavingView) {\n        return true;\n    }\n    return enteringView.stackId !== leavingView.stackId;\n};\nvar computeStackId = function (prefixUrl, url) {\n    if (!prefixUrl) {\n        return undefined;\n    }\n    var segments = toSegments(url);\n    for (var i = 0; i < segments.length; i++) {\n        if (i >= prefixUrl.length) {\n            return segments[i];\n        }\n        if (segments[i] !== prefixUrl[i]) {\n            return undefined;\n        }\n    }\n    return undefined;\n};\nvar toSegments = function (path) {\n    return path\n        .split('/')\n        .map(function (s) { return s.trim(); })\n        .filter(function (s) { return s !== ''; });\n};\nvar destroyView = function (view) {\n    if (view) {\n        // TODO lifecycle event\n        view.ref.destroy();\n        view.unlistenEvents();\n    }\n};\n\nvar StackController = /** @class */ (function () {\n    function StackController(tabsPrefix, containerEl, router, navCtrl, zone, location) {\n        this.containerEl = containerEl;\n        this.router = router;\n        this.navCtrl = navCtrl;\n        this.zone = zone;\n        this.location = location;\n        this.views = [];\n        this.skipTransition = false;\n        this.nextId = 0;\n        this.tabsPrefix = tabsPrefix !== undefined ? toSegments(tabsPrefix) : undefined;\n    }\n    StackController.prototype.createView = function (ref, activatedRoute) {\n        var url = getUrl(this.router, activatedRoute);\n        var element = (ref && ref.location && ref.location.nativeElement);\n        var unlistenEvents = bindLifecycleEvents(this.zone, ref.instance, element);\n        return {\n            id: this.nextId++,\n            stackId: computeStackId(this.tabsPrefix, url),\n            unlistenEvents: unlistenEvents,\n            element: element,\n            ref: ref,\n            url: url,\n        };\n    };\n    StackController.prototype.getExistingView = function (activatedRoute) {\n        var activatedUrlKey = getUrl(this.router, activatedRoute);\n        var view = this.views.find(function (vw) { return vw.url === activatedUrlKey; });\n        if (view) {\n            view.ref.changeDetectorRef.reattach();\n        }\n        return view;\n    };\n    StackController.prototype.setActive = function (enteringView) {\n        var _this = this;\n        var consumeResult = this.navCtrl.consumeTransition();\n        var direction = consumeResult.direction, animation = consumeResult.animation, animationBuilder = consumeResult.animationBuilder;\n        var leavingView = this.activeView;\n        var tabSwitch = isTabSwitch(enteringView, leavingView);\n        if (tabSwitch) {\n            direction = 'back';\n            animation = undefined;\n        }\n        var viewsSnapshot = this.views.slice();\n        var currentNavigation;\n        var router = this.router;\n        // Angular >= 7.2.0\n        if (router.getCurrentNavigation) {\n            currentNavigation = router.getCurrentNavigation();\n            // Angular < 7.2.0\n        }\n        else if (router.navigations &&\n            router.navigations.value) {\n            currentNavigation = router.navigations.value;\n        }\n        /**\n         * If the navigation action\n         * sets `replaceUrl: true`\n         * then we need to make sure\n         * we remove the last item\n         * from our views stack\n         */\n        if (currentNavigation &&\n            currentNavigation.extras &&\n            currentNavigation.extras.replaceUrl) {\n            if (this.views.length > 0) {\n                this.views.splice(-1, 1);\n            }\n        }\n        var reused = this.views.includes(enteringView);\n        var views = this.insertView(enteringView, direction);\n        // Trigger change detection before transition starts\n        // This will call ngOnInit() the first time too, just after the view\n        // was attached to the dom, but BEFORE the transition starts\n        if (!reused) {\n            enteringView.ref.changeDetectorRef.detectChanges();\n        }\n        /**\n         * If we are going back from a page that\n         * was presented using a custom animation\n         * we should default to using that\n         * unless the developer explicitly\n         * provided another animation.\n         */\n        var customAnimation = enteringView.animationBuilder;\n        if (animationBuilder === undefined &&\n            direction === 'back' &&\n            !tabSwitch &&\n            customAnimation !== undefined) {\n            animationBuilder = customAnimation;\n        }\n        /**\n         * Save any custom animation so that navigating\n         * back will use this custom animation by default.\n         */\n        if (leavingView) {\n            leavingView.animationBuilder = animationBuilder;\n        }\n        // Wait until previous transitions finish\n        return this.zone.runOutsideAngular(function () {\n            return _this.wait(function () {\n                // disconnect leaving page from change detection to\n                // reduce jank during the page transition\n                if (leavingView) {\n                    leavingView.ref.changeDetectorRef.detach();\n                }\n                // In case the enteringView is the same as the leavingPage we need to reattach()\n                enteringView.ref.changeDetectorRef.reattach();\n                return _this.transition(enteringView, leavingView, animation, _this.canGoBack(1), false, animationBuilder)\n                    .then(function () { return cleanupAsync(enteringView, views, viewsSnapshot, _this.location); })\n                    .then(function () { return ({\n                    enteringView: enteringView,\n                    direction: direction,\n                    animation: animation,\n                    tabSwitch: tabSwitch\n                }); });\n            });\n        });\n    };\n    StackController.prototype.canGoBack = function (deep, stackId) {\n        if (stackId === void 0) { stackId = this.getActiveStackId(); }\n        return this.getStack(stackId).length > deep;\n    };\n    StackController.prototype.pop = function (deep, stackId) {\n        var _this = this;\n        if (stackId === void 0) { stackId = this.getActiveStackId(); }\n        return this.zone.run(function () {\n            var views = _this.getStack(stackId);\n            if (views.length <= deep) {\n                return Promise.resolve(false);\n            }\n            var view = views[views.length - deep - 1];\n            var url = view.url;\n            var viewSavedData = view.savedData;\n            if (viewSavedData) {\n                var primaryOutlet = viewSavedData.get('primary');\n                if (primaryOutlet &&\n                    primaryOutlet.route &&\n                    primaryOutlet.route._routerState &&\n                    primaryOutlet.route._routerState.snapshot &&\n                    primaryOutlet.route._routerState.snapshot.url) {\n                    url = primaryOutlet.route._routerState.snapshot.url;\n                }\n            }\n            var animationBuilder = _this.navCtrl.consumeTransition().animationBuilder;\n            return _this.navCtrl.navigateBack(url, (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, view.savedExtras, { animation: animationBuilder })).then(function () { return true; });\n        });\n    };\n    StackController.prototype.startBackTransition = function () {\n        var _this = this;\n        var leavingView = this.activeView;\n        if (leavingView) {\n            var views = this.getStack(leavingView.stackId);\n            var enteringView_1 = views[views.length - 2];\n            var customAnimation_1 = enteringView_1.animationBuilder;\n            return this.wait(function () {\n                return _this.transition(enteringView_1, // entering view\n                leavingView, // leaving view\n                'back', _this.canGoBack(2), true, customAnimation_1);\n            });\n        }\n        return Promise.resolve();\n    };\n    StackController.prototype.endBackTransition = function (shouldComplete) {\n        if (shouldComplete) {\n            this.skipTransition = true;\n            this.pop(1);\n        }\n        else if (this.activeView) {\n            cleanup(this.activeView, this.views, this.views, this.location);\n        }\n    };\n    StackController.prototype.getLastUrl = function (stackId) {\n        var views = this.getStack(stackId);\n        return views.length > 0 ? views[views.length - 1] : undefined;\n    };\n    /**\n     * @internal\n     */\n    StackController.prototype.getRootUrl = function (stackId) {\n        var views = this.getStack(stackId);\n        return views.length > 0 ? views[0] : undefined;\n    };\n    StackController.prototype.getActiveStackId = function () {\n        return this.activeView ? this.activeView.stackId : undefined;\n    };\n    StackController.prototype.hasRunningTask = function () {\n        return this.runningTask !== undefined;\n    };\n    StackController.prototype.destroy = function () {\n        this.containerEl = undefined;\n        this.views.forEach(destroyView);\n        this.activeView = undefined;\n        this.views = [];\n    };\n    StackController.prototype.getStack = function (stackId) {\n        return this.views.filter(function (v) { return v.stackId === stackId; });\n    };\n    StackController.prototype.insertView = function (enteringView, direction) {\n        this.activeView = enteringView;\n        this.views = insertView(this.views, enteringView, direction);\n        return this.views.slice();\n    };\n    StackController.prototype.transition = function (enteringView, leavingView, direction, showGoBack, progressAnimation, animationBuilder) {\n        if (this.skipTransition) {\n            this.skipTransition = false;\n            return Promise.resolve(false);\n        }\n        if (leavingView === enteringView) {\n            return Promise.resolve(false);\n        }\n        var enteringEl = enteringView ? enteringView.element : undefined;\n        var leavingEl = leavingView ? leavingView.element : undefined;\n        var containerEl = this.containerEl;\n        if (enteringEl && enteringEl !== leavingEl) {\n            enteringEl.classList.add('ion-page');\n            enteringEl.classList.add('ion-page-invisible');\n            if (enteringEl.parentElement !== containerEl) {\n                containerEl.appendChild(enteringEl);\n            }\n            if (containerEl.commit) {\n                return containerEl.commit(enteringEl, leavingEl, {\n                    deepWait: true,\n                    duration: direction === undefined ? 0 : undefined,\n                    direction: direction,\n                    showGoBack: showGoBack,\n                    progressAnimation: progressAnimation,\n                    animationBuilder: animationBuilder\n                });\n            }\n        }\n        return Promise.resolve(false);\n    };\n    StackController.prototype.wait = function (task) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function () {\n            var promise;\n            var _this = this;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__generator)(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(this.runningTask !== undefined)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.runningTask];\n                    case 1:\n                        _a.sent();\n                        this.runningTask = undefined;\n                        _a.label = 2;\n                    case 2:\n                        promise = this.runningTask = task();\n                        promise.finally(function () { return _this.runningTask = undefined; });\n                        return [2 /*return*/, promise];\n                }\n            });\n        });\n    };\n    return StackController;\n}());\nvar cleanupAsync = function (activeRoute, views, viewsSnapshot, location) {\n    if (typeof requestAnimationFrame === 'function') {\n        return new Promise(function (resolve) {\n            requestAnimationFrame(function () {\n                cleanup(activeRoute, views, viewsSnapshot, location);\n                resolve();\n            });\n        });\n    }\n    return Promise.resolve();\n};\nvar ɵ0$6 = cleanupAsync;\nvar cleanup = function (activeRoute, views, viewsSnapshot, location) {\n    viewsSnapshot\n        .filter(function (view) { return !views.includes(view); })\n        .forEach(destroyView);\n    views.forEach(function (view) {\n        /**\n         * In the event that a user navigated multiple\n         * times in rapid succession, we want to make sure\n         * we don't pre-emptively detach a view while\n         * it is in mid-transition.\n         *\n         * In this instance we also do not care about query\n         * params or fragments as it will be the same view regardless\n         */\n        var locationWithoutParams = location.path().split('?')[0];\n        var locationWithoutFragment = locationWithoutParams.split('#')[0];\n        if (view !== activeRoute && view.url !== locationWithoutFragment) {\n            var element = view.element;\n            element.setAttribute('aria-hidden', 'true');\n            element.classList.add('ion-page-hidden');\n            view.ref.changeDetectorRef.detach();\n        }\n    });\n};\nvar ɵ1$4 = cleanup;\n\nvar IonRouterOutlet = /** @class */ (function () {\n    function IonRouterOutlet(parentContexts, location, resolver, name, tabs, config, navCtrl, commonLocation, elementRef, router, zone, activatedRoute, parentOutlet) {\n        this.parentContexts = parentContexts;\n        this.location = location;\n        this.resolver = resolver;\n        this.config = config;\n        this.navCtrl = navCtrl;\n        this.parentOutlet = parentOutlet;\n        this.activated = null;\n        this.activatedView = null;\n        this._activatedRoute = null;\n        // Maintain map of activated route proxies for each component instance\n        this.proxyMap = new WeakMap();\n        // Keep the latest activated route in a subject for the proxy routes to switch map to\n        this.currentActivatedRoute$ = new Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'rxjs'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(null);\n        this.stackEvents = new Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())();\n        this.activateEvents = new Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())();\n        this.deactivateEvents = new Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())();\n        this.nativeEl = elementRef.nativeElement;\n        this.name = name || Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/router'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n        this.tabsPrefix = tabs === 'true' ? getUrl(router, activatedRoute) : undefined;\n        this.stackCtrl = new StackController(this.tabsPrefix, this.nativeEl, router, navCtrl, zone, commonLocation);\n        parentContexts.onChildOutletCreated(this.name, this);\n    }\n    Object.defineProperty(IonRouterOutlet.prototype, \"animation\", {\n        set: function (animation) {\n            this.nativeEl.animation = animation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IonRouterOutlet.prototype, \"animated\", {\n        set: function (animated) {\n            this.nativeEl.animated = animated;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IonRouterOutlet.prototype, \"swipeGesture\", {\n        set: function (swipe) {\n            var _this = this;\n            this._swipeGesture = swipe;\n            this.nativeEl.swipeHandler = swipe ? {\n                canStart: function () { return _this.stackCtrl.canGoBack(1) && !_this.stackCtrl.hasRunningTask(); },\n                onStart: function () { return _this.stackCtrl.startBackTransition(); },\n                onEnd: function (shouldContinue) { return _this.stackCtrl.endBackTransition(shouldContinue); }\n            } : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IonRouterOutlet.prototype.ngOnDestroy = function () {\n        this.stackCtrl.destroy();\n    };\n    IonRouterOutlet.prototype.getContext = function () {\n        return this.parentContexts.getContext(this.name);\n    };\n    IonRouterOutlet.prototype.ngOnInit = function () {\n        var _this = this;\n        if (!this.activated) {\n            // If the outlet was not instantiated at the time the route got activated we need to populate\n            // the outlet when it is initialized (ie inside a NgIf)\n            var context = this.getContext();\n            if (context && context.route) {\n                this.activateWith(context.route, context.resolver || null);\n            }\n        }\n        new Promise(function (resolve) { return (0,_ionic_core__WEBPACK_IMPORTED_MODULE_1__.componentOnReady)(_this.nativeEl, resolve); }).then(function () {\n            if (_this._swipeGesture === undefined) {\n                _this.swipeGesture = _this.config.getBoolean('swipeBackEnabled', _this.nativeEl.mode === 'ios');\n            }\n        });\n    };\n    Object.defineProperty(IonRouterOutlet.prototype, \"isActivated\", {\n        get: function () {\n            return !!this.activated;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IonRouterOutlet.prototype, \"component\", {\n        get: function () {\n            if (!this.activated) {\n                throw new Error('Outlet is not activated');\n            }\n            return this.activated.instance;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IonRouterOutlet.prototype, \"activatedRoute\", {\n        get: function () {\n            if (!this.activated) {\n                throw new Error('Outlet is not activated');\n            }\n            return this._activatedRoute;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IonRouterOutlet.prototype, \"activatedRouteData\", {\n        get: function () {\n            if (this._activatedRoute) {\n                return this._activatedRoute.snapshot.data;\n            }\n            return {};\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Called when the `RouteReuseStrategy` instructs to detach the subtree\n     */\n    IonRouterOutlet.prototype.detach = function () {\n        throw new Error('incompatible reuse strategy');\n    };\n    /**\n     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n     */\n    IonRouterOutlet.prototype.attach = function (_ref, _activatedRoute) {\n        throw new Error('incompatible reuse strategy');\n    };\n    IonRouterOutlet.prototype.deactivate = function () {\n        if (this.activated) {\n            if (this.activatedView) {\n                var context = this.getContext();\n                this.activatedView.savedData = new Map(context.children['contexts']);\n                /**\n                 * Angular v11.2.10 introduced a change\n                 * where this route context is cleared out when\n                 * a router-outlet is deactivated, However,\n                 * we need this route information in order to\n                 * return a user back to the correct tab when\n                 * leaving and then going back to the tab context.\n                 */\n                var primaryOutlet = this.activatedView.savedData.get('primary');\n                if (primaryOutlet && context.route) {\n                    primaryOutlet.route = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, context.route);\n                }\n                /**\n                 * Ensure we are saving the NavigationExtras\n                 * data otherwise it will be lost\n                 */\n                this.activatedView.savedExtras = {};\n                if (context.route) {\n                    var contextSnapshot = context.route.snapshot;\n                    this.activatedView.savedExtras.queryParams = contextSnapshot.queryParams;\n                    this.activatedView.savedExtras.fragment = contextSnapshot.fragment;\n                }\n            }\n            var c = this.component;\n            this.activatedView = null;\n            this.activated = null;\n            this._activatedRoute = null;\n            this.deactivateEvents.emit(c);\n        }\n    };\n    IonRouterOutlet.prototype.activateWith = function (activatedRoute, resolver) {\n        var _this = this;\n        if (this.isActivated) {\n            throw new Error('Cannot activate an already activated outlet');\n        }\n        this._activatedRoute = activatedRoute;\n        var cmpRef;\n        var enteringView = this.stackCtrl.getExistingView(activatedRoute);\n        if (enteringView) {\n            cmpRef = this.activated = enteringView.ref;\n            var saved = enteringView.savedData;\n            if (saved) {\n                // self-restore\n                var context = this.getContext();\n                context.children['contexts'] = saved;\n            }\n            // Updated activated route proxy for this component\n            this.updateActivatedRouteProxy(cmpRef.instance, activatedRoute);\n        }\n        else {\n            var snapshot = activatedRoute._futureSnapshot;\n            var component = snapshot.routeConfig.component;\n            resolver = resolver || this.resolver;\n            var factory = resolver.resolveComponentFactory(component);\n            var childContexts = this.parentContexts.getOrCreateContext(this.name).children;\n            // We create an activated route proxy object that will maintain future updates for this component\n            // over its lifecycle in the stack.\n            var component$ = new Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'rxjs'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(null);\n            var activatedRouteProxy = this.createActivatedRouteProxy(component$, activatedRoute);\n            var injector = new OutletInjector(activatedRouteProxy, childContexts, this.location.injector);\n            cmpRef = this.activated = this.location.createComponent(factory, this.location.length, injector);\n            // Once the component is created we can push it to our local subject supplied to the proxy\n            component$.next(cmpRef.instance);\n            // Calling `markForCheck` to make sure we will run the change detection when the\n            // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.\n            enteringView = this.stackCtrl.createView(this.activated, activatedRoute);\n            // Store references to the proxy by component\n            this.proxyMap.set(cmpRef.instance, activatedRouteProxy);\n            this.currentActivatedRoute$.next({ component: cmpRef.instance, activatedRoute: activatedRoute });\n        }\n        this.activatedView = enteringView;\n        this.stackCtrl.setActive(enteringView).then(function (data) {\n            _this.navCtrl.setTopOutlet(_this);\n            _this.activateEvents.emit(cmpRef.instance);\n            _this.stackEvents.emit(data);\n        });\n    };\n    /**\n     * Returns `true` if there are pages in the stack to go back.\n     */\n    IonRouterOutlet.prototype.canGoBack = function (deep, stackId) {\n        if (deep === void 0) { deep = 1; }\n        return this.stackCtrl.canGoBack(deep, stackId);\n    };\n    /**\n     * Resolves to `true` if it the outlet was able to sucessfully pop the last N pages.\n     */\n    IonRouterOutlet.prototype.pop = function (deep, stackId) {\n        if (deep === void 0) { deep = 1; }\n        return this.stackCtrl.pop(deep, stackId);\n    };\n    /**\n     * Returns the URL of the active page of each stack.\n     */\n    IonRouterOutlet.prototype.getLastUrl = function (stackId) {\n        var active = this.stackCtrl.getLastUrl(stackId);\n        return active ? active.url : undefined;\n    };\n    /**\n     * Returns the RouteView of the active page of each stack.\n     * @internal\n     */\n    IonRouterOutlet.prototype.getLastRouteView = function (stackId) {\n        return this.stackCtrl.getLastUrl(stackId);\n    };\n    /**\n     * Returns the root view in the tab stack.\n     * @internal\n     */\n    IonRouterOutlet.prototype.getRootView = function (stackId) {\n        return this.stackCtrl.getRootUrl(stackId);\n    };\n    /**\n     * Returns the active stack ID. In the context of ion-tabs, it means the active tab.\n     */\n    IonRouterOutlet.prototype.getActiveStackId = function () {\n        return this.stackCtrl.getActiveStackId();\n    };\n    /**\n     * Since the activated route can change over the life time of a component in an ion router outlet, we create\n     * a proxy so that we can update the values over time as a user navigates back to components already in the stack.\n     */\n    IonRouterOutlet.prototype.createActivatedRouteProxy = function (component$, activatedRoute) {\n        var proxy = new Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/router'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())();\n        proxy._futureSnapshot = activatedRoute._futureSnapshot;\n        proxy._routerState = activatedRoute._routerState;\n        proxy.snapshot = activatedRoute.snapshot;\n        proxy.outlet = activatedRoute.outlet;\n        proxy.component = activatedRoute.component;\n        // Setup wrappers for the observables so consumers don't have to worry about switching to new observables as the state updates\n        proxy._paramMap = this.proxyObservable(component$, 'paramMap');\n        proxy._queryParamMap = this.proxyObservable(component$, 'queryParamMap');\n        proxy.url = this.proxyObservable(component$, 'url');\n        proxy.params = this.proxyObservable(component$, 'params');\n        proxy.queryParams = this.proxyObservable(component$, 'queryParams');\n        proxy.fragment = this.proxyObservable(component$, 'fragment');\n        proxy.data = this.proxyObservable(component$, 'data');\n        return proxy;\n    };\n    /**\n     * Create a wrapped observable that will switch to the latest activated route matched by the given component\n     */\n    IonRouterOutlet.prototype.proxyObservable = function (component$, path) {\n        var _this = this;\n        return component$.pipe(\n        // First wait until the component instance is pushed\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'rxjs/operators'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(function (component) { return !!component; }), Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'rxjs/operators'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(function (component) {\n            return _this.currentActivatedRoute$.pipe(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'rxjs/operators'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(function (current) { return current !== null && current.component === component; }), Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'rxjs/operators'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(function (current) { return current && current.activatedRoute[path]; }), Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'rxjs/operators'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())());\n        }));\n    };\n    /**\n     * Updates the activated route proxy for the given component to the new incoming router state\n     */\n    IonRouterOutlet.prototype.updateActivatedRouteProxy = function (component, activatedRoute) {\n        var proxy = this.proxyMap.get(component);\n        if (!proxy) {\n            throw new Error(\"Could not find activated route proxy for view\");\n        }\n        proxy._futureSnapshot = activatedRoute._futureSnapshot;\n        proxy._routerState = activatedRoute._routerState;\n        proxy.snapshot = activatedRoute.snapshot;\n        proxy.outlet = activatedRoute.outlet;\n        proxy.component = activatedRoute.component;\n        this.currentActivatedRoute$.next({ component: component, activatedRoute: activatedRoute });\n    };\n    IonRouterOutlet.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/router'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: String, decorators: [{ type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), args: ['name',] }] },\n        { type: String, decorators: [{ type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }, { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), args: ['tabs',] }] },\n        { type: Config },\n        { type: NavController },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/common'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/router'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/router'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: IonRouterOutlet, decorators: [{ type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }, { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }] }\n    ]; };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())()\n    ], IonRouterOutlet.prototype, \"stackEvents\", void 0);\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())('activate')\n    ], IonRouterOutlet.prototype, \"activateEvents\", void 0);\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())('deactivate')\n    ], IonRouterOutlet.prototype, \"deactivateEvents\", void 0);\n    IonRouterOutlet = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n            selector: 'ion-router-outlet',\n            exportAs: 'outlet',\n            inputs: ['animated', 'animation', 'swipeGesture']\n        }),\n        (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__param)(3, Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())('name')),\n        (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__param)(4, Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())()), (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__param)(4, Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())('tabs')),\n        (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__param)(12, Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())()), (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__param)(12, Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())())\n    ], IonRouterOutlet);\n    return IonRouterOutlet;\n}());\nvar OutletInjector = /** @class */ (function () {\n    function OutletInjector(route, childContexts, parent) {\n        this.route = route;\n        this.childContexts = childContexts;\n        this.parent = parent;\n    }\n    OutletInjector.prototype.get = function (token, notFoundValue) {\n        if (token === Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/router'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())) {\n            return this.route;\n        }\n        if (token === Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/router'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())) {\n            return this.childContexts;\n        }\n        // tslint:disable-next-line\n        return this.parent.get(token, notFoundValue);\n    };\n    return OutletInjector;\n}());\n\nvar IonTabs = /** @class */ (function () {\n    function IonTabs(navCtrl) {\n        this.navCtrl = navCtrl;\n        this.ionTabsWillChange = new Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())();\n        this.ionTabsDidChange = new Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())();\n    }\n    /**\n     * @internal\n     */\n    IonTabs.prototype.onPageSelected = function (detail) {\n        var stackId = detail.enteringView.stackId;\n        if (detail.tabSwitch && stackId !== undefined) {\n            if (this.tabBar) {\n                this.tabBar.selectedTab = stackId;\n            }\n            this.ionTabsWillChange.emit({ tab: stackId });\n            this.ionTabsDidChange.emit({ tab: stackId });\n        }\n    };\n    /**\n     * When a tab button is clicked, there are several scenarios:\n     * 1. If the selected tab is currently active (the tab button has been clicked\n     *    again), then it should go to the root view for that tab.\n     *\n     *   a. Get the saved root view from the router outlet. If the saved root view\n     *      matches the tabRootUrl, set the route view to this view including the\n     *      navigation extras.\n     *   b. If the saved root view from the router outlet does\n     *      not match, navigate to the tabRootUrl. No navigation extras are\n     *      included.\n     *\n     * 2. If the current tab tab is not currently selected, get the last route\n     *    view from the router outlet.\n     *\n     *   a. If the last route view exists, navigate to that view including any\n     *      navigation extras\n     *   b. If the last route view doesn't exist, then navigate\n     *      to the default tabRootUrl\n     */\n    IonTabs.prototype.select = function (tabOrEvent) {\n        var isTabString = typeof tabOrEvent === 'string';\n        var tab = (isTabString) ? tabOrEvent : tabOrEvent.detail.tab;\n        var alreadySelected = this.outlet.getActiveStackId() === tab;\n        var tabRootUrl = this.outlet.tabsPrefix + \"/\" + tab;\n        /**\n         * If this is a nested tab, prevent the event\n         * from bubbling otherwise the outer tabs\n         * will respond to this event too, causing\n         * the app to get directed to the wrong place.\n         */\n        if (!isTabString) {\n            tabOrEvent.stopPropagation();\n        }\n        if (alreadySelected) {\n            var activeStackId = this.outlet.getActiveStackId();\n            var activeView = this.outlet.getLastRouteView(activeStackId);\n            // If on root tab, do not navigate to root tab again\n            if (activeView.url === tabRootUrl) {\n                return;\n            }\n            var rootView = this.outlet.getRootView(tab);\n            var navigationExtras = rootView && tabRootUrl === rootView.url && rootView.savedExtras;\n            return this.navCtrl.navigateRoot(tabRootUrl, (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, (navigationExtras), { animated: true, animationDirection: 'back' }));\n        }\n        else {\n            var lastRoute = this.outlet.getLastRouteView(tab);\n            /**\n             * If there is a lastRoute, goto that, otherwise goto the fallback url of the\n             * selected tab\n             */\n            var url = lastRoute && lastRoute.url || tabRootUrl;\n            var navigationExtras = lastRoute && lastRoute.savedExtras;\n            return this.navCtrl.navigateRoot(url, (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, (navigationExtras), { animated: true, animationDirection: 'back' }));\n        }\n    };\n    IonTabs.prototype.getSelected = function () {\n        return this.outlet.getActiveStackId();\n    };\n    IonTabs.ctorParameters = function () { return [\n        { type: NavController }\n    ]; };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())('outlet', { read: IonRouterOutlet, static: false })\n    ], IonTabs.prototype, \"outlet\", void 0);\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(IonTabBar, { static: false })\n    ], IonTabs.prototype, \"tabBar\", void 0);\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())()\n    ], IonTabs.prototype, \"ionTabsWillChange\", void 0);\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())()\n    ], IonTabs.prototype, \"ionTabsDidChange\", void 0);\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())('ionTabButtonClick', ['$event'])\n    ], IonTabs.prototype, \"select\", null);\n    IonTabs = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n            selector: 'ion-tabs',\n            template: \"\\n    <ng-content select=\\\"[slot=top]\\\"></ng-content>\\n    <div class=\\\"tabs-inner\\\">\\n      <ion-router-outlet #outlet tabs=\\\"true\\\" (stackEvents)=\\\"onPageSelected($event)\\\"></ion-router-outlet>\\n    </div>\\n    <ng-content></ng-content>\",\n            styles: [\"\\n    :host {\\n      display: flex;\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n      right: 0;\\n      bottom: 0;\\n\\n      flex-direction: column;\\n\\n      width: 100%;\\n      height: 100%;\\n\\n      contain: layout size style;\\n      z-index: $z-index-page-container;\\n    }\\n    .tabs-inner {\\n      position: relative;\\n\\n      flex: 1;\\n\\n      contain: layout size style;\\n    }\"]\n        })\n    ], IonTabs);\n    return IonTabs;\n}());\n\nvar IonBackButtonDelegate = /** @class */ (function () {\n    function IonBackButtonDelegate(routerOutlet, navCtrl, config) {\n        this.routerOutlet = routerOutlet;\n        this.navCtrl = navCtrl;\n        this.config = config;\n    }\n    /**\n     * @internal\n     */\n    IonBackButtonDelegate.prototype.onClick = function (ev) {\n        var defaultHref = this.defaultHref || this.config.get('backButtonDefaultHref');\n        if (this.routerOutlet && this.routerOutlet.canGoBack()) {\n            this.navCtrl.setDirection('back', undefined, undefined, this.routerAnimation);\n            this.routerOutlet.pop();\n            ev.preventDefault();\n        }\n        else if (defaultHref != null) {\n            this.navCtrl.navigateBack(defaultHref, { animation: this.routerAnimation });\n            ev.preventDefault();\n        }\n    };\n    IonBackButtonDelegate.ctorParameters = function () { return [\n        { type: IonRouterOutlet, decorators: [{ type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }] },\n        { type: NavController },\n        { type: Config }\n    ]; };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())('click', ['$event'])\n    ], IonBackButtonDelegate.prototype, \"onClick\", null);\n    IonBackButtonDelegate = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n            selector: 'ion-back-button',\n            inputs: ['defaultHref', 'routerAnimation'],\n        }),\n        (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__param)(0, Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())())\n    ], IonBackButtonDelegate);\n    return IonBackButtonDelegate;\n}());\n\nvar NavDelegate = /** @class */ (function () {\n    function NavDelegate(ref, resolver, injector, angularDelegate, location) {\n        this.el = ref.nativeElement;\n        ref.nativeElement.delegate = angularDelegate.create(resolver, injector, location);\n        proxyOutputs(this, this.el, ['ionNavDidChange', 'ionNavWillChange']);\n    }\n    NavDelegate.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: AngularDelegate },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    NavDelegate = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({\n            inputs: ['animated', 'animation', 'root', 'rootParams', 'swipeGesture'],\n            methods: ['push', 'insert', 'insertPages', 'pop', 'popTo', 'popToRoot', 'removeIndex', 'setRoot', 'setPages', 'getActive', 'getByIndex', 'canGoBack', 'getPrevious']\n        }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n            selector: 'ion-nav'\n        })\n    ], NavDelegate);\n    return NavDelegate;\n}());\n\nvar RouterLinkDelegate = /** @class */ (function () {\n    function RouterLinkDelegate(locationStrategy, navCtrl, elementRef, router, routerLink) {\n        this.locationStrategy = locationStrategy;\n        this.navCtrl = navCtrl;\n        this.elementRef = elementRef;\n        this.router = router;\n        this.routerLink = routerLink;\n        this.routerDirection = 'forward';\n    }\n    RouterLinkDelegate.prototype.ngOnInit = function () {\n        this.updateTargetUrlAndHref();\n    };\n    RouterLinkDelegate.prototype.ngOnChanges = function () {\n        this.updateTargetUrlAndHref();\n    };\n    RouterLinkDelegate.prototype.ngOnDestroy = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    };\n    RouterLinkDelegate.prototype.updateTargetUrlAndHref = function () {\n        if (this.routerLink) {\n            var href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.routerLink.urlTree));\n            this.elementRef.nativeElement.href = href;\n        }\n    };\n    /**\n     * @internal\n     */\n    RouterLinkDelegate.prototype.onClick = function (ev) {\n        this.navCtrl.setDirection(this.routerDirection, undefined, undefined, this.routerAnimation);\n        ev.preventDefault();\n    };\n    RouterLinkDelegate.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/common'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: NavController },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/router'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/router'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), decorators: [{ type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }] }\n    ]; };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())('click', ['$event'])\n    ], RouterLinkDelegate.prototype, \"onClick\", null);\n    RouterLinkDelegate = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n            selector: '[routerLink]',\n            inputs: ['routerDirection', 'routerAnimation']\n        }),\n        (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__param)(4, Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())())\n    ], RouterLinkDelegate);\n    return RouterLinkDelegate;\n}());\n\n/**\n * @hidden\n */\nvar VirtualFooter = /** @class */ (function () {\n    function VirtualFooter(templateRef) {\n        this.templateRef = templateRef;\n    }\n    VirtualFooter.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    VirtualFooter = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: '[virtualFooter]' })\n    ], VirtualFooter);\n    return VirtualFooter;\n}());\n\n/**\n * @hidden\n */\nvar VirtualHeader = /** @class */ (function () {\n    function VirtualHeader(templateRef) {\n        this.templateRef = templateRef;\n    }\n    VirtualHeader.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    VirtualHeader = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: '[virtualHeader]' })\n    ], VirtualHeader);\n    return VirtualHeader;\n}());\n\n/**\n * @hidden\n */\nvar VirtualItem = /** @class */ (function () {\n    function VirtualItem(templateRef, viewContainer) {\n        this.templateRef = templateRef;\n        this.viewContainer = viewContainer;\n    }\n    VirtualItem.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    VirtualItem = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ selector: '[virtualItem]' })\n    ], VirtualItem);\n    return VirtualItem;\n}());\n\nvar IonVirtualScroll = /** @class */ (function () {\n    function IonVirtualScroll(z, iterableDiffers, elementRef) {\n        this.z = z;\n        this.iterableDiffers = iterableDiffers;\n        this.refMap = new WeakMap();\n        this.el = elementRef.nativeElement;\n        this.el.nodeRender = this.nodeRender.bind(this);\n    }\n    IonVirtualScroll.prototype.ngOnChanges = function (changes) {\n        if (this.trackBy && 'items' in changes) {\n            // React on virtualScroll changes only once all inputs have been initialized\n            var value = changes['items'].currentValue;\n            if (this.differ === undefined && value != null) {\n                try {\n                    this.differ = this.iterableDiffers.find(value).create(this.trackBy);\n                }\n                catch (e) {\n                    throw new Error(\"Cannot find a differ supporting object '\" + value + \"'. VirtualScroll only supports binding to Iterables such as Arrays.\");\n                }\n            }\n        }\n    };\n    IonVirtualScroll.prototype.ngDoCheck = function () {\n        // and if there actually are changes\n        var changes = this.differ !== undefined && this.items ? this.differ.diff(this.items) : null;\n        if (changes === null) {\n            return;\n        }\n        // TODO: optimize\n        this.checkRange(0);\n    };\n    IonVirtualScroll.prototype.nodeRender = function (el, cell, index) {\n        var _this = this;\n        return this.z.run(function () {\n            var node;\n            if (!el) {\n                node = _this.itmTmp.viewContainer.createEmbeddedView(_this.getComponent(cell.type), { $implicit: cell.value, index: index }, index);\n                el = getElement(node);\n                _this.refMap.set(el, node);\n            }\n            else {\n                node = _this.refMap.get(el);\n                var ctx = node.context;\n                ctx.$implicit = cell.value;\n                ctx.index = cell.index;\n            }\n            // run sync change detections\n            node.detectChanges();\n            return el;\n        });\n    };\n    IonVirtualScroll.prototype.getComponent = function (type) {\n        switch (type) {\n            case 'item': return this.itmTmp.templateRef;\n            case 'header': return this.hdrTmp.templateRef;\n            case 'footer': return this.ftrTmp.templateRef;\n        }\n        throw new Error('template for virtual item was not provided');\n    };\n    IonVirtualScroll.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(VirtualItem, { static: false })\n    ], IonVirtualScroll.prototype, \"itmTmp\", void 0);\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(VirtualHeader, { static: false })\n    ], IonVirtualScroll.prototype, \"hdrTmp\", void 0);\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(VirtualFooter, { static: false })\n    ], IonVirtualScroll.prototype, \"ftrTmp\", void 0);\n    IonVirtualScroll = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        ProxyCmp({\n            inputs: ['approxItemHeight', 'approxHeaderHeight', 'approxFooterHeight', 'headerFn', 'footerFn', 'items', 'itemHeight', 'headerHeight', 'footerHeight'],\n            methods: ['checkEnd', 'checkRange', 'positionForItem']\n        }),\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n            selector: 'ion-virtual-scroll',\n            template: '<ng-content></ng-content>',\n            changeDetection: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()),\n            inputs: [\n                'approxItemHeight',\n                'approxHeaderHeight',\n                'approxFooterHeight',\n                'headerFn',\n                'footerFn',\n                'items',\n                'itemHeight',\n                'headerHeight',\n                'footerHeight',\n                'trackBy'\n            ]\n        })\n    ], IonVirtualScroll);\n    return IonVirtualScroll;\n}());\nvar getElement = function (view) {\n    var rootNodes = view.rootNodes;\n    for (var i = 0; i < rootNodes.length; i++) {\n        if (rootNodes[i].nodeType === 1) {\n            return rootNodes[i];\n        }\n    }\n    throw new Error('virtual element was not created');\n};\nvar ɵ0$7 = getElement;\n\nvar OverlayBaseController = /** @class */ (function () {\n    function OverlayBaseController(ctrl) {\n        this.ctrl = ctrl;\n    }\n    /**\n     * Creates a new overlay\n     */\n    OverlayBaseController.prototype.create = function (opts) {\n        // TODO: next major release opts is not optional\n        return this.ctrl.create((opts || {}));\n    };\n    /**\n     * When `id` is not provided, it dismisses the top overlay.\n     */\n    OverlayBaseController.prototype.dismiss = function (data, role, id) {\n        return this.ctrl.dismiss(data, role, id);\n    };\n    /**\n     * Returns the top overlay.\n     */\n    OverlayBaseController.prototype.getTop = function () {\n        return this.ctrl.getTop();\n    };\n    return OverlayBaseController;\n}());\n\nvar ActionSheetController = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(ActionSheetController, _super);\n    function ActionSheetController() {\n        return _super.call(this, _ionic_core__WEBPACK_IMPORTED_MODULE_1__.actionSheetController) || this;\n    }\n    ActionSheetController.ngInjectableDef = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ factory: function ActionSheetController_Factory() { return new ActionSheetController(); }, token: ActionSheetController, providedIn: \"root\" });\n    ActionSheetController = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n            providedIn: 'root',\n        })\n    ], ActionSheetController);\n    return ActionSheetController;\n}(OverlayBaseController));\n\nvar AlertController = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(AlertController, _super);\n    function AlertController() {\n        return _super.call(this, _ionic_core__WEBPACK_IMPORTED_MODULE_1__.alertController) || this;\n    }\n    AlertController.ngInjectableDef = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ factory: function AlertController_Factory() { return new AlertController(); }, token: AlertController, providedIn: \"root\" });\n    AlertController = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n            providedIn: 'root',\n        })\n    ], AlertController);\n    return AlertController;\n}(OverlayBaseController));\n\nvar LoadingController = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(LoadingController, _super);\n    function LoadingController() {\n        return _super.call(this, _ionic_core__WEBPACK_IMPORTED_MODULE_1__.loadingController) || this;\n    }\n    LoadingController.ngInjectableDef = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ factory: function LoadingController_Factory() { return new LoadingController(); }, token: LoadingController, providedIn: \"root\" });\n    LoadingController = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n            providedIn: 'root',\n        })\n    ], LoadingController);\n    return LoadingController;\n}(OverlayBaseController));\n\nvar MenuController = /** @class */ (function () {\n    function MenuController() {\n    }\n    /**\n     * Programmatically open the Menu.\n     * @param [menuId]  Optionally get the menu by its id, or side.\n     * @return returns a promise when the menu is fully opened\n     */\n    MenuController.prototype.open = function (menuId) {\n        return _ionic_core__WEBPACK_IMPORTED_MODULE_1__.menuController.open(menuId);\n    };\n    /**\n     * Programmatically close the Menu. If no `menuId` is given as the first\n     * argument then it'll close any menu which is open. If a `menuId`\n     * is given then it'll close that exact menu.\n     * @param [menuId]  Optionally get the menu by its id, or side.\n     * @return returns a promise when the menu is fully closed\n     */\n    MenuController.prototype.close = function (menuId) {\n        return _ionic_core__WEBPACK_IMPORTED_MODULE_1__.menuController.close(menuId);\n    };\n    /**\n     * Toggle the menu. If it's closed, it will open, and if opened, it\n     * will close.\n     * @param [menuId]  Optionally get the menu by its id, or side.\n     * @return returns a promise when the menu has been toggled\n     */\n    MenuController.prototype.toggle = function (menuId) {\n        return _ionic_core__WEBPACK_IMPORTED_MODULE_1__.menuController.toggle(menuId);\n    };\n    /**\n     * Used to enable or disable a menu. For example, there could be multiple\n     * left menus, but only one of them should be able to be opened at the same\n     * time. If there are multiple menus on the same side, then enabling one menu\n     * will also automatically disable all the others that are on the same side.\n     * @param [menuId]  Optionally get the menu by its id, or side.\n     * @return Returns the instance of the menu, which is useful for chaining.\n     */\n    MenuController.prototype.enable = function (shouldEnable, menuId) {\n        return _ionic_core__WEBPACK_IMPORTED_MODULE_1__.menuController.enable(shouldEnable, menuId);\n    };\n    /**\n     * Used to enable or disable the ability to swipe open the menu.\n     * @param shouldEnable  True if it should be swipe-able, false if not.\n     * @param [menuId]  Optionally get the menu by its id, or side.\n     * @return Returns the instance of the menu, which is useful for chaining.\n     */\n    MenuController.prototype.swipeGesture = function (shouldEnable, menuId) {\n        return _ionic_core__WEBPACK_IMPORTED_MODULE_1__.menuController.swipeGesture(shouldEnable, menuId);\n    };\n    /**\n     * @param [menuId] Optionally get the menu by its id, or side.\n     * @return Returns true if the specified menu is currently open, otherwise false.\n     * If the menuId is not specified, it returns true if ANY menu is currenly open.\n     */\n    MenuController.prototype.isOpen = function (menuId) {\n        return _ionic_core__WEBPACK_IMPORTED_MODULE_1__.menuController.isOpen(menuId);\n    };\n    /**\n     * @param [menuId]  Optionally get the menu by its id, or side.\n     * @return Returns true if the menu is currently enabled, otherwise false.\n     */\n    MenuController.prototype.isEnabled = function (menuId) {\n        return _ionic_core__WEBPACK_IMPORTED_MODULE_1__.menuController.isEnabled(menuId);\n    };\n    /**\n     * Used to get a menu instance. If a `menuId` is not provided then it'll\n     * return the first menu found. If a `menuId` is `left` or `right`, then\n     * it'll return the enabled menu on that side. Otherwise, if a `menuId` is\n     * provided, then it'll try to find the menu using the menu's `id`\n     * property. If a menu is not found then it'll return `null`.\n     * @param [menuId]  Optionally get the menu by its id, or side.\n     * @return Returns the instance of the menu if found, otherwise `null`.\n     */\n    MenuController.prototype.get = function (menuId) {\n        return _ionic_core__WEBPACK_IMPORTED_MODULE_1__.menuController.get(menuId);\n    };\n    /**\n     * @return Returns the instance of the menu already opened, otherwise `null`.\n     */\n    MenuController.prototype.getOpen = function () {\n        return _ionic_core__WEBPACK_IMPORTED_MODULE_1__.menuController.getOpen();\n    };\n    /**\n     * @return Returns an array of all menu instances.\n     */\n    MenuController.prototype.getMenus = function () {\n        return _ionic_core__WEBPACK_IMPORTED_MODULE_1__.menuController.getMenus();\n    };\n    MenuController.ngInjectableDef = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ factory: function MenuController_Factory() { return new MenuController(); }, token: MenuController, providedIn: \"root\" });\n    MenuController = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n            providedIn: 'root',\n        })\n    ], MenuController);\n    return MenuController;\n}());\n\nvar PickerController = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(PickerController, _super);\n    function PickerController() {\n        return _super.call(this, _ionic_core__WEBPACK_IMPORTED_MODULE_1__.pickerController) || this;\n    }\n    PickerController.ngInjectableDef = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ factory: function PickerController_Factory() { return new PickerController(); }, token: PickerController, providedIn: \"root\" });\n    PickerController = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n            providedIn: 'root',\n        })\n    ], PickerController);\n    return PickerController;\n}(OverlayBaseController));\n\nvar ModalController = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(ModalController, _super);\n    function ModalController(angularDelegate, resolver, injector) {\n        var _this = _super.call(this, _ionic_core__WEBPACK_IMPORTED_MODULE_1__.modalController) || this;\n        _this.angularDelegate = angularDelegate;\n        _this.resolver = resolver;\n        _this.injector = injector;\n        return _this;\n    }\n    ModalController.prototype.create = function (opts) {\n        return _super.prototype.create.call(this, (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, opts, { delegate: this.angularDelegate.create(this.resolver, this.injector) }));\n    };\n    ModalController.ctorParameters = function () { return [\n        { type: AngularDelegate },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    ModalController = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())()\n    ], ModalController);\n    return ModalController;\n}(OverlayBaseController));\n\nvar PopoverController = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(PopoverController, _super);\n    function PopoverController(angularDelegate, resolver, injector) {\n        var _this = _super.call(this, _ionic_core__WEBPACK_IMPORTED_MODULE_1__.popoverController) || this;\n        _this.angularDelegate = angularDelegate;\n        _this.resolver = resolver;\n        _this.injector = injector;\n        return _this;\n    }\n    PopoverController.prototype.create = function (opts) {\n        return _super.prototype.create.call(this, (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, opts, { delegate: this.angularDelegate.create(this.resolver, this.injector) }));\n    };\n    PopoverController.ctorParameters = function () { return [\n        { type: AngularDelegate },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) },\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    PopoverController = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())()\n    ], PopoverController);\n    return PopoverController;\n}(OverlayBaseController));\n\nvar ToastController = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(ToastController, _super);\n    function ToastController() {\n        return _super.call(this, _ionic_core__WEBPACK_IMPORTED_MODULE_1__.toastController) || this;\n    }\n    ToastController.ngInjectableDef = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ factory: function ToastController_Factory() { return new ToastController(); }, token: ToastController, providedIn: \"root\" });\n    ToastController = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n            providedIn: 'root',\n        })\n    ], ToastController);\n    return ToastController;\n}(OverlayBaseController));\n\nvar DomController = /** @class */ (function () {\n    function DomController() {\n    }\n    /**\n     * Schedules a task to run during the READ phase of the next frame.\n     * This task should only read the DOM, but never modify it.\n     */\n    DomController.prototype.read = function (cb) {\n        getQueue().read(cb);\n    };\n    /**\n     * Schedules a task to run during the WRITE phase of the next frame.\n     * This task should write the DOM, but never READ it.\n     */\n    DomController.prototype.write = function (cb) {\n        getQueue().write(cb);\n    };\n    DomController.ngInjectableDef = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ factory: function DomController_Factory() { return new DomController(); }, token: DomController, providedIn: \"root\" });\n    DomController = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n            providedIn: 'root',\n        })\n    ], DomController);\n    return DomController;\n}());\nvar getQueue = function () {\n    var win = typeof window !== 'undefined' ? window : null;\n    if (win != null) {\n        var Ionic = win.Ionic;\n        if (Ionic && Ionic.queue) {\n            return Ionic.queue;\n        }\n        return {\n            read: function (cb) { return win.requestAnimationFrame(cb); },\n            write: function (cb) { return win.requestAnimationFrame(cb); }\n        };\n    }\n    return {\n        read: function (cb) { return cb(); },\n        write: function (cb) { return cb(); }\n    };\n};\nvar ɵ0$8 = getQueue;\n\nvar AnimationController = /** @class */ (function () {\n    function AnimationController() {\n    }\n    /**\n     * Create a new animation\n     */\n    AnimationController.prototype.create = function (animationId) {\n        return (0,_ionic_core__WEBPACK_IMPORTED_MODULE_1__.createAnimation)(animationId);\n    };\n    /**\n     * EXPERIMENTAL\n     *\n     * Given a progression and a cubic bezier function,\n     * this utility returns the time value(s) at which the\n     * cubic bezier reaches the given time progression.\n     *\n     * If the cubic bezier never reaches the progression\n     * the result will be an empty array.\n     *\n     * This is most useful for switching between easing curves\n     * when doing a gesture animation (i.e. going from linear easing\n     * during a drag, to another easing when `progressEnd` is called)\n     */\n    AnimationController.prototype.easingTime = function (p0, p1, p2, p3, progression) {\n        return (0,_ionic_core__WEBPACK_IMPORTED_MODULE_1__.getTimeGivenProgression)(p0, p1, p2, p3, progression);\n    };\n    AnimationController.ngInjectableDef = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ factory: function AnimationController_Factory() { return new AnimationController(); }, token: AnimationController, providedIn: \"root\" });\n    AnimationController = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n            providedIn: 'root',\n        })\n    ], AnimationController);\n    return AnimationController;\n}());\n\nvar GestureController = /** @class */ (function () {\n    function GestureController(zone) {\n        this.zone = zone;\n    }\n    /**\n     * Create a new gesture\n     */\n    GestureController.prototype.create = function (opts, runInsideAngularZone) {\n        var _this = this;\n        if (runInsideAngularZone === void 0) { runInsideAngularZone = false; }\n        if (runInsideAngularZone) {\n            Object.getOwnPropertyNames(opts).forEach(function (key) {\n                if (typeof opts[key] === 'function') {\n                    var fn_1 = opts[key];\n                    opts[key] = function () {\n                        var props = [];\n                        for (var _i = 0; _i < arguments.length; _i++) {\n                            props[_i] = arguments[_i];\n                        }\n                        return _this.zone.run(function () { return fn_1.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__spread)(props)); });\n                    };\n                }\n            });\n        }\n        return (0,_ionic_core__WEBPACK_IMPORTED_MODULE_1__.createGesture)(opts);\n    };\n    GestureController.ctorParameters = function () { return [\n        { type: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) }\n    ]; };\n    GestureController.ngInjectableDef = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({ factory: function GestureController_Factory() { return new GestureController(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()))); }, token: GestureController, providedIn: \"root\" });\n    GestureController = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n            providedIn: 'root',\n        })\n    ], GestureController);\n    return GestureController;\n}());\n\nvar IonicRouteStrategy = /** @class */ (function () {\n    function IonicRouteStrategy() {\n    }\n    IonicRouteStrategy.prototype.shouldDetach = function (_route) {\n        return false;\n    };\n    IonicRouteStrategy.prototype.shouldAttach = function (_route) {\n        return false;\n    };\n    IonicRouteStrategy.prototype.store = function (_route, _detachedTree) {\n        return;\n    };\n    IonicRouteStrategy.prototype.retrieve = function (_route) {\n        return null;\n    };\n    IonicRouteStrategy.prototype.shouldReuseRoute = function (future, curr) {\n        var e_1, _a;\n        if (future.routeConfig !== curr.routeConfig) {\n            return false;\n        }\n        // checking router params\n        var futureParams = future.params;\n        var currentParams = curr.params;\n        var keysA = Object.keys(futureParams);\n        var keysB = Object.keys(currentParams);\n        if (keysA.length !== keysB.length) {\n            return false;\n        }\n        try {\n            // Test for A's keys different from B.\n            for (var keysA_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__values)(keysA), keysA_1_1 = keysA_1.next(); !keysA_1_1.done; keysA_1_1 = keysA_1.next()) {\n                var key = keysA_1_1.value;\n                if (currentParams[key] !== futureParams[key]) {\n                    return false;\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (keysA_1_1 && !keysA_1_1.done && (_a = keysA_1.return)) _a.call(keysA_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return true;\n    };\n    return IonicRouteStrategy;\n}());\n\nvar appInitialize = function (config, doc, zone) {\n    return function () {\n        var win = doc.defaultView;\n        if (win && typeof window !== 'undefined') {\n            (0,_ionic_core__WEBPACK_IMPORTED_MODULE_1__.setupConfig)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, config, { _zoneGate: function (h) { return zone.run(h); } }));\n            var aelFn_1 = '__zone_symbol__addEventListener' in doc.body\n                ? '__zone_symbol__addEventListener'\n                : 'addEventListener';\n            return (0,_ionic_core_loader__WEBPACK_IMPORTED_MODULE_2__.applyPolyfills)().then(function () {\n                return (0,_ionic_core_loader__WEBPACK_IMPORTED_MODULE_2__.defineCustomElements)(win, {\n                    exclude: ['ion-tabs', 'ion-tab'],\n                    syncQueue: true,\n                    raf: raf,\n                    jmp: function (h) { return zone.runOutsideAngular(h); },\n                    ael: function (elm, eventName, cb, opts) {\n                        elm[aelFn_1](eventName, cb, opts);\n                    },\n                    rel: function (elm, eventName, cb, opts) {\n                        elm.removeEventListener(eventName, cb, opts);\n                    }\n                });\n            });\n        }\n    };\n};\n\nvar DECLARATIONS = [\n    // proxies\n    IonApp,\n    IonAvatar,\n    IonBackButton,\n    IonBackdrop,\n    IonBadge,\n    IonButton,\n    IonButtons,\n    IonCard,\n    IonCardContent,\n    IonCardHeader,\n    IonCardSubtitle,\n    IonCardTitle,\n    IonCheckbox,\n    IonChip,\n    IonCol,\n    IonContent,\n    IonDatetime,\n    IonFab,\n    IonFabButton,\n    IonFabList,\n    IonFooter,\n    IonGrid,\n    IonHeader,\n    IonIcon,\n    IonImg,\n    IonInfiniteScroll,\n    IonInfiniteScrollContent,\n    IonInput,\n    IonItem,\n    IonItemDivider,\n    IonItemGroup,\n    IonItemOption,\n    IonItemOptions,\n    IonItemSliding,\n    IonLabel,\n    IonList,\n    IonListHeader,\n    IonMenu,\n    IonMenuButton,\n    IonMenuToggle,\n    IonNav,\n    IonNavLink,\n    IonNote,\n    IonProgressBar,\n    IonRadio,\n    IonRadioGroup,\n    IonRange,\n    IonRefresher,\n    IonRefresherContent,\n    IonReorder,\n    IonReorderGroup,\n    IonRippleEffect,\n    IonRow,\n    IonSearchbar,\n    IonSegment,\n    IonSegmentButton,\n    IonSelect,\n    IonSelectOption,\n    IonSkeletonText,\n    IonSlide,\n    IonSlides,\n    IonSpinner,\n    IonSplitPane,\n    IonTabBar,\n    IonTabButton,\n    IonText,\n    IonTextarea,\n    IonThumbnail,\n    IonToggle,\n    IonToolbar,\n    IonTitle,\n    IonTabs,\n    // ngModel accessors\n    BooleanValueAccessor,\n    NumericValueAccessor,\n    RadioValueAccessor,\n    SelectValueAccessor,\n    TextValueAccessor,\n    // navigation\n    IonRouterOutlet,\n    IonBackButtonDelegate,\n    NavDelegate,\n    RouterLinkDelegate,\n    // virtual scroll\n    VirtualFooter,\n    VirtualHeader,\n    VirtualItem,\n    IonVirtualScroll\n];\nvar IonicModule = /** @class */ (function () {\n    function IonicModule() {\n    }\n    IonicModule_1 = IonicModule;\n    IonicModule.forRoot = function (config) {\n        return {\n            ngModule: IonicModule_1,\n            providers: [\n                {\n                    provide: ConfigToken,\n                    useValue: config\n                },\n                {\n                    provide: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()),\n                    useFactory: appInitialize,\n                    multi: true,\n                    deps: [\n                        ConfigToken,\n                        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/common'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()),\n                        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())\n                    ]\n                }\n            ]\n        };\n    };\n    var IonicModule_1;\n    IonicModule = IonicModule_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([\n        Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n            declarations: DECLARATIONS,\n            exports: DECLARATIONS,\n            providers: [AngularDelegate, ModalController, PopoverController],\n            imports: [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@angular/common'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())]\n        })\n    ], IonicModule);\n    return IonicModule;\n}());\n\n// DIRECTIVES\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\n//# sourceMappingURL=ionic-angular.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@ionic/angular/fesm5/ionic-angular.js\n");

/***/ }),

/***/ "./node_modules/@ionic/angular/node_modules/tslib/tslib.es6.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@ionic/angular/node_modules/tslib/tslib.es6.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"__extends\": () => (/* binding */ __extends),\n/* harmony export */   \"__assign\": () => (/* binding */ __assign),\n/* harmony export */   \"__rest\": () => (/* binding */ __rest),\n/* harmony export */   \"__decorate\": () => (/* binding */ __decorate),\n/* harmony export */   \"__param\": () => (/* binding */ __param),\n/* harmony export */   \"__metadata\": () => (/* binding */ __metadata),\n/* harmony export */   \"__awaiter\": () => (/* binding */ __awaiter),\n/* harmony export */   \"__generator\": () => (/* binding */ __generator),\n/* harmony export */   \"__createBinding\": () => (/* binding */ __createBinding),\n/* harmony export */   \"__exportStar\": () => (/* binding */ __exportStar),\n/* harmony export */   \"__values\": () => (/* binding */ __values),\n/* harmony export */   \"__read\": () => (/* binding */ __read),\n/* harmony export */   \"__spread\": () => (/* binding */ __spread),\n/* harmony export */   \"__spreadArrays\": () => (/* binding */ __spreadArrays),\n/* harmony export */   \"__await\": () => (/* binding */ __await),\n/* harmony export */   \"__asyncGenerator\": () => (/* binding */ __asyncGenerator),\n/* harmony export */   \"__asyncDelegator\": () => (/* binding */ __asyncDelegator),\n/* harmony export */   \"__asyncValues\": () => (/* binding */ __asyncValues),\n/* harmony export */   \"__makeTemplateObject\": () => (/* binding */ __makeTemplateObject),\n/* harmony export */   \"__importStar\": () => (/* binding */ __importStar),\n/* harmony export */   \"__importDefault\": () => (/* binding */ __importDefault),\n/* harmony export */   \"__classPrivateFieldGet\": () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   \"__classPrivateFieldSet\": () => (/* binding */ __classPrivateFieldSet)\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nfunction __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@ionic/angular/node_modules/tslib/tslib.es6.js\n");

/***/ }),

/***/ "./node_modules/@ionic/core/dist/esm-es5/animation-096c6391.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm-es5/animation-096c6391.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"c\": () => (/* binding */ createAnimation)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers-dd7e4b7b.js */ \"./node_modules/@ionic/core/dist/esm-es5/helpers-dd7e4b7b.js\");\nvar animationPrefix;var processKeyframes=function(e){e.forEach((function(e){for(var n in e){if(e.hasOwnProperty(n)){var r=e[n];if(n===\"easing\"){var t=\"animation-timing-function\";e[t]=r;delete e[n]}else{var t=convertCamelCaseToHypen(n);if(t!==n){e[t]=r;delete e[n]}}}}}));return e};var convertCamelCaseToHypen=function(e){return e.replace(/([a-z0-9])([A-Z])/g,\"$1-$2\").toLowerCase()};var getAnimationPrefix=function(e){if(animationPrefix===undefined){var n=e.style.animationName!==undefined;var r=e.style.webkitAnimationName!==undefined;animationPrefix=!n&&r?\"-webkit-\":\"\"}return animationPrefix};var setStyleProperty=function(e,n,r){var t=n.startsWith(\"animation\")?getAnimationPrefix(e):\"\";e.style.setProperty(t+n,r)};var removeStyleProperty=function(e,n){var r=n.startsWith(\"animation\")?getAnimationPrefix(e):\"\";e.style.removeProperty(r+n)};var animationEnd=function(e,n){var r;var t={passive:true};var a=function(){if(r){r()}};var i=function(r){if(e===r.target){a();n(r)}};if(e){e.addEventListener(\"webkitAnimationEnd\",i,t);e.addEventListener(\"animationend\",i,t);r=function(){e.removeEventListener(\"webkitAnimationEnd\",i,t);e.removeEventListener(\"animationend\",i,t)}}return a};var generateKeyframeRules=function(e){if(e===void 0){e=[]}return e.map((function(e){var n=e.offset;var r=[];for(var t in e){if(e.hasOwnProperty(t)&&t!==\"offset\"){r.push(t+\": \"+e[t]+\";\")}}return n*100+\"% { \"+r.join(\" \")+\" }\"})).join(\" \")};var keyframeIds=[];var generateKeyframeName=function(e){var n=keyframeIds.indexOf(e);if(n<0){n=keyframeIds.push(e)-1}return\"ion-animation-\"+n};var getStyleContainer=function(e){var n=e.getRootNode();return n.head||n};var createKeyframeStylesheet=function(e,n,r){var t=getStyleContainer(r);var a=getAnimationPrefix(r);var i=t.querySelector(\"#\"+e);if(i){return i}var o=(r.ownerDocument||document).createElement(\"style\");o.id=e;o.textContent=\"@\"+a+\"keyframes \"+e+\" { \"+n+\" } @\"+a+\"keyframes \"+e+\"-alt { \"+n+\" }\";t.appendChild(o);return o};var addClassToArray=function(e,n){if(e===void 0){e=[]}if(n!==undefined){var r=Array.isArray(n)?n:[n];return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([],e),r)}return e};var createAnimation=function(e){var n;var r;var t;var a;var i;var o;var f=[];var u=[];var s=[];var v=false;var l;var c={};var d=[];var y=[];var m={};var p=0;var h=false;var g=false;var E;var P;var S;var A;var C=true;var b=false;var T=true;var k;var w;var x=e;var _=[];var K=[];var I=[];var D=[];var L=[];var N=[];var R=[];var F=[];var O=[];var W=[];var j=typeof AnimationEffect===\"function\"||typeof window.AnimationEffect===\"function\";var H=typeof Element===\"function\"&&typeof Element.prototype.animate===\"function\"&&j;var M=100;var $=function(){return W};var q=function(e){D.forEach((function(n){n.destroy(e)}));z(e);I.length=0;D.length=0;f.length=0;G();v=false;T=true;return w};var z=function(e){J();if(e){Q()}};var Z=function(){h=false;g=false;T=true;P=undefined;S=undefined;A=undefined;p=0;b=false;C=true};var B=function(e,n){var r=n&&n.oneTimeCallback?K:_;r.push({c:e,o:n});return w};var G=function(){_.length=0;K.length=0;return w};var J=function(){if(H){W.forEach((function(e){e.cancel()}));W.length=0}else{var e=I.slice();(0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_0__.r)((function(){e.forEach((function(e){removeStyleProperty(e,\"animation-name\");removeStyleProperty(e,\"animation-duration\");removeStyleProperty(e,\"animation-timing-function\");removeStyleProperty(e,\"animation-iteration-count\");removeStyleProperty(e,\"animation-delay\");removeStyleProperty(e,\"animation-play-state\");removeStyleProperty(e,\"animation-fill-mode\");removeStyleProperty(e,\"animation-direction\")}))}))}};var Q=function(){L.forEach((function(e){if(e&&e.parentNode){e.parentNode.removeChild(e)}}));L.length=0};var U=function(e){N.push(e);return w};var V=function(e){R.push(e);return w};var X=function(e){F.push(e);return w};var Y=function(e){O.push(e);return w};var ee=function(e){u=addClassToArray(u,e);return w};var ne=function(e){s=addClassToArray(s,e);return w};var re=function(e){if(e===void 0){e={}}c=e;return w};var te=function(e){if(e===void 0){e=[]}for(var n=0,r=e;n<r.length;n++){var t=r[n];c[t]=\"\"}return w};var ae=function(e){d=addClassToArray(d,e);return w};var ie=function(e){y=addClassToArray(y,e);return w};var oe=function(e){if(e===void 0){e={}}m=e;return w};var fe=function(e){if(e===void 0){e=[]}for(var n=0,r=e;n<r.length;n++){var t=r[n];m[t]=\"\"}return w};var ue=function(){if(i!==undefined){return i}if(l){return l.getFill()}return\"both\"};var se=function(){if(P!==undefined){return P}if(o!==undefined){return o}if(l){return l.getDirection()}return\"normal\"};var ve=function(){if(h){return\"linear\"}if(t!==undefined){return t}if(l){return l.getEasing()}return\"linear\"};var le=function(){if(g){return 0}if(S!==undefined){return S}if(r!==undefined){return r}if(l){return l.getDuration()}return 0};var ce=function(){if(a!==undefined){return a}if(l){return l.getIterations()}return 1};var de=function(){if(A!==undefined){return A}if(n!==undefined){return n}if(l){return l.getDelay()}return 0};var ye=function(){return f};var me=function(e){o=e;Ne(true);return w};var pe=function(e){i=e;Ne(true);return w};var he=function(e){n=e;Ne(true);return w};var ge=function(e){t=e;Ne(true);return w};var Ee=function(e){if(!H&&e===0){e=1}r=e;Ne(true);return w};var Pe=function(e){a=e;Ne(true);return w};var Se=function(e){l=e;return w};var Ae=function(e){if(e!=null){if(e.nodeType===1){I.push(e)}else if(e.length>=0){for(var n=0;n<e.length;n++){I.push(e[n])}}else{console.error(\"Invalid addElement value\")}}return w};var Ce=function(e){if(e!=null){if(Array.isArray(e)){for(var n=0,r=e;n<r.length;n++){var t=r[n];t.parent(w);D.push(t)}}else{e.parent(w);D.push(e)}}return w};var be=function(e){f=e;return w};var Te=function(){N.forEach((function(e){return e()}));R.forEach((function(e){return e()}));var e=u;var n=s;var r=c;I.forEach((function(t){var a=t.classList;e.forEach((function(e){return a.add(e)}));n.forEach((function(e){return a.remove(e)}));for(var i in r){if(r.hasOwnProperty(i)){setStyleProperty(t,i,r[i])}}}))};var ke=function(){Me();F.forEach((function(e){return e()}));O.forEach((function(e){return e()}));var e=C?1:0;var n=d;var r=y;var t=m;I.forEach((function(e){var a=e.classList;n.forEach((function(e){return a.add(e)}));r.forEach((function(e){return a.remove(e)}));for(var i in t){if(t.hasOwnProperty(i)){setStyleProperty(e,i,t[i])}}}));_.forEach((function(n){return n.c(e,w)}));K.forEach((function(n){return n.c(e,w)}));K.length=0;T=true;if(C){b=true}C=true};var we=function(){if(p===0){return}p--;if(p===0){ke();if(l){l.animationFinish()}}};var xe=function(n){if(n===void 0){n=true}Q();var r=processKeyframes(f);I.forEach((function(t){if(r.length>0){var a=generateKeyframeRules(r);k=e!==undefined?e:generateKeyframeName(a);var i=createKeyframeStylesheet(k,a,t);L.push(i);setStyleProperty(t,\"animation-duration\",le()+\"ms\");setStyleProperty(t,\"animation-timing-function\",ve());setStyleProperty(t,\"animation-delay\",de()+\"ms\");setStyleProperty(t,\"animation-fill-mode\",ue());setStyleProperty(t,\"animation-direction\",se());var o=ce()===Infinity?\"infinite\":ce().toString();setStyleProperty(t,\"animation-iteration-count\",o);setStyleProperty(t,\"animation-play-state\",\"paused\");if(n){setStyleProperty(t,\"animation-name\",i.id+\"-alt\")}(0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_0__.r)((function(){setStyleProperty(t,\"animation-name\",i.id||null)}))}}))};var _e=function(){I.forEach((function(e){var n=e.animate(f,{id:x,delay:de(),duration:le(),easing:ve(),iterations:ce(),fill:ue(),direction:se()});n.pause();W.push(n)}));if(W.length>0){W[0].onfinish=function(){we()}}};var Ke=function(e){if(e===void 0){e=true}Te();if(f.length>0){if(H){_e()}else{xe(e)}}v=true};var Ie=function(e){e=Math.min(Math.max(e,0),.9999);if(H){W.forEach((function(n){n.currentTime=n.effect.getComputedTiming().delay+le()*e;n.pause()}))}else{var n=\"-\"+le()*e+\"ms\";I.forEach((function(e){if(f.length>0){setStyleProperty(e,\"animation-delay\",n);setStyleProperty(e,\"animation-play-state\",\"paused\")}}))}};var De=function(e){W.forEach((function(e){e.effect.updateTiming({delay:de(),duration:le(),easing:ve(),iterations:ce(),fill:ue(),direction:se()})}));if(e!==undefined){Ie(e)}};var Le=function(e,n){if(e===void 0){e=true}(0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_0__.r)((function(){I.forEach((function(r){setStyleProperty(r,\"animation-name\",k||null);setStyleProperty(r,\"animation-duration\",le()+\"ms\");setStyleProperty(r,\"animation-timing-function\",ve());setStyleProperty(r,\"animation-delay\",n!==undefined?\"-\"+n*le()+\"ms\":de()+\"ms\");setStyleProperty(r,\"animation-fill-mode\",ue()||null);setStyleProperty(r,\"animation-direction\",se()||null);var t=ce()===Infinity?\"infinite\":ce().toString();setStyleProperty(r,\"animation-iteration-count\",t);if(e){setStyleProperty(r,\"animation-name\",k+\"-alt\")}(0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_0__.r)((function(){setStyleProperty(r,\"animation-name\",k||null)}))}))}))};var Ne=function(e,n,r){if(e===void 0){e=false}if(n===void 0){n=true}if(e){D.forEach((function(t){t.update(e,n,r)}))}if(H){De(r)}else{Le(n,r)}return w};var Re=function(e,n){if(e===void 0){e=false}D.forEach((function(r){r.progressStart(e,n)}));We();h=e;if(!v){Ke()}else{Ne(false,true,n)}return w};var Fe=function(e){D.forEach((function(n){n.progressStep(e)}));Ie(e);return w};var Oe=function(e,n,r){h=false;D.forEach((function(t){t.progressEnd(e,n,r)}));if(r!==undefined){S=r}b=false;C=true;if(e===0){P=se()===\"reverse\"?\"normal\":\"reverse\";if(P===\"reverse\"){C=false}if(H){Ne();Ie(1-n)}else{A=(1-n)*le()*-1;Ne(false,false)}}else if(e===1){if(H){Ne();Ie(n)}else{A=n*le()*-1;Ne(false,false)}}if(e!==undefined){B((function(){S=undefined;P=undefined;A=undefined}),{oneTimeCallback:true});if(!l){Be()}}return w};var We=function(){if(v){if(H){W.forEach((function(e){e.pause()}))}else{I.forEach((function(e){setStyleProperty(e,\"animation-play-state\",\"paused\")}))}}};var je=function(){D.forEach((function(e){e.pause()}));We();return w};var He=function(){E=undefined;we()};var Me=function(){if(E){clearTimeout(E)}};var $e=function(){Me();(0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_0__.r)((function(){I.forEach((function(e){if(f.length>0){setStyleProperty(e,\"animation-play-state\",\"running\")}}))}));if(f.length===0||I.length===0){we()}else{var e=de()||0;var n=le()||0;var r=ce()||1;if(isFinite(r)){E=setTimeout(He,e+n*r+M)}animationEnd(I[0],(function(){Me();(0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_0__.r)((function(){qe();(0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_0__.r)(we)}))}))}};var qe=function(){I.forEach((function(e){removeStyleProperty(e,\"animation-duration\");removeStyleProperty(e,\"animation-delay\");removeStyleProperty(e,\"animation-play-state\")}))};var ze=function(){W.forEach((function(e){e.play()}));if(f.length===0||I.length===0){we()}};var Ze=function(){if(H){Ie(0);De()}else{Le()}};var Be=function(e){return new Promise((function(n){if(e&&e.sync){g=true;B((function(){return g=false}),{oneTimeCallback:true})}if(!v){Ke()}if(b){Ze();b=false}if(T){p=D.length+1;T=false}B((function(){return n()}),{oneTimeCallback:true});D.forEach((function(e){e.play()}));if(H){ze()}else{$e()}}))};var Ge=function(){D.forEach((function(e){e.stop()}));if(v){J();v=false}Z()};var Je=function(e,n){var r;var t=f[0];if(t!==undefined&&(t.offset===undefined||t.offset===0)){t[e]=n}else{f=(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([(r={offset:0},r[e]=n,r)],f)}return w};var Qe=function(e,n){var r;var t=f[f.length-1];if(t!==undefined&&(t.offset===undefined||t.offset===1)){t[e]=n}else{f=(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([],f),[(r={offset:1},r[e]=n,r)])}return w};var Ue=function(e,n,r){return Je(e,n).to(e,r)};return w={parentAnimation:l,elements:I,childAnimations:D,id:x,animationFinish:we,from:Je,to:Qe,fromTo:Ue,parent:Se,play:Be,pause:je,stop:Ge,destroy:q,keyframes:be,addAnimation:Ce,addElement:Ae,update:Ne,fill:pe,direction:me,iterations:Pe,duration:Ee,easing:ge,delay:he,getWebAnimations:$,getKeyframes:ye,getFill:ue,getDirection:se,getDelay:de,getIterations:ce,getEasing:ve,getDuration:le,afterAddRead:X,afterAddWrite:Y,afterClearStyles:fe,afterStyles:oe,afterRemoveClass:ie,afterAddClass:ae,beforeAddRead:U,beforeAddWrite:V,beforeClearStyles:te,beforeStyles:re,beforeRemoveClass:ne,beforeAddClass:ee,onFinish:B,progressStart:Re,progressStep:Fe,progressEnd:Oe}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvZGlzdC9lc20tZXM1L2FuaW1hdGlvbi0wOTZjNjM5MS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNkUsb0JBQW9CLGlDQUFpQyx1QkFBdUIsZ0JBQWdCLHdCQUF3QixXQUFXLGlCQUFpQixrQ0FBa0MsT0FBTyxZQUFZLEtBQUssaUNBQWlDLFVBQVUsT0FBTyxnQkFBZ0IsR0FBRyxVQUFVLHdDQUF3Qyw4REFBOEQsbUNBQW1DLGdDQUFnQyx3Q0FBd0MsOENBQThDLG9DQUFvQyx3QkFBd0IscUNBQXFDLHlEQUF5RCw0QkFBNEIsc0NBQXNDLHlEQUF5RCw2QkFBNkIsK0JBQStCLE1BQU0sT0FBTyxjQUFjLGlCQUFpQixNQUFNLE1BQU0sa0JBQWtCLGlCQUFpQixJQUFJLE9BQU8sTUFBTSw2Q0FBNkMsdUNBQXVDLGFBQWEsZ0RBQWdELDJDQUEyQyxVQUFVLHNDQUFzQyxlQUFlLEtBQUssMEJBQTBCLGVBQWUsU0FBUyxnQkFBZ0Isc0NBQXNDLHFCQUFxQixJQUFJLGtCQUFrQixpQkFBaUIsRUFBRSxjQUFjLG1CQUFtQixxQ0FBcUMsNkJBQTZCLFFBQVEsd0JBQXdCLDBCQUEwQixrQ0FBa0Msc0JBQXNCLGtCQUFrQiw2Q0FBNkMsMkJBQTJCLDRCQUE0Qiw2QkFBNkIsTUFBTSxTQUFTLHlEQUF5RCxPQUFPLHVDQUF1QyxRQUFRLDRCQUE0QixPQUFPLEVBQUUsaUJBQWlCLFVBQVUsa0NBQWtDLGVBQWUsS0FBSyxrQkFBa0IsNkJBQTZCLE9BQU8sb0RBQWEsQ0FBQyxvREFBYSxVQUFVLFVBQVUsZ0NBQWdDLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLFNBQVMsU0FBUyxTQUFTLFlBQVksTUFBTSxTQUFTLFNBQVMsU0FBUyxTQUFTLFFBQVEsWUFBWSxZQUFZLE1BQU0sTUFBTSxNQUFNLE1BQU0sV0FBVyxZQUFZLFdBQVcsTUFBTSxNQUFNLFFBQVEsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxTQUFTLFNBQVMsU0FBUyxzRkFBc0Ysb0ZBQW9GLFVBQVUsaUJBQWlCLFVBQVUsa0JBQWtCLHVCQUF1QixhQUFhLEdBQUcsS0FBSyxXQUFXLFdBQVcsV0FBVyxJQUFJLFFBQVEsT0FBTyxVQUFVLGtCQUFrQixJQUFJLE1BQU0sTUFBTSxpQkFBaUIsUUFBUSxRQUFRLE9BQU8sWUFBWSxZQUFZLFlBQVksSUFBSSxRQUFRLFFBQVEsb0JBQW9CLCtCQUErQixRQUFRLFFBQVEsRUFBRSxVQUFVLGlCQUFpQixXQUFXLFdBQVcsVUFBVSxpQkFBaUIsTUFBTSx1QkFBdUIsV0FBVyxHQUFHLFdBQVcsS0FBSyxnQkFBZ0IsdURBQUcsYUFBYSx1QkFBdUIsd0NBQXdDLDRDQUE0QyxtREFBbUQsbURBQW1ELHlDQUF5Qyw4Q0FBOEMsNkNBQTZDLDZDQUE2QyxHQUFHLEtBQUssaUJBQWlCLHVCQUF1QixvQkFBb0IsNkJBQTZCLEdBQUcsWUFBWSxrQkFBa0IsVUFBVSxVQUFVLGtCQUFrQixVQUFVLFVBQVUsa0JBQWtCLFVBQVUsVUFBVSxrQkFBa0IsVUFBVSxVQUFVLG1CQUFtQix1QkFBdUIsVUFBVSxtQkFBbUIsdUJBQXVCLFVBQVUsbUJBQW1CLGVBQWUsS0FBSyxJQUFJLFVBQVUsbUJBQW1CLGVBQWUsS0FBSyxnQkFBZ0IsV0FBVyxLQUFLLFdBQVcsUUFBUSxVQUFVLG1CQUFtQix1QkFBdUIsVUFBVSxtQkFBbUIsdUJBQXVCLFVBQVUsbUJBQW1CLGVBQWUsS0FBSyxJQUFJLFVBQVUsbUJBQW1CLGVBQWUsS0FBSyxnQkFBZ0IsV0FBVyxLQUFLLFdBQVcsUUFBUSxVQUFVLGtCQUFrQixrQkFBa0IsU0FBUyxNQUFNLG1CQUFtQixjQUFjLGtCQUFrQixrQkFBa0IsU0FBUyxrQkFBa0IsU0FBUyxNQUFNLHdCQUF3QixnQkFBZ0Isa0JBQWtCLE1BQU0sZUFBZSxrQkFBa0IsU0FBUyxNQUFNLHFCQUFxQixnQkFBZ0Isa0JBQWtCLE1BQU0sU0FBUyxrQkFBa0IsU0FBUyxrQkFBa0IsU0FBUyxNQUFNLHVCQUF1QixVQUFVLGtCQUFrQixrQkFBa0IsU0FBUyxNQUFNLHlCQUF5QixVQUFVLGtCQUFrQixrQkFBa0IsU0FBUyxrQkFBa0IsU0FBUyxNQUFNLG9CQUFvQixVQUFVLGtCQUFrQixVQUFVLG1CQUFtQixJQUFJLFNBQVMsVUFBVSxtQkFBbUIsSUFBSSxTQUFTLFVBQVUsbUJBQW1CLElBQUksU0FBUyxVQUFVLG1CQUFtQixJQUFJLFNBQVMsVUFBVSxtQkFBbUIsY0FBYyxJQUFJLElBQUksU0FBUyxVQUFVLG1CQUFtQixJQUFJLFNBQVMsVUFBVSxtQkFBbUIsSUFBSSxVQUFVLG1CQUFtQixZQUFZLG1CQUFtQixVQUFVLHFCQUFxQixZQUFZLFdBQVcsS0FBSyxjQUFjLEtBQUssMkNBQTJDLFVBQVUsbUJBQW1CLFlBQVkscUJBQXFCLGdCQUFnQixXQUFXLEtBQUssV0FBVyxZQUFZLFdBQVcsS0FBSyxZQUFZLFdBQVcsVUFBVSxtQkFBbUIsSUFBSSxVQUFVLGtCQUFrQix1QkFBdUIsV0FBVyxHQUFHLHVCQUF1QixXQUFXLEdBQUcsUUFBUSxRQUFRLFFBQVEsdUJBQXVCLGtCQUFrQix1QkFBdUIsZ0JBQWdCLEdBQUcsdUJBQXVCLG1CQUFtQixHQUFHLGdCQUFnQix3QkFBd0IsNkJBQTZCLElBQUksa0JBQWtCLEtBQUssdUJBQXVCLFdBQVcsR0FBRyx1QkFBdUIsV0FBVyxHQUFHLFlBQVksUUFBUSxRQUFRLFFBQVEsdUJBQXVCLGtCQUFrQix1QkFBdUIsZ0JBQWdCLEdBQUcsdUJBQXVCLG1CQUFtQixHQUFHLGdCQUFnQix3QkFBd0IsNkJBQTZCLEdBQUcsdUJBQXVCLGdCQUFnQixHQUFHLHVCQUF1QixnQkFBZ0IsR0FBRyxXQUFXLE9BQU8sTUFBTSxPQUFPLFFBQVEsa0JBQWtCLFVBQVUsT0FBTyxJQUFJLFVBQVUsS0FBSyxNQUFNLHVCQUF1QixtQkFBbUIsZUFBZSxPQUFPLElBQUksMEJBQTBCLHVCQUF1QixlQUFlLCtCQUErQiwwQ0FBMEMsc0NBQXNDLFVBQVUsbURBQW1ELHFEQUFxRCxnREFBZ0QsK0NBQStDLCtDQUErQyxpREFBaUQsa0RBQWtELG9EQUFvRCxNQUFNLGlEQUFpRCx1REFBRyxhQUFhLGdEQUFnRCxJQUFJLElBQUksa0JBQWtCLHVCQUF1QixtQkFBbUIsbUZBQW1GLEVBQUUsVUFBVSxVQUFVLEdBQUcsZUFBZSx5QkFBeUIsUUFBUSxtQkFBbUIsZUFBZSxPQUFPLEtBQUssZUFBZSxNQUFNLEtBQUssS0FBSyxPQUFPLFFBQVEsbUJBQW1CLGdDQUFnQyxNQUFNLHVCQUF1Qix3REFBd0QsVUFBVSxHQUFHLEtBQUssc0JBQXNCLHVCQUF1QixlQUFlLHdDQUF3QyxxREFBcUQsS0FBSyxtQkFBbUIsdUJBQXVCLHVCQUF1Qiw4RUFBOEUsRUFBRSxHQUFHLGtCQUFrQixRQUFRLHFCQUFxQixlQUFlLE9BQU8sdURBQUcsYUFBYSx1QkFBdUIsNkNBQTZDLG1EQUFtRCxxREFBcUQsOEVBQThFLHFEQUFxRCxxREFBcUQsaURBQWlELGtEQUFrRCxNQUFNLDhDQUE4Qyx1REFBRyxhQUFhLDZDQUE2QyxHQUFHLEdBQUcsSUFBSSx1QkFBdUIsZUFBZSxRQUFRLGVBQWUsT0FBTyxNQUFNLHVCQUF1QixnQkFBZ0IsR0FBRyxNQUFNLE1BQU0sS0FBSyxRQUFRLFVBQVUscUJBQXFCLGVBQWUsUUFBUSx1QkFBdUIscUJBQXFCLEdBQUcsS0FBSyxJQUFJLE9BQU8sS0FBSyxLQUFLLGlCQUFpQixVQUFVLG1CQUFtQix1QkFBdUIsa0JBQWtCLEdBQUcsTUFBTSxVQUFVLHVCQUF1QixRQUFRLHVCQUF1QixxQkFBcUIsR0FBRyxrQkFBa0IsSUFBSSxRQUFRLE9BQU8sVUFBVSxzQ0FBc0Msa0JBQWtCLFFBQVEsTUFBTSxLQUFLLFFBQVEsS0FBSyxnQkFBZ0IsaUJBQWlCLGVBQWUsTUFBTSxLQUFLLE1BQU0sS0FBSyxZQUFZLGlCQUFpQixrQkFBa0IsY0FBYyxZQUFZLFlBQVksWUFBWSxHQUFHLHFCQUFxQixFQUFFLE9BQU8sTUFBTSxVQUFVLGtCQUFrQixNQUFNLE1BQU0sdUJBQXVCLFVBQVUsR0FBRyxLQUFLLHVCQUF1QixvREFBb0QsTUFBTSxrQkFBa0IsdUJBQXVCLFVBQVUsR0FBRyxLQUFLLFVBQVUsa0JBQWtCLFlBQVksTUFBTSxrQkFBa0IsTUFBTSxrQkFBa0Isa0JBQWtCLEtBQUssdURBQUcsYUFBYSx1QkFBdUIsZUFBZSxzREFBc0QsR0FBRyxHQUFHLCtCQUErQixLQUFLLEtBQUssY0FBYyxjQUFjLGNBQWMsZ0JBQWdCLHlCQUF5Qiw4QkFBOEIsS0FBSyx1REFBRyxhQUFhLEtBQUssdURBQUcsS0FBSyxHQUFHLEtBQUssa0JBQWtCLHVCQUF1Qiw0Q0FBNEMseUNBQXlDLDhDQUE4QyxJQUFJLGtCQUFrQix1QkFBdUIsU0FBUyxHQUFHLCtCQUErQixPQUFPLGtCQUFrQixNQUFNLE1BQU0sS0FBSyxLQUFLLE9BQU8sbUJBQW1CLGdDQUFnQyxjQUFjLE9BQU8sY0FBYyxlQUFlLEdBQUcscUJBQXFCLEVBQUUsT0FBTyxLQUFLLE1BQU0sS0FBSyxRQUFRLE1BQU0sYUFBYSxRQUFRLGNBQWMsV0FBVyxHQUFHLHFCQUFxQixFQUFFLHVCQUF1QixTQUFTLEdBQUcsTUFBTSxLQUFLLEtBQUssTUFBTSxJQUFJLGtCQUFrQix1QkFBdUIsU0FBUyxHQUFHLE1BQU0sSUFBSSxRQUFRLEtBQUsscUJBQXFCLE1BQU0sV0FBVyx3REFBd0QsT0FBTyxLQUFLLEVBQUUsb0RBQWEsTUFBTSxTQUFTLGVBQWUsVUFBVSxxQkFBcUIsTUFBTSxvQkFBb0Isd0RBQXdELE9BQU8sS0FBSyxFQUFFLG9EQUFhLENBQUMsb0RBQWEsWUFBWSxTQUFTLGFBQWEsVUFBVSx1QkFBdUIsd0JBQXdCLFVBQVUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvZGlzdC9lc20tZXM1L2FuaW1hdGlvbi0wOTZjNjM5MS5qcz9lZjdhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydHtfX3NwcmVhZEFycmF5fWZyb21cInRzbGliXCI7aW1wb3J0e3IgYXMgcmFmfWZyb21cIi4vaGVscGVycy1kZDdlNGI3Yi5qc1wiO3ZhciBhbmltYXRpb25QcmVmaXg7dmFyIHByb2Nlc3NLZXlmcmFtZXM9ZnVuY3Rpb24oZSl7ZS5mb3JFYWNoKChmdW5jdGlvbihlKXtmb3IodmFyIG4gaW4gZSl7aWYoZS5oYXNPd25Qcm9wZXJ0eShuKSl7dmFyIHI9ZVtuXTtpZihuPT09XCJlYXNpbmdcIil7dmFyIHQ9XCJhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uXCI7ZVt0XT1yO2RlbGV0ZSBlW25dfWVsc2V7dmFyIHQ9Y29udmVydENhbWVsQ2FzZVRvSHlwZW4obik7aWYodCE9PW4pe2VbdF09cjtkZWxldGUgZVtuXX19fX19KSk7cmV0dXJuIGV9O3ZhciBjb252ZXJ0Q2FtZWxDYXNlVG9IeXBlbj1mdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC8oW2EtejAtOV0pKFtBLVpdKS9nLFwiJDEtJDJcIikudG9Mb3dlckNhc2UoKX07dmFyIGdldEFuaW1hdGlvblByZWZpeD1mdW5jdGlvbihlKXtpZihhbmltYXRpb25QcmVmaXg9PT11bmRlZmluZWQpe3ZhciBuPWUuc3R5bGUuYW5pbWF0aW9uTmFtZSE9PXVuZGVmaW5lZDt2YXIgcj1lLnN0eWxlLndlYmtpdEFuaW1hdGlvbk5hbWUhPT11bmRlZmluZWQ7YW5pbWF0aW9uUHJlZml4PSFuJiZyP1wiLXdlYmtpdC1cIjpcIlwifXJldHVybiBhbmltYXRpb25QcmVmaXh9O3ZhciBzZXRTdHlsZVByb3BlcnR5PWZ1bmN0aW9uKGUsbixyKXt2YXIgdD1uLnN0YXJ0c1dpdGgoXCJhbmltYXRpb25cIik/Z2V0QW5pbWF0aW9uUHJlZml4KGUpOlwiXCI7ZS5zdHlsZS5zZXRQcm9wZXJ0eSh0K24scil9O3ZhciByZW1vdmVTdHlsZVByb3BlcnR5PWZ1bmN0aW9uKGUsbil7dmFyIHI9bi5zdGFydHNXaXRoKFwiYW5pbWF0aW9uXCIpP2dldEFuaW1hdGlvblByZWZpeChlKTpcIlwiO2Uuc3R5bGUucmVtb3ZlUHJvcGVydHkocituKX07dmFyIGFuaW1hdGlvbkVuZD1mdW5jdGlvbihlLG4pe3ZhciByO3ZhciB0PXtwYXNzaXZlOnRydWV9O3ZhciBhPWZ1bmN0aW9uKCl7aWYocil7cigpfX07dmFyIGk9ZnVuY3Rpb24ocil7aWYoZT09PXIudGFyZ2V0KXthKCk7bihyKX19O2lmKGUpe2UuYWRkRXZlbnRMaXN0ZW5lcihcIndlYmtpdEFuaW1hdGlvbkVuZFwiLGksdCk7ZS5hZGRFdmVudExpc3RlbmVyKFwiYW5pbWF0aW9uZW5kXCIsaSx0KTtyPWZ1bmN0aW9uKCl7ZS5yZW1vdmVFdmVudExpc3RlbmVyKFwid2Via2l0QW5pbWF0aW9uRW5kXCIsaSx0KTtlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhbmltYXRpb25lbmRcIixpLHQpfX1yZXR1cm4gYX07dmFyIGdlbmVyYXRlS2V5ZnJhbWVSdWxlcz1mdW5jdGlvbihlKXtpZihlPT09dm9pZCAwKXtlPVtdfXJldHVybiBlLm1hcCgoZnVuY3Rpb24oZSl7dmFyIG49ZS5vZmZzZXQ7dmFyIHI9W107Zm9yKHZhciB0IGluIGUpe2lmKGUuaGFzT3duUHJvcGVydHkodCkmJnQhPT1cIm9mZnNldFwiKXtyLnB1c2godCtcIjogXCIrZVt0XStcIjtcIil9fXJldHVybiBuKjEwMCtcIiUgeyBcIityLmpvaW4oXCIgXCIpK1wiIH1cIn0pKS5qb2luKFwiIFwiKX07dmFyIGtleWZyYW1lSWRzPVtdO3ZhciBnZW5lcmF0ZUtleWZyYW1lTmFtZT1mdW5jdGlvbihlKXt2YXIgbj1rZXlmcmFtZUlkcy5pbmRleE9mKGUpO2lmKG48MCl7bj1rZXlmcmFtZUlkcy5wdXNoKGUpLTF9cmV0dXJuXCJpb24tYW5pbWF0aW9uLVwiK259O3ZhciBnZXRTdHlsZUNvbnRhaW5lcj1mdW5jdGlvbihlKXt2YXIgbj1lLmdldFJvb3ROb2RlKCk7cmV0dXJuIG4uaGVhZHx8bn07dmFyIGNyZWF0ZUtleWZyYW1lU3R5bGVzaGVldD1mdW5jdGlvbihlLG4scil7dmFyIHQ9Z2V0U3R5bGVDb250YWluZXIocik7dmFyIGE9Z2V0QW5pbWF0aW9uUHJlZml4KHIpO3ZhciBpPXQucXVlcnlTZWxlY3RvcihcIiNcIitlKTtpZihpKXtyZXR1cm4gaX12YXIgbz0oci5vd25lckRvY3VtZW50fHxkb2N1bWVudCkuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO28uaWQ9ZTtvLnRleHRDb250ZW50PVwiQFwiK2ErXCJrZXlmcmFtZXMgXCIrZStcIiB7IFwiK24rXCIgfSBAXCIrYStcImtleWZyYW1lcyBcIitlK1wiLWFsdCB7IFwiK24rXCIgfVwiO3QuYXBwZW5kQ2hpbGQobyk7cmV0dXJuIG99O3ZhciBhZGRDbGFzc1RvQXJyYXk9ZnVuY3Rpb24oZSxuKXtpZihlPT09dm9pZCAwKXtlPVtdfWlmKG4hPT11bmRlZmluZWQpe3ZhciByPUFycmF5LmlzQXJyYXkobik/bjpbbl07cmV0dXJuIF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShbXSxlKSxyKX1yZXR1cm4gZX07dmFyIGNyZWF0ZUFuaW1hdGlvbj1mdW5jdGlvbihlKXt2YXIgbjt2YXIgcjt2YXIgdDt2YXIgYTt2YXIgaTt2YXIgbzt2YXIgZj1bXTt2YXIgdT1bXTt2YXIgcz1bXTt2YXIgdj1mYWxzZTt2YXIgbDt2YXIgYz17fTt2YXIgZD1bXTt2YXIgeT1bXTt2YXIgbT17fTt2YXIgcD0wO3ZhciBoPWZhbHNlO3ZhciBnPWZhbHNlO3ZhciBFO3ZhciBQO3ZhciBTO3ZhciBBO3ZhciBDPXRydWU7dmFyIGI9ZmFsc2U7dmFyIFQ9dHJ1ZTt2YXIgazt2YXIgdzt2YXIgeD1lO3ZhciBfPVtdO3ZhciBLPVtdO3ZhciBJPVtdO3ZhciBEPVtdO3ZhciBMPVtdO3ZhciBOPVtdO3ZhciBSPVtdO3ZhciBGPVtdO3ZhciBPPVtdO3ZhciBXPVtdO3ZhciBqPXR5cGVvZiBBbmltYXRpb25FZmZlY3Q9PT1cImZ1bmN0aW9uXCJ8fHR5cGVvZiB3aW5kb3cuQW5pbWF0aW9uRWZmZWN0PT09XCJmdW5jdGlvblwiO3ZhciBIPXR5cGVvZiBFbGVtZW50PT09XCJmdW5jdGlvblwiJiZ0eXBlb2YgRWxlbWVudC5wcm90b3R5cGUuYW5pbWF0ZT09PVwiZnVuY3Rpb25cIiYmajt2YXIgTT0xMDA7dmFyICQ9ZnVuY3Rpb24oKXtyZXR1cm4gV307dmFyIHE9ZnVuY3Rpb24oZSl7RC5mb3JFYWNoKChmdW5jdGlvbihuKXtuLmRlc3Ryb3koZSl9KSk7eihlKTtJLmxlbmd0aD0wO0QubGVuZ3RoPTA7Zi5sZW5ndGg9MDtHKCk7dj1mYWxzZTtUPXRydWU7cmV0dXJuIHd9O3ZhciB6PWZ1bmN0aW9uKGUpe0ooKTtpZihlKXtRKCl9fTt2YXIgWj1mdW5jdGlvbigpe2g9ZmFsc2U7Zz1mYWxzZTtUPXRydWU7UD11bmRlZmluZWQ7Uz11bmRlZmluZWQ7QT11bmRlZmluZWQ7cD0wO2I9ZmFsc2U7Qz10cnVlfTt2YXIgQj1mdW5jdGlvbihlLG4pe3ZhciByPW4mJm4ub25lVGltZUNhbGxiYWNrP0s6XztyLnB1c2goe2M6ZSxvOm59KTtyZXR1cm4gd307dmFyIEc9ZnVuY3Rpb24oKXtfLmxlbmd0aD0wO0subGVuZ3RoPTA7cmV0dXJuIHd9O3ZhciBKPWZ1bmN0aW9uKCl7aWYoSCl7Vy5mb3JFYWNoKChmdW5jdGlvbihlKXtlLmNhbmNlbCgpfSkpO1cubGVuZ3RoPTB9ZWxzZXt2YXIgZT1JLnNsaWNlKCk7cmFmKChmdW5jdGlvbigpe2UuZm9yRWFjaCgoZnVuY3Rpb24oZSl7cmVtb3ZlU3R5bGVQcm9wZXJ0eShlLFwiYW5pbWF0aW9uLW5hbWVcIik7cmVtb3ZlU3R5bGVQcm9wZXJ0eShlLFwiYW5pbWF0aW9uLWR1cmF0aW9uXCIpO3JlbW92ZVN0eWxlUHJvcGVydHkoZSxcImFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb25cIik7cmVtb3ZlU3R5bGVQcm9wZXJ0eShlLFwiYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudFwiKTtyZW1vdmVTdHlsZVByb3BlcnR5KGUsXCJhbmltYXRpb24tZGVsYXlcIik7cmVtb3ZlU3R5bGVQcm9wZXJ0eShlLFwiYW5pbWF0aW9uLXBsYXktc3RhdGVcIik7cmVtb3ZlU3R5bGVQcm9wZXJ0eShlLFwiYW5pbWF0aW9uLWZpbGwtbW9kZVwiKTtyZW1vdmVTdHlsZVByb3BlcnR5KGUsXCJhbmltYXRpb24tZGlyZWN0aW9uXCIpfSkpfSkpfX07dmFyIFE9ZnVuY3Rpb24oKXtMLmZvckVhY2goKGZ1bmN0aW9uKGUpe2lmKGUmJmUucGFyZW50Tm9kZSl7ZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpfX0pKTtMLmxlbmd0aD0wfTt2YXIgVT1mdW5jdGlvbihlKXtOLnB1c2goZSk7cmV0dXJuIHd9O3ZhciBWPWZ1bmN0aW9uKGUpe1IucHVzaChlKTtyZXR1cm4gd307dmFyIFg9ZnVuY3Rpb24oZSl7Ri5wdXNoKGUpO3JldHVybiB3fTt2YXIgWT1mdW5jdGlvbihlKXtPLnB1c2goZSk7cmV0dXJuIHd9O3ZhciBlZT1mdW5jdGlvbihlKXt1PWFkZENsYXNzVG9BcnJheSh1LGUpO3JldHVybiB3fTt2YXIgbmU9ZnVuY3Rpb24oZSl7cz1hZGRDbGFzc1RvQXJyYXkocyxlKTtyZXR1cm4gd307dmFyIHJlPWZ1bmN0aW9uKGUpe2lmKGU9PT12b2lkIDApe2U9e319Yz1lO3JldHVybiB3fTt2YXIgdGU9ZnVuY3Rpb24oZSl7aWYoZT09PXZvaWQgMCl7ZT1bXX1mb3IodmFyIG49MCxyPWU7bjxyLmxlbmd0aDtuKyspe3ZhciB0PXJbbl07Y1t0XT1cIlwifXJldHVybiB3fTt2YXIgYWU9ZnVuY3Rpb24oZSl7ZD1hZGRDbGFzc1RvQXJyYXkoZCxlKTtyZXR1cm4gd307dmFyIGllPWZ1bmN0aW9uKGUpe3k9YWRkQ2xhc3NUb0FycmF5KHksZSk7cmV0dXJuIHd9O3ZhciBvZT1mdW5jdGlvbihlKXtpZihlPT09dm9pZCAwKXtlPXt9fW09ZTtyZXR1cm4gd307dmFyIGZlPWZ1bmN0aW9uKGUpe2lmKGU9PT12b2lkIDApe2U9W119Zm9yKHZhciBuPTAscj1lO248ci5sZW5ndGg7bisrKXt2YXIgdD1yW25dO21bdF09XCJcIn1yZXR1cm4gd307dmFyIHVlPWZ1bmN0aW9uKCl7aWYoaSE9PXVuZGVmaW5lZCl7cmV0dXJuIGl9aWYobCl7cmV0dXJuIGwuZ2V0RmlsbCgpfXJldHVyblwiYm90aFwifTt2YXIgc2U9ZnVuY3Rpb24oKXtpZihQIT09dW5kZWZpbmVkKXtyZXR1cm4gUH1pZihvIT09dW5kZWZpbmVkKXtyZXR1cm4gb31pZihsKXtyZXR1cm4gbC5nZXREaXJlY3Rpb24oKX1yZXR1cm5cIm5vcm1hbFwifTt2YXIgdmU9ZnVuY3Rpb24oKXtpZihoKXtyZXR1cm5cImxpbmVhclwifWlmKHQhPT11bmRlZmluZWQpe3JldHVybiB0fWlmKGwpe3JldHVybiBsLmdldEVhc2luZygpfXJldHVyblwibGluZWFyXCJ9O3ZhciBsZT1mdW5jdGlvbigpe2lmKGcpe3JldHVybiAwfWlmKFMhPT11bmRlZmluZWQpe3JldHVybiBTfWlmKHIhPT11bmRlZmluZWQpe3JldHVybiByfWlmKGwpe3JldHVybiBsLmdldER1cmF0aW9uKCl9cmV0dXJuIDB9O3ZhciBjZT1mdW5jdGlvbigpe2lmKGEhPT11bmRlZmluZWQpe3JldHVybiBhfWlmKGwpe3JldHVybiBsLmdldEl0ZXJhdGlvbnMoKX1yZXR1cm4gMX07dmFyIGRlPWZ1bmN0aW9uKCl7aWYoQSE9PXVuZGVmaW5lZCl7cmV0dXJuIEF9aWYobiE9PXVuZGVmaW5lZCl7cmV0dXJuIG59aWYobCl7cmV0dXJuIGwuZ2V0RGVsYXkoKX1yZXR1cm4gMH07dmFyIHllPWZ1bmN0aW9uKCl7cmV0dXJuIGZ9O3ZhciBtZT1mdW5jdGlvbihlKXtvPWU7TmUodHJ1ZSk7cmV0dXJuIHd9O3ZhciBwZT1mdW5jdGlvbihlKXtpPWU7TmUodHJ1ZSk7cmV0dXJuIHd9O3ZhciBoZT1mdW5jdGlvbihlKXtuPWU7TmUodHJ1ZSk7cmV0dXJuIHd9O3ZhciBnZT1mdW5jdGlvbihlKXt0PWU7TmUodHJ1ZSk7cmV0dXJuIHd9O3ZhciBFZT1mdW5jdGlvbihlKXtpZighSCYmZT09PTApe2U9MX1yPWU7TmUodHJ1ZSk7cmV0dXJuIHd9O3ZhciBQZT1mdW5jdGlvbihlKXthPWU7TmUodHJ1ZSk7cmV0dXJuIHd9O3ZhciBTZT1mdW5jdGlvbihlKXtsPWU7cmV0dXJuIHd9O3ZhciBBZT1mdW5jdGlvbihlKXtpZihlIT1udWxsKXtpZihlLm5vZGVUeXBlPT09MSl7SS5wdXNoKGUpfWVsc2UgaWYoZS5sZW5ndGg+PTApe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXtJLnB1c2goZVtuXSl9fWVsc2V7Y29uc29sZS5lcnJvcihcIkludmFsaWQgYWRkRWxlbWVudCB2YWx1ZVwiKX19cmV0dXJuIHd9O3ZhciBDZT1mdW5jdGlvbihlKXtpZihlIT1udWxsKXtpZihBcnJheS5pc0FycmF5KGUpKXtmb3IodmFyIG49MCxyPWU7bjxyLmxlbmd0aDtuKyspe3ZhciB0PXJbbl07dC5wYXJlbnQodyk7RC5wdXNoKHQpfX1lbHNle2UucGFyZW50KHcpO0QucHVzaChlKX19cmV0dXJuIHd9O3ZhciBiZT1mdW5jdGlvbihlKXtmPWU7cmV0dXJuIHd9O3ZhciBUZT1mdW5jdGlvbigpe04uZm9yRWFjaCgoZnVuY3Rpb24oZSl7cmV0dXJuIGUoKX0pKTtSLmZvckVhY2goKGZ1bmN0aW9uKGUpe3JldHVybiBlKCl9KSk7dmFyIGU9dTt2YXIgbj1zO3ZhciByPWM7SS5mb3JFYWNoKChmdW5jdGlvbih0KXt2YXIgYT10LmNsYXNzTGlzdDtlLmZvckVhY2goKGZ1bmN0aW9uKGUpe3JldHVybiBhLmFkZChlKX0pKTtuLmZvckVhY2goKGZ1bmN0aW9uKGUpe3JldHVybiBhLnJlbW92ZShlKX0pKTtmb3IodmFyIGkgaW4gcil7aWYoci5oYXNPd25Qcm9wZXJ0eShpKSl7c2V0U3R5bGVQcm9wZXJ0eSh0LGkscltpXSl9fX0pKX07dmFyIGtlPWZ1bmN0aW9uKCl7TWUoKTtGLmZvckVhY2goKGZ1bmN0aW9uKGUpe3JldHVybiBlKCl9KSk7Ty5mb3JFYWNoKChmdW5jdGlvbihlKXtyZXR1cm4gZSgpfSkpO3ZhciBlPUM/MTowO3ZhciBuPWQ7dmFyIHI9eTt2YXIgdD1tO0kuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIGE9ZS5jbGFzc0xpc3Q7bi5mb3JFYWNoKChmdW5jdGlvbihlKXtyZXR1cm4gYS5hZGQoZSl9KSk7ci5mb3JFYWNoKChmdW5jdGlvbihlKXtyZXR1cm4gYS5yZW1vdmUoZSl9KSk7Zm9yKHZhciBpIGluIHQpe2lmKHQuaGFzT3duUHJvcGVydHkoaSkpe3NldFN0eWxlUHJvcGVydHkoZSxpLHRbaV0pfX19KSk7Xy5mb3JFYWNoKChmdW5jdGlvbihuKXtyZXR1cm4gbi5jKGUsdyl9KSk7Sy5mb3JFYWNoKChmdW5jdGlvbihuKXtyZXR1cm4gbi5jKGUsdyl9KSk7Sy5sZW5ndGg9MDtUPXRydWU7aWYoQyl7Yj10cnVlfUM9dHJ1ZX07dmFyIHdlPWZ1bmN0aW9uKCl7aWYocD09PTApe3JldHVybn1wLS07aWYocD09PTApe2tlKCk7aWYobCl7bC5hbmltYXRpb25GaW5pc2goKX19fTt2YXIgeGU9ZnVuY3Rpb24obil7aWYobj09PXZvaWQgMCl7bj10cnVlfVEoKTt2YXIgcj1wcm9jZXNzS2V5ZnJhbWVzKGYpO0kuZm9yRWFjaCgoZnVuY3Rpb24odCl7aWYoci5sZW5ndGg+MCl7dmFyIGE9Z2VuZXJhdGVLZXlmcmFtZVJ1bGVzKHIpO2s9ZSE9PXVuZGVmaW5lZD9lOmdlbmVyYXRlS2V5ZnJhbWVOYW1lKGEpO3ZhciBpPWNyZWF0ZUtleWZyYW1lU3R5bGVzaGVldChrLGEsdCk7TC5wdXNoKGkpO3NldFN0eWxlUHJvcGVydHkodCxcImFuaW1hdGlvbi1kdXJhdGlvblwiLGxlKCkrXCJtc1wiKTtzZXRTdHlsZVByb3BlcnR5KHQsXCJhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uXCIsdmUoKSk7c2V0U3R5bGVQcm9wZXJ0eSh0LFwiYW5pbWF0aW9uLWRlbGF5XCIsZGUoKStcIm1zXCIpO3NldFN0eWxlUHJvcGVydHkodCxcImFuaW1hdGlvbi1maWxsLW1vZGVcIix1ZSgpKTtzZXRTdHlsZVByb3BlcnR5KHQsXCJhbmltYXRpb24tZGlyZWN0aW9uXCIsc2UoKSk7dmFyIG89Y2UoKT09PUluZmluaXR5P1wiaW5maW5pdGVcIjpjZSgpLnRvU3RyaW5nKCk7c2V0U3R5bGVQcm9wZXJ0eSh0LFwiYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudFwiLG8pO3NldFN0eWxlUHJvcGVydHkodCxcImFuaW1hdGlvbi1wbGF5LXN0YXRlXCIsXCJwYXVzZWRcIik7aWYobil7c2V0U3R5bGVQcm9wZXJ0eSh0LFwiYW5pbWF0aW9uLW5hbWVcIixpLmlkK1wiLWFsdFwiKX1yYWYoKGZ1bmN0aW9uKCl7c2V0U3R5bGVQcm9wZXJ0eSh0LFwiYW5pbWF0aW9uLW5hbWVcIixpLmlkfHxudWxsKX0pKX19KSl9O3ZhciBfZT1mdW5jdGlvbigpe0kuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIG49ZS5hbmltYXRlKGYse2lkOngsZGVsYXk6ZGUoKSxkdXJhdGlvbjpsZSgpLGVhc2luZzp2ZSgpLGl0ZXJhdGlvbnM6Y2UoKSxmaWxsOnVlKCksZGlyZWN0aW9uOnNlKCl9KTtuLnBhdXNlKCk7Vy5wdXNoKG4pfSkpO2lmKFcubGVuZ3RoPjApe1dbMF0ub25maW5pc2g9ZnVuY3Rpb24oKXt3ZSgpfX19O3ZhciBLZT1mdW5jdGlvbihlKXtpZihlPT09dm9pZCAwKXtlPXRydWV9VGUoKTtpZihmLmxlbmd0aD4wKXtpZihIKXtfZSgpfWVsc2V7eGUoZSl9fXY9dHJ1ZX07dmFyIEllPWZ1bmN0aW9uKGUpe2U9TWF0aC5taW4oTWF0aC5tYXgoZSwwKSwuOTk5OSk7aWYoSCl7Vy5mb3JFYWNoKChmdW5jdGlvbihuKXtuLmN1cnJlbnRUaW1lPW4uZWZmZWN0LmdldENvbXB1dGVkVGltaW5nKCkuZGVsYXkrbGUoKSplO24ucGF1c2UoKX0pKX1lbHNle3ZhciBuPVwiLVwiK2xlKCkqZStcIm1zXCI7SS5mb3JFYWNoKChmdW5jdGlvbihlKXtpZihmLmxlbmd0aD4wKXtzZXRTdHlsZVByb3BlcnR5KGUsXCJhbmltYXRpb24tZGVsYXlcIixuKTtzZXRTdHlsZVByb3BlcnR5KGUsXCJhbmltYXRpb24tcGxheS1zdGF0ZVwiLFwicGF1c2VkXCIpfX0pKX19O3ZhciBEZT1mdW5jdGlvbihlKXtXLmZvckVhY2goKGZ1bmN0aW9uKGUpe2UuZWZmZWN0LnVwZGF0ZVRpbWluZyh7ZGVsYXk6ZGUoKSxkdXJhdGlvbjpsZSgpLGVhc2luZzp2ZSgpLGl0ZXJhdGlvbnM6Y2UoKSxmaWxsOnVlKCksZGlyZWN0aW9uOnNlKCl9KX0pKTtpZihlIT09dW5kZWZpbmVkKXtJZShlKX19O3ZhciBMZT1mdW5jdGlvbihlLG4pe2lmKGU9PT12b2lkIDApe2U9dHJ1ZX1yYWYoKGZ1bmN0aW9uKCl7SS5mb3JFYWNoKChmdW5jdGlvbihyKXtzZXRTdHlsZVByb3BlcnR5KHIsXCJhbmltYXRpb24tbmFtZVwiLGt8fG51bGwpO3NldFN0eWxlUHJvcGVydHkocixcImFuaW1hdGlvbi1kdXJhdGlvblwiLGxlKCkrXCJtc1wiKTtzZXRTdHlsZVByb3BlcnR5KHIsXCJhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uXCIsdmUoKSk7c2V0U3R5bGVQcm9wZXJ0eShyLFwiYW5pbWF0aW9uLWRlbGF5XCIsbiE9PXVuZGVmaW5lZD9cIi1cIituKmxlKCkrXCJtc1wiOmRlKCkrXCJtc1wiKTtzZXRTdHlsZVByb3BlcnR5KHIsXCJhbmltYXRpb24tZmlsbC1tb2RlXCIsdWUoKXx8bnVsbCk7c2V0U3R5bGVQcm9wZXJ0eShyLFwiYW5pbWF0aW9uLWRpcmVjdGlvblwiLHNlKCl8fG51bGwpO3ZhciB0PWNlKCk9PT1JbmZpbml0eT9cImluZmluaXRlXCI6Y2UoKS50b1N0cmluZygpO3NldFN0eWxlUHJvcGVydHkocixcImFuaW1hdGlvbi1pdGVyYXRpb24tY291bnRcIix0KTtpZihlKXtzZXRTdHlsZVByb3BlcnR5KHIsXCJhbmltYXRpb24tbmFtZVwiLGsrXCItYWx0XCIpfXJhZigoZnVuY3Rpb24oKXtzZXRTdHlsZVByb3BlcnR5KHIsXCJhbmltYXRpb24tbmFtZVwiLGt8fG51bGwpfSkpfSkpfSkpfTt2YXIgTmU9ZnVuY3Rpb24oZSxuLHIpe2lmKGU9PT12b2lkIDApe2U9ZmFsc2V9aWYobj09PXZvaWQgMCl7bj10cnVlfWlmKGUpe0QuZm9yRWFjaCgoZnVuY3Rpb24odCl7dC51cGRhdGUoZSxuLHIpfSkpfWlmKEgpe0RlKHIpfWVsc2V7TGUobixyKX1yZXR1cm4gd307dmFyIFJlPWZ1bmN0aW9uKGUsbil7aWYoZT09PXZvaWQgMCl7ZT1mYWxzZX1ELmZvckVhY2goKGZ1bmN0aW9uKHIpe3IucHJvZ3Jlc3NTdGFydChlLG4pfSkpO1dlKCk7aD1lO2lmKCF2KXtLZSgpfWVsc2V7TmUoZmFsc2UsdHJ1ZSxuKX1yZXR1cm4gd307dmFyIEZlPWZ1bmN0aW9uKGUpe0QuZm9yRWFjaCgoZnVuY3Rpb24obil7bi5wcm9ncmVzc1N0ZXAoZSl9KSk7SWUoZSk7cmV0dXJuIHd9O3ZhciBPZT1mdW5jdGlvbihlLG4scil7aD1mYWxzZTtELmZvckVhY2goKGZ1bmN0aW9uKHQpe3QucHJvZ3Jlc3NFbmQoZSxuLHIpfSkpO2lmKHIhPT11bmRlZmluZWQpe1M9cn1iPWZhbHNlO0M9dHJ1ZTtpZihlPT09MCl7UD1zZSgpPT09XCJyZXZlcnNlXCI/XCJub3JtYWxcIjpcInJldmVyc2VcIjtpZihQPT09XCJyZXZlcnNlXCIpe0M9ZmFsc2V9aWYoSCl7TmUoKTtJZSgxLW4pfWVsc2V7QT0oMS1uKSpsZSgpKi0xO05lKGZhbHNlLGZhbHNlKX19ZWxzZSBpZihlPT09MSl7aWYoSCl7TmUoKTtJZShuKX1lbHNle0E9bipsZSgpKi0xO05lKGZhbHNlLGZhbHNlKX19aWYoZSE9PXVuZGVmaW5lZCl7QigoZnVuY3Rpb24oKXtTPXVuZGVmaW5lZDtQPXVuZGVmaW5lZDtBPXVuZGVmaW5lZH0pLHtvbmVUaW1lQ2FsbGJhY2s6dHJ1ZX0pO2lmKCFsKXtCZSgpfX1yZXR1cm4gd307dmFyIFdlPWZ1bmN0aW9uKCl7aWYodil7aWYoSCl7Vy5mb3JFYWNoKChmdW5jdGlvbihlKXtlLnBhdXNlKCl9KSl9ZWxzZXtJLmZvckVhY2goKGZ1bmN0aW9uKGUpe3NldFN0eWxlUHJvcGVydHkoZSxcImFuaW1hdGlvbi1wbGF5LXN0YXRlXCIsXCJwYXVzZWRcIil9KSl9fX07dmFyIGplPWZ1bmN0aW9uKCl7RC5mb3JFYWNoKChmdW5jdGlvbihlKXtlLnBhdXNlKCl9KSk7V2UoKTtyZXR1cm4gd307dmFyIEhlPWZ1bmN0aW9uKCl7RT11bmRlZmluZWQ7d2UoKX07dmFyIE1lPWZ1bmN0aW9uKCl7aWYoRSl7Y2xlYXJUaW1lb3V0KEUpfX07dmFyICRlPWZ1bmN0aW9uKCl7TWUoKTtyYWYoKGZ1bmN0aW9uKCl7SS5mb3JFYWNoKChmdW5jdGlvbihlKXtpZihmLmxlbmd0aD4wKXtzZXRTdHlsZVByb3BlcnR5KGUsXCJhbmltYXRpb24tcGxheS1zdGF0ZVwiLFwicnVubmluZ1wiKX19KSl9KSk7aWYoZi5sZW5ndGg9PT0wfHxJLmxlbmd0aD09PTApe3dlKCl9ZWxzZXt2YXIgZT1kZSgpfHwwO3ZhciBuPWxlKCl8fDA7dmFyIHI9Y2UoKXx8MTtpZihpc0Zpbml0ZShyKSl7RT1zZXRUaW1lb3V0KEhlLGUrbipyK00pfWFuaW1hdGlvbkVuZChJWzBdLChmdW5jdGlvbigpe01lKCk7cmFmKChmdW5jdGlvbigpe3FlKCk7cmFmKHdlKX0pKX0pKX19O3ZhciBxZT1mdW5jdGlvbigpe0kuZm9yRWFjaCgoZnVuY3Rpb24oZSl7cmVtb3ZlU3R5bGVQcm9wZXJ0eShlLFwiYW5pbWF0aW9uLWR1cmF0aW9uXCIpO3JlbW92ZVN0eWxlUHJvcGVydHkoZSxcImFuaW1hdGlvbi1kZWxheVwiKTtyZW1vdmVTdHlsZVByb3BlcnR5KGUsXCJhbmltYXRpb24tcGxheS1zdGF0ZVwiKX0pKX07dmFyIHplPWZ1bmN0aW9uKCl7Vy5mb3JFYWNoKChmdW5jdGlvbihlKXtlLnBsYXkoKX0pKTtpZihmLmxlbmd0aD09PTB8fEkubGVuZ3RoPT09MCl7d2UoKX19O3ZhciBaZT1mdW5jdGlvbigpe2lmKEgpe0llKDApO0RlKCl9ZWxzZXtMZSgpfX07dmFyIEJlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24obil7aWYoZSYmZS5zeW5jKXtnPXRydWU7QigoZnVuY3Rpb24oKXtyZXR1cm4gZz1mYWxzZX0pLHtvbmVUaW1lQ2FsbGJhY2s6dHJ1ZX0pfWlmKCF2KXtLZSgpfWlmKGIpe1plKCk7Yj1mYWxzZX1pZihUKXtwPUQubGVuZ3RoKzE7VD1mYWxzZX1CKChmdW5jdGlvbigpe3JldHVybiBuKCl9KSx7b25lVGltZUNhbGxiYWNrOnRydWV9KTtELmZvckVhY2goKGZ1bmN0aW9uKGUpe2UucGxheSgpfSkpO2lmKEgpe3plKCl9ZWxzZXskZSgpfX0pKX07dmFyIEdlPWZ1bmN0aW9uKCl7RC5mb3JFYWNoKChmdW5jdGlvbihlKXtlLnN0b3AoKX0pKTtpZih2KXtKKCk7dj1mYWxzZX1aKCl9O3ZhciBKZT1mdW5jdGlvbihlLG4pe3ZhciByO3ZhciB0PWZbMF07aWYodCE9PXVuZGVmaW5lZCYmKHQub2Zmc2V0PT09dW5kZWZpbmVkfHx0Lm9mZnNldD09PTApKXt0W2VdPW59ZWxzZXtmPV9fc3ByZWFkQXJyYXkoWyhyPXtvZmZzZXQ6MH0scltlXT1uLHIpXSxmKX1yZXR1cm4gd307dmFyIFFlPWZ1bmN0aW9uKGUsbil7dmFyIHI7dmFyIHQ9ZltmLmxlbmd0aC0xXTtpZih0IT09dW5kZWZpbmVkJiYodC5vZmZzZXQ9PT11bmRlZmluZWR8fHQub2Zmc2V0PT09MSkpe3RbZV09bn1lbHNle2Y9X19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KFtdLGYpLFsocj17b2Zmc2V0OjF9LHJbZV09bixyKV0pfXJldHVybiB3fTt2YXIgVWU9ZnVuY3Rpb24oZSxuLHIpe3JldHVybiBKZShlLG4pLnRvKGUscil9O3JldHVybiB3PXtwYXJlbnRBbmltYXRpb246bCxlbGVtZW50czpJLGNoaWxkQW5pbWF0aW9uczpELGlkOngsYW5pbWF0aW9uRmluaXNoOndlLGZyb206SmUsdG86UWUsZnJvbVRvOlVlLHBhcmVudDpTZSxwbGF5OkJlLHBhdXNlOmplLHN0b3A6R2UsZGVzdHJveTpxLGtleWZyYW1lczpiZSxhZGRBbmltYXRpb246Q2UsYWRkRWxlbWVudDpBZSx1cGRhdGU6TmUsZmlsbDpwZSxkaXJlY3Rpb246bWUsaXRlcmF0aW9uczpQZSxkdXJhdGlvbjpFZSxlYXNpbmc6Z2UsZGVsYXk6aGUsZ2V0V2ViQW5pbWF0aW9uczokLGdldEtleWZyYW1lczp5ZSxnZXRGaWxsOnVlLGdldERpcmVjdGlvbjpzZSxnZXREZWxheTpkZSxnZXRJdGVyYXRpb25zOmNlLGdldEVhc2luZzp2ZSxnZXREdXJhdGlvbjpsZSxhZnRlckFkZFJlYWQ6WCxhZnRlckFkZFdyaXRlOlksYWZ0ZXJDbGVhclN0eWxlczpmZSxhZnRlclN0eWxlczpvZSxhZnRlclJlbW92ZUNsYXNzOmllLGFmdGVyQWRkQ2xhc3M6YWUsYmVmb3JlQWRkUmVhZDpVLGJlZm9yZUFkZFdyaXRlOlYsYmVmb3JlQ2xlYXJTdHlsZXM6dGUsYmVmb3JlU3R5bGVzOnJlLGJlZm9yZVJlbW92ZUNsYXNzOm5lLGJlZm9yZUFkZENsYXNzOmVlLG9uRmluaXNoOkIscHJvZ3Jlc3NTdGFydDpSZSxwcm9ncmVzc1N0ZXA6RmUscHJvZ3Jlc3NFbmQ6T2V9fTtleHBvcnR7Y3JlYXRlQW5pbWF0aW9uIGFzIGN9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@ionic/core/dist/esm-es5/animation-096c6391.js\n");

/***/ }),

/***/ "./node_modules/@ionic/core/dist/esm-es5/app-globals-fd807b9a.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm-es5/app-globals-fd807b9a.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"g\": () => (/* binding */ globalScripts)\n/* harmony export */ });\n/* harmony import */ var _ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ionic-global-63a97a32.js */ \"./node_modules/@ionic/core/dist/esm-es5/ionic-global-63a97a32.js\");\nvar globalScripts=_ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_0__.i;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvZGlzdC9lc20tZXM1L2FwcC1nbG9iYWxzLWZkODA3YjlhLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXdELGtCQUFrQix3REFBVSIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AaW9uaWMvY29yZS9kaXN0L2VzbS1lczUvYXBwLWdsb2JhbHMtZmQ4MDdiOWEuanM/NTBhZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnR7aSBhcyBpbml0aWFsaXplfWZyb21cIi4vaW9uaWMtZ2xvYmFsLTYzYTk3YTMyLmpzXCI7dmFyIGdsb2JhbFNjcmlwdHM9aW5pdGlhbGl6ZTtleHBvcnR7Z2xvYmFsU2NyaXB0cyBhcyBnfTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@ionic/core/dist/esm-es5/app-globals-fd807b9a.js\n");

/***/ }),

/***/ "./node_modules/@ionic/core/dist/esm-es5/cubic-bezier-eea9a7a9.js":
/*!************************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm-es5/cubic-bezier-eea9a7a9.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"g\": () => (/* binding */ getTimeGivenProgression)\n/* harmony export */ });\nvar getTimeGivenProgression=function(t,r,a,e,o){return solveCubicBezier(t[1],r[1],a[1],e[1],o).map((function(o){return solveCubicParametricEquation(t[0],r[0],a[0],e[0],o)}))};var solveCubicParametricEquation=function(t,r,a,e,o){var i=3*r*Math.pow(o-1,2);var n=-3*a*o+3*a+e*o;var u=t*Math.pow(o-1,3);return o*(i+o*n)-u};var solveCubicBezier=function(t,r,a,e,o){t-=o;r-=o;a-=o;e-=o;var i=solveCubicEquation(e-3*a+3*r-t,3*a-6*r+3*t,3*r-3*t,t);return i.filter((function(t){return t>=0&&t<=1}))};var solveQuadraticEquation=function(t,r,a){var e=r*r-4*t*a;if(e<0){return[]}else{return[(-r+Math.sqrt(e))/(2*t),(-r-Math.sqrt(e))/(2*t)]}};var solveCubicEquation=function(t,r,a,e){if(t===0){return solveQuadraticEquation(r,a,e)}r/=t;a/=t;e/=t;var o=(3*a-r*r)/3;var i=(2*r*r*r-9*r*a+27*e)/27;if(o===0){return[Math.pow(-i,1/3)]}else if(i===0){return[Math.sqrt(-o),-Math.sqrt(-o)]}var n=Math.pow(i/2,2)+Math.pow(o/3,3);if(n===0){return[Math.pow(i/2,1/2)-r/3]}else if(n>0){return[Math.pow(-(i/2)+Math.sqrt(n),1/3)-Math.pow(i/2+Math.sqrt(n),1/3)-r/3]}var u=Math.sqrt(Math.pow(-(o/3),3));var s=Math.acos(-(i/(2*Math.sqrt(Math.pow(-(o/3),3)))));var v=2*Math.pow(u,1/3);return[v*Math.cos(s/3)-r/3,v*Math.cos((s+2*Math.PI)/3)-r/3,v*Math.cos((s+4*Math.PI)/3)-r/3]};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvZGlzdC9lc20tZXM1L2N1YmljLWJlemllci1lZWE5YTdhOS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsZ0RBQWdELGdFQUFnRSwyREFBMkQsSUFBSSxxREFBcUQsMEJBQTBCLHFCQUFxQix3QkFBd0Isb0JBQW9CLHlDQUF5QyxLQUFLLEtBQUssS0FBSyxLQUFLLDREQUE0RCw2QkFBNkIsa0JBQWtCLElBQUksMkNBQTJDLGdCQUFnQixRQUFRLFNBQVMsS0FBSywwREFBMEQseUNBQXlDLFVBQVUscUNBQXFDLEtBQUssS0FBSyxLQUFLLGtCQUFrQiw4QkFBOEIsVUFBVSx5QkFBeUIsZUFBZSxxQ0FBcUMsc0NBQXNDLFVBQVUsOEJBQThCLGFBQWEsNkVBQTZFLG9DQUFvQyx3REFBd0Qsd0JBQXdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL0Bpb25pYy9jb3JlL2Rpc3QvZXNtLWVzNS9jdWJpYy1iZXppZXItZWVhOWE3YTkuanM/NDFiMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2V0VGltZUdpdmVuUHJvZ3Jlc3Npb249ZnVuY3Rpb24odCxyLGEsZSxvKXtyZXR1cm4gc29sdmVDdWJpY0Jlemllcih0WzFdLHJbMV0sYVsxXSxlWzFdLG8pLm1hcCgoZnVuY3Rpb24obyl7cmV0dXJuIHNvbHZlQ3ViaWNQYXJhbWV0cmljRXF1YXRpb24odFswXSxyWzBdLGFbMF0sZVswXSxvKX0pKX07dmFyIHNvbHZlQ3ViaWNQYXJhbWV0cmljRXF1YXRpb249ZnVuY3Rpb24odCxyLGEsZSxvKXt2YXIgaT0zKnIqTWF0aC5wb3coby0xLDIpO3ZhciBuPS0zKmEqbyszKmErZSpvO3ZhciB1PXQqTWF0aC5wb3coby0xLDMpO3JldHVybiBvKihpK28qbiktdX07dmFyIHNvbHZlQ3ViaWNCZXppZXI9ZnVuY3Rpb24odCxyLGEsZSxvKXt0LT1vO3ItPW87YS09bztlLT1vO3ZhciBpPXNvbHZlQ3ViaWNFcXVhdGlvbihlLTMqYSszKnItdCwzKmEtNipyKzMqdCwzKnItMyp0LHQpO3JldHVybiBpLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIHQ+PTAmJnQ8PTF9KSl9O3ZhciBzb2x2ZVF1YWRyYXRpY0VxdWF0aW9uPWZ1bmN0aW9uKHQscixhKXt2YXIgZT1yKnItNCp0KmE7aWYoZTwwKXtyZXR1cm5bXX1lbHNle3JldHVyblsoLXIrTWF0aC5zcXJ0KGUpKS8oMip0KSwoLXItTWF0aC5zcXJ0KGUpKS8oMip0KV19fTt2YXIgc29sdmVDdWJpY0VxdWF0aW9uPWZ1bmN0aW9uKHQscixhLGUpe2lmKHQ9PT0wKXtyZXR1cm4gc29sdmVRdWFkcmF0aWNFcXVhdGlvbihyLGEsZSl9ci89dDthLz10O2UvPXQ7dmFyIG89KDMqYS1yKnIpLzM7dmFyIGk9KDIqcipyKnItOSpyKmErMjcqZSkvMjc7aWYobz09PTApe3JldHVybltNYXRoLnBvdygtaSwxLzMpXX1lbHNlIGlmKGk9PT0wKXtyZXR1cm5bTWF0aC5zcXJ0KC1vKSwtTWF0aC5zcXJ0KC1vKV19dmFyIG49TWF0aC5wb3coaS8yLDIpK01hdGgucG93KG8vMywzKTtpZihuPT09MCl7cmV0dXJuW01hdGgucG93KGkvMiwxLzIpLXIvM119ZWxzZSBpZihuPjApe3JldHVybltNYXRoLnBvdygtKGkvMikrTWF0aC5zcXJ0KG4pLDEvMyktTWF0aC5wb3coaS8yK01hdGguc3FydChuKSwxLzMpLXIvM119dmFyIHU9TWF0aC5zcXJ0KE1hdGgucG93KC0oby8zKSwzKSk7dmFyIHM9TWF0aC5hY29zKC0oaS8oMipNYXRoLnNxcnQoTWF0aC5wb3coLShvLzMpLDMpKSkpKTt2YXIgdj0yKk1hdGgucG93KHUsMS8zKTtyZXR1cm5bdipNYXRoLmNvcyhzLzMpLXIvMyx2Kk1hdGguY29zKChzKzIqTWF0aC5QSSkvMyktci8zLHYqTWF0aC5jb3MoKHMrNCpNYXRoLlBJKS8zKS1yLzNdfTtleHBvcnR7Z2V0VGltZUdpdmVuUHJvZ3Jlc3Npb24gYXMgZ307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@ionic/core/dist/esm-es5/cubic-bezier-eea9a7a9.js\n");

/***/ }),

/***/ "./node_modules/@ionic/core/dist/esm-es5/gesture-controller-31cb6bb9.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm-es5/gesture-controller-31cb6bb9.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"G\": () => (/* binding */ GESTURE_CONTROLLER)\n/* harmony export */ });\nvar GestureController=function(){function t(){this.gestureId=0;this.requestedStart=new Map;this.disabledGestures=new Map;this.disabledScroll=new Set}t.prototype.createGesture=function(t){return new GestureDelegate(this,this.newID(),t.name,t.priority||0,!!t.disableScroll)};t.prototype.createBlocker=function(t){if(t===void 0){t={}}return new BlockerDelegate(this,this.newID(),t.disable,!!t.disableScroll)};t.prototype.start=function(t,e,r){if(!this.canStart(t)){this.requestedStart.delete(e);return false}this.requestedStart.set(e,r);return true};t.prototype.capture=function(t,e,r){if(!this.start(t,e,r)){return false}var i=this.requestedStart;var s=-1e4;i.forEach((function(t){s=Math.max(s,t)}));if(s===r){this.capturedId=e;i.clear();var l=new CustomEvent(\"ionGestureCaptured\",{detail:{gestureName:t}});document.dispatchEvent(l);return true}i.delete(e);return false};t.prototype.release=function(t){this.requestedStart.delete(t);if(this.capturedId===t){this.capturedId=undefined}};t.prototype.disableGesture=function(t,e){var r=this.disabledGestures.get(t);if(r===undefined){r=new Set;this.disabledGestures.set(t,r)}r.add(e)};t.prototype.enableGesture=function(t,e){var r=this.disabledGestures.get(t);if(r!==undefined){r.delete(e)}};t.prototype.disableScroll=function(t){this.disabledScroll.add(t);if(this.disabledScroll.size===1){document.body.classList.add(BACKDROP_NO_SCROLL)}};t.prototype.enableScroll=function(t){this.disabledScroll.delete(t);if(this.disabledScroll.size===0){document.body.classList.remove(BACKDROP_NO_SCROLL)}};t.prototype.canStart=function(t){if(this.capturedId!==undefined){return false}if(this.isDisabled(t)){return false}return true};t.prototype.isCaptured=function(){return this.capturedId!==undefined};t.prototype.isScrollDisabled=function(){return this.disabledScroll.size>0};t.prototype.isDisabled=function(t){var e=this.disabledGestures.get(t);if(e&&e.size>0){return true}return false};t.prototype.newID=function(){this.gestureId++;return this.gestureId};return t}();var GestureDelegate=function(){function t(t,e,r,i,s){this.id=e;this.name=r;this.disableScroll=s;this.priority=i*1e6+e;this.ctrl=t}t.prototype.canStart=function(){if(!this.ctrl){return false}return this.ctrl.canStart(this.name)};t.prototype.start=function(){if(!this.ctrl){return false}return this.ctrl.start(this.name,this.id,this.priority)};t.prototype.capture=function(){if(!this.ctrl){return false}var t=this.ctrl.capture(this.name,this.id,this.priority);if(t&&this.disableScroll){this.ctrl.disableScroll(this.id)}return t};t.prototype.release=function(){if(this.ctrl){this.ctrl.release(this.id);if(this.disableScroll){this.ctrl.enableScroll(this.id)}}};t.prototype.destroy=function(){this.release();this.ctrl=undefined};return t}();var BlockerDelegate=function(){function t(t,e,r,i){this.id=e;this.disable=r;this.disableScroll=i;this.ctrl=t}t.prototype.block=function(){if(!this.ctrl){return}if(this.disable){for(var t=0,e=this.disable;t<e.length;t++){var r=e[t];this.ctrl.disableGesture(r,this.id)}}if(this.disableScroll){this.ctrl.disableScroll(this.id)}};t.prototype.unblock=function(){if(!this.ctrl){return}if(this.disable){for(var t=0,e=this.disable;t<e.length;t++){var r=e[t];this.ctrl.enableGesture(r,this.id)}}if(this.disableScroll){this.ctrl.enableScroll(this.id)}};t.prototype.destroy=function(){this.unblock();this.ctrl=undefined};return t}();var BACKDROP_NO_SCROLL=\"backdrop-no-scroll\";var GESTURE_CONTROLLER=new GestureController;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvZGlzdC9lc20tZXM1L2dlc3R1cmUtY29udHJvbGxlci0zMWNiNmJiOS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUNBQWlDLGFBQWEsaUJBQWlCLDRCQUE0Qiw4QkFBOEIsNEJBQTRCLHNDQUFzQyxzRkFBc0Ysc0NBQXNDLGVBQWUsS0FBSywyRUFBMkUsa0NBQWtDLHNCQUFzQiw4QkFBOEIsYUFBYSw2QkFBNkIsYUFBYSxvQ0FBb0MsdUJBQXVCLGFBQWEsMEJBQTBCLFdBQVcsdUJBQXVCLGdCQUFnQixHQUFHLFVBQVUsa0JBQWtCLFVBQVUsNENBQTRDLFFBQVEsZUFBZSxFQUFFLDBCQUEwQixZQUFZLFlBQVksY0FBYyxnQ0FBZ0MsOEJBQThCLHdCQUF3Qiw0QkFBNEIseUNBQXlDLG1DQUFtQyxrQkFBa0IsVUFBVSwrQkFBK0IsVUFBVSx3Q0FBd0MsbUNBQW1DLGtCQUFrQixjQUFjLHNDQUFzQywyQkFBMkIsaUNBQWlDLGtEQUFrRCxxQ0FBcUMsOEJBQThCLGlDQUFpQyxxREFBcUQsaUNBQWlDLGdDQUFnQyxhQUFhLHVCQUF1QixhQUFhLGFBQWEsa0NBQWtDLG9DQUFvQyx3Q0FBd0MsbUNBQW1DLG1DQUFtQyxtQ0FBbUMsZ0JBQWdCLFlBQVksY0FBYyw2QkFBNkIsaUJBQWlCLHVCQUF1QixTQUFTLEdBQUcsK0JBQStCLHNCQUFzQixVQUFVLFlBQVkscUJBQXFCLHNCQUFzQixZQUFZLGdDQUFnQyxlQUFlLGFBQWEsc0NBQXNDLDZCQUE2QixlQUFlLGFBQWEseURBQXlELCtCQUErQixlQUFlLGFBQWEseURBQXlELDBCQUEwQixpQ0FBaUMsVUFBVSwrQkFBK0IsY0FBYywyQkFBMkIsdUJBQXVCLG1DQUFtQywrQkFBK0IsZUFBZSxxQkFBcUIsU0FBUyxHQUFHLCtCQUErQixvQkFBb0IsVUFBVSxlQUFlLHFCQUFxQixZQUFZLDZCQUE2QixlQUFlLE9BQU8saUJBQWlCLDJCQUEyQixXQUFXLEtBQUssV0FBVyxxQ0FBcUMsdUJBQXVCLG1DQUFtQywrQkFBK0IsZUFBZSxPQUFPLGlCQUFpQiwyQkFBMkIsV0FBVyxLQUFLLFdBQVcsb0NBQW9DLHVCQUF1QixrQ0FBa0MsK0JBQStCLGVBQWUscUJBQXFCLFNBQVMsR0FBRyw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvZGlzdC9lc20tZXM1L2dlc3R1cmUtY29udHJvbGxlci0zMWNiNmJiOS5qcz8zNDdhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBHZXN0dXJlQ29udHJvbGxlcj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt0aGlzLmdlc3R1cmVJZD0wO3RoaXMucmVxdWVzdGVkU3RhcnQ9bmV3IE1hcDt0aGlzLmRpc2FibGVkR2VzdHVyZXM9bmV3IE1hcDt0aGlzLmRpc2FibGVkU2Nyb2xsPW5ldyBTZXR9dC5wcm90b3R5cGUuY3JlYXRlR2VzdHVyZT1mdW5jdGlvbih0KXtyZXR1cm4gbmV3IEdlc3R1cmVEZWxlZ2F0ZSh0aGlzLHRoaXMubmV3SUQoKSx0Lm5hbWUsdC5wcmlvcml0eXx8MCwhIXQuZGlzYWJsZVNjcm9sbCl9O3QucHJvdG90eXBlLmNyZWF0ZUJsb2NrZXI9ZnVuY3Rpb24odCl7aWYodD09PXZvaWQgMCl7dD17fX1yZXR1cm4gbmV3IEJsb2NrZXJEZWxlZ2F0ZSh0aGlzLHRoaXMubmV3SUQoKSx0LmRpc2FibGUsISF0LmRpc2FibGVTY3JvbGwpfTt0LnByb3RvdHlwZS5zdGFydD1mdW5jdGlvbih0LGUscil7aWYoIXRoaXMuY2FuU3RhcnQodCkpe3RoaXMucmVxdWVzdGVkU3RhcnQuZGVsZXRlKGUpO3JldHVybiBmYWxzZX10aGlzLnJlcXVlc3RlZFN0YXJ0LnNldChlLHIpO3JldHVybiB0cnVlfTt0LnByb3RvdHlwZS5jYXB0dXJlPWZ1bmN0aW9uKHQsZSxyKXtpZighdGhpcy5zdGFydCh0LGUscikpe3JldHVybiBmYWxzZX12YXIgaT10aGlzLnJlcXVlc3RlZFN0YXJ0O3ZhciBzPS0xZTQ7aS5mb3JFYWNoKChmdW5jdGlvbih0KXtzPU1hdGgubWF4KHMsdCl9KSk7aWYocz09PXIpe3RoaXMuY2FwdHVyZWRJZD1lO2kuY2xlYXIoKTt2YXIgbD1uZXcgQ3VzdG9tRXZlbnQoXCJpb25HZXN0dXJlQ2FwdHVyZWRcIix7ZGV0YWlsOntnZXN0dXJlTmFtZTp0fX0pO2RvY3VtZW50LmRpc3BhdGNoRXZlbnQobCk7cmV0dXJuIHRydWV9aS5kZWxldGUoZSk7cmV0dXJuIGZhbHNlfTt0LnByb3RvdHlwZS5yZWxlYXNlPWZ1bmN0aW9uKHQpe3RoaXMucmVxdWVzdGVkU3RhcnQuZGVsZXRlKHQpO2lmKHRoaXMuY2FwdHVyZWRJZD09PXQpe3RoaXMuY2FwdHVyZWRJZD11bmRlZmluZWR9fTt0LnByb3RvdHlwZS5kaXNhYmxlR2VzdHVyZT1mdW5jdGlvbih0LGUpe3ZhciByPXRoaXMuZGlzYWJsZWRHZXN0dXJlcy5nZXQodCk7aWYocj09PXVuZGVmaW5lZCl7cj1uZXcgU2V0O3RoaXMuZGlzYWJsZWRHZXN0dXJlcy5zZXQodCxyKX1yLmFkZChlKX07dC5wcm90b3R5cGUuZW5hYmxlR2VzdHVyZT1mdW5jdGlvbih0LGUpe3ZhciByPXRoaXMuZGlzYWJsZWRHZXN0dXJlcy5nZXQodCk7aWYociE9PXVuZGVmaW5lZCl7ci5kZWxldGUoZSl9fTt0LnByb3RvdHlwZS5kaXNhYmxlU2Nyb2xsPWZ1bmN0aW9uKHQpe3RoaXMuZGlzYWJsZWRTY3JvbGwuYWRkKHQpO2lmKHRoaXMuZGlzYWJsZWRTY3JvbGwuc2l6ZT09PTEpe2RvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChCQUNLRFJPUF9OT19TQ1JPTEwpfX07dC5wcm90b3R5cGUuZW5hYmxlU2Nyb2xsPWZ1bmN0aW9uKHQpe3RoaXMuZGlzYWJsZWRTY3JvbGwuZGVsZXRlKHQpO2lmKHRoaXMuZGlzYWJsZWRTY3JvbGwuc2l6ZT09PTApe2RvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShCQUNLRFJPUF9OT19TQ1JPTEwpfX07dC5wcm90b3R5cGUuY2FuU3RhcnQ9ZnVuY3Rpb24odCl7aWYodGhpcy5jYXB0dXJlZElkIT09dW5kZWZpbmVkKXtyZXR1cm4gZmFsc2V9aWYodGhpcy5pc0Rpc2FibGVkKHQpKXtyZXR1cm4gZmFsc2V9cmV0dXJuIHRydWV9O3QucHJvdG90eXBlLmlzQ2FwdHVyZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jYXB0dXJlZElkIT09dW5kZWZpbmVkfTt0LnByb3RvdHlwZS5pc1Njcm9sbERpc2FibGVkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGlzYWJsZWRTY3JvbGwuc2l6ZT4wfTt0LnByb3RvdHlwZS5pc0Rpc2FibGVkPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZGlzYWJsZWRHZXN0dXJlcy5nZXQodCk7aWYoZSYmZS5zaXplPjApe3JldHVybiB0cnVlfXJldHVybiBmYWxzZX07dC5wcm90b3R5cGUubmV3SUQ9ZnVuY3Rpb24oKXt0aGlzLmdlc3R1cmVJZCsrO3JldHVybiB0aGlzLmdlc3R1cmVJZH07cmV0dXJuIHR9KCk7dmFyIEdlc3R1cmVEZWxlZ2F0ZT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlLHIsaSxzKXt0aGlzLmlkPWU7dGhpcy5uYW1lPXI7dGhpcy5kaXNhYmxlU2Nyb2xsPXM7dGhpcy5wcmlvcml0eT1pKjFlNitlO3RoaXMuY3RybD10fXQucHJvdG90eXBlLmNhblN0YXJ0PWZ1bmN0aW9uKCl7aWYoIXRoaXMuY3RybCl7cmV0dXJuIGZhbHNlfXJldHVybiB0aGlzLmN0cmwuY2FuU3RhcnQodGhpcy5uYW1lKX07dC5wcm90b3R5cGUuc3RhcnQ9ZnVuY3Rpb24oKXtpZighdGhpcy5jdHJsKXtyZXR1cm4gZmFsc2V9cmV0dXJuIHRoaXMuY3RybC5zdGFydCh0aGlzLm5hbWUsdGhpcy5pZCx0aGlzLnByaW9yaXR5KX07dC5wcm90b3R5cGUuY2FwdHVyZT1mdW5jdGlvbigpe2lmKCF0aGlzLmN0cmwpe3JldHVybiBmYWxzZX12YXIgdD10aGlzLmN0cmwuY2FwdHVyZSh0aGlzLm5hbWUsdGhpcy5pZCx0aGlzLnByaW9yaXR5KTtpZih0JiZ0aGlzLmRpc2FibGVTY3JvbGwpe3RoaXMuY3RybC5kaXNhYmxlU2Nyb2xsKHRoaXMuaWQpfXJldHVybiB0fTt0LnByb3RvdHlwZS5yZWxlYXNlPWZ1bmN0aW9uKCl7aWYodGhpcy5jdHJsKXt0aGlzLmN0cmwucmVsZWFzZSh0aGlzLmlkKTtpZih0aGlzLmRpc2FibGVTY3JvbGwpe3RoaXMuY3RybC5lbmFibGVTY3JvbGwodGhpcy5pZCl9fX07dC5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe3RoaXMucmVsZWFzZSgpO3RoaXMuY3RybD11bmRlZmluZWR9O3JldHVybiB0fSgpO3ZhciBCbG9ja2VyRGVsZWdhdGU9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSxyLGkpe3RoaXMuaWQ9ZTt0aGlzLmRpc2FibGU9cjt0aGlzLmRpc2FibGVTY3JvbGw9aTt0aGlzLmN0cmw9dH10LnByb3RvdHlwZS5ibG9jaz1mdW5jdGlvbigpe2lmKCF0aGlzLmN0cmwpe3JldHVybn1pZih0aGlzLmRpc2FibGUpe2Zvcih2YXIgdD0wLGU9dGhpcy5kaXNhYmxlO3Q8ZS5sZW5ndGg7dCsrKXt2YXIgcj1lW3RdO3RoaXMuY3RybC5kaXNhYmxlR2VzdHVyZShyLHRoaXMuaWQpfX1pZih0aGlzLmRpc2FibGVTY3JvbGwpe3RoaXMuY3RybC5kaXNhYmxlU2Nyb2xsKHRoaXMuaWQpfX07dC5wcm90b3R5cGUudW5ibG9jaz1mdW5jdGlvbigpe2lmKCF0aGlzLmN0cmwpe3JldHVybn1pZih0aGlzLmRpc2FibGUpe2Zvcih2YXIgdD0wLGU9dGhpcy5kaXNhYmxlO3Q8ZS5sZW5ndGg7dCsrKXt2YXIgcj1lW3RdO3RoaXMuY3RybC5lbmFibGVHZXN0dXJlKHIsdGhpcy5pZCl9fWlmKHRoaXMuZGlzYWJsZVNjcm9sbCl7dGhpcy5jdHJsLmVuYWJsZVNjcm9sbCh0aGlzLmlkKX19O3QucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXt0aGlzLnVuYmxvY2soKTt0aGlzLmN0cmw9dW5kZWZpbmVkfTtyZXR1cm4gdH0oKTt2YXIgQkFDS0RST1BfTk9fU0NST0xMPVwiYmFja2Ryb3Atbm8tc2Nyb2xsXCI7dmFyIEdFU1RVUkVfQ09OVFJPTExFUj1uZXcgR2VzdHVyZUNvbnRyb2xsZXI7ZXhwb3J0e0dFU1RVUkVfQ09OVFJPTExFUiBhcyBHfTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@ionic/core/dist/esm-es5/gesture-controller-31cb6bb9.js\n");

/***/ }),

/***/ "./node_modules/@ionic/core/dist/esm-es5/hardware-back-button-4a6b37fb.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm-es5/hardware-back-button-4a6b37fb.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MENU_BACK_BUTTON_PRIORITY\": () => (/* binding */ MENU_BACK_BUTTON_PRIORITY),\n/* harmony export */   \"OVERLAY_BACK_BUTTON_PRIORITY\": () => (/* binding */ OVERLAY_BACK_BUTTON_PRIORITY),\n/* harmony export */   \"blockHardwareBackButton\": () => (/* binding */ blockHardwareBackButton),\n/* harmony export */   \"startHardwareBackButton\": () => (/* binding */ startHardwareBackButton)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar blockHardwareBackButton=function(){document.addEventListener(\"backbutton\",(function(){}))};var startHardwareBackButton=function(){var r=document;var t=false;r.addEventListener(\"backbutton\",(function(){if(t){return}var n=0;var e=[];var a=new CustomEvent(\"ionBackButton\",{bubbles:false,detail:{register:function(r,t){e.push({priority:r,handler:t,id:n++})}}});r.dispatchEvent(a);var i=function(r){return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(void 0,void 0,void 0,(function(){var t,n;return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this,(function(e){switch(e.label){case 0:e.trys.push([0,3,,4]);if(!(r&&r.handler))return[3,2];t=r.handler(o);if(!(t!=null))return[3,2];return[4,t];case 1:e.sent();e.label=2;case 2:return[3,4];case 3:n=e.sent();console.error(n);return[3,4];case 4:return[2]}}))}))};var o=function(){if(e.length>0){var r={priority:Number.MIN_SAFE_INTEGER,handler:function(){return undefined},id:-1};e.forEach((function(t){if(t.priority>=r.priority){r=t}}));t=true;e=e.filter((function(t){return t.id!==r.id}));i(r).then((function(){return t=false}))}};o()}))};var OVERLAY_BACK_BUTTON_PRIORITY=100;var MENU_BACK_BUTTON_PRIORITY=99;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvZGlzdC9lc20tZXM1L2hhcmR3YXJlLWJhY2stYnV0dG9uLTRhNmIzN2ZiLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXlDLHVDQUF1QyxvREFBb0QsSUFBSSx1Q0FBdUMsZUFBZSxZQUFZLDRDQUE0QyxNQUFNLE9BQU8sUUFBUSxTQUFTLHVDQUF1QyxzQkFBc0IsdUJBQXVCLFFBQVEsNEJBQTRCLElBQUksRUFBRSxtQkFBbUIsa0JBQWtCLE9BQU8sZ0RBQVMsa0NBQWtDLFFBQVEsT0FBTyxrREFBVyxtQkFBbUIsZ0JBQWdCLDZCQUE2QiwrQkFBK0IsZUFBZSwwQkFBMEIsWUFBWSxnQkFBZ0IsVUFBVSxtQkFBbUIsa0JBQWtCLGlCQUFpQixZQUFZLGtCQUFrQixHQUFHLElBQUksaUJBQWlCLGVBQWUsT0FBTyxvREFBb0QsaUJBQWlCLFFBQVEsdUJBQXVCLDJCQUEyQixLQUFLLEdBQUcsT0FBTyx3QkFBd0IsbUJBQW1CLEdBQUcsc0JBQXNCLGVBQWUsS0FBSyxJQUFJLElBQUkscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL0Bpb25pYy9jb3JlL2Rpc3QvZXNtLWVzNS9oYXJkd2FyZS1iYWNrLWJ1dHRvbi00YTZiMzdmYi5qcz81ZWEzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydHtfX2F3YWl0ZXIsX19nZW5lcmF0b3J9ZnJvbVwidHNsaWJcIjt2YXIgYmxvY2tIYXJkd2FyZUJhY2tCdXR0b249ZnVuY3Rpb24oKXtkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiYmFja2J1dHRvblwiLChmdW5jdGlvbigpe30pKX07dmFyIHN0YXJ0SGFyZHdhcmVCYWNrQnV0dG9uPWZ1bmN0aW9uKCl7dmFyIHI9ZG9jdW1lbnQ7dmFyIHQ9ZmFsc2U7ci5hZGRFdmVudExpc3RlbmVyKFwiYmFja2J1dHRvblwiLChmdW5jdGlvbigpe2lmKHQpe3JldHVybn12YXIgbj0wO3ZhciBlPVtdO3ZhciBhPW5ldyBDdXN0b21FdmVudChcImlvbkJhY2tCdXR0b25cIix7YnViYmxlczpmYWxzZSxkZXRhaWw6e3JlZ2lzdGVyOmZ1bmN0aW9uKHIsdCl7ZS5wdXNoKHtwcmlvcml0eTpyLGhhbmRsZXI6dCxpZDpuKyt9KX19fSk7ci5kaXNwYXRjaEV2ZW50KGEpO3ZhciBpPWZ1bmN0aW9uKHIpe3JldHVybiBfX2F3YWl0ZXIodm9pZCAwLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIHQsbjtyZXR1cm4gX19nZW5lcmF0b3IodGhpcywoZnVuY3Rpb24oZSl7c3dpdGNoKGUubGFiZWwpe2Nhc2UgMDplLnRyeXMucHVzaChbMCwzLCw0XSk7aWYoIShyJiZyLmhhbmRsZXIpKXJldHVyblszLDJdO3Q9ci5oYW5kbGVyKG8pO2lmKCEodCE9bnVsbCkpcmV0dXJuWzMsMl07cmV0dXJuWzQsdF07Y2FzZSAxOmUuc2VudCgpO2UubGFiZWw9MjtjYXNlIDI6cmV0dXJuWzMsNF07Y2FzZSAzOm49ZS5zZW50KCk7Y29uc29sZS5lcnJvcihuKTtyZXR1cm5bMyw0XTtjYXNlIDQ6cmV0dXJuWzJdfX0pKX0pKX07dmFyIG89ZnVuY3Rpb24oKXtpZihlLmxlbmd0aD4wKXt2YXIgcj17cHJpb3JpdHk6TnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIsaGFuZGxlcjpmdW5jdGlvbigpe3JldHVybiB1bmRlZmluZWR9LGlkOi0xfTtlLmZvckVhY2goKGZ1bmN0aW9uKHQpe2lmKHQucHJpb3JpdHk+PXIucHJpb3JpdHkpe3I9dH19KSk7dD10cnVlO2U9ZS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmlkIT09ci5pZH0pKTtpKHIpLnRoZW4oKGZ1bmN0aW9uKCl7cmV0dXJuIHQ9ZmFsc2V9KSl9fTtvKCl9KSl9O3ZhciBPVkVSTEFZX0JBQ0tfQlVUVE9OX1BSSU9SSVRZPTEwMDt2YXIgTUVOVV9CQUNLX0JVVFRPTl9QUklPUklUWT05OTtleHBvcnR7TUVOVV9CQUNLX0JVVFRPTl9QUklPUklUWSxPVkVSTEFZX0JBQ0tfQlVUVE9OX1BSSU9SSVRZLGJsb2NrSGFyZHdhcmVCYWNrQnV0dG9uLHN0YXJ0SGFyZHdhcmVCYWNrQnV0dG9ufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@ionic/core/dist/esm-es5/hardware-back-button-4a6b37fb.js\n");

/***/ }),

/***/ "./node_modules/@ionic/core/dist/esm-es5/helpers-dd7e4b7b.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm-es5/helpers-dd7e4b7b.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"a\": () => (/* binding */ addEventListener),\n/* harmony export */   \"b\": () => (/* binding */ removeEventListener),\n/* harmony export */   \"c\": () => (/* binding */ componentOnReady),\n/* harmony export */   \"d\": () => (/* binding */ getAriaLabel),\n/* harmony export */   \"e\": () => (/* binding */ renderHiddenInput),\n/* harmony export */   \"f\": () => (/* binding */ debounceEvent),\n/* harmony export */   \"g\": () => (/* binding */ getElementRoot),\n/* harmony export */   \"h\": () => (/* binding */ findItemLabel),\n/* harmony export */   \"i\": () => (/* binding */ inheritAttributes),\n/* harmony export */   \"j\": () => (/* binding */ clamp),\n/* harmony export */   \"k\": () => (/* binding */ hasShadowDom),\n/* harmony export */   \"l\": () => (/* binding */ assert),\n/* harmony export */   \"m\": () => (/* binding */ isEndSide),\n/* harmony export */   \"n\": () => (/* binding */ debounce),\n/* harmony export */   \"o\": () => (/* binding */ now),\n/* harmony export */   \"p\": () => (/* binding */ pointerCoord),\n/* harmony export */   \"r\": () => (/* binding */ raf)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar componentOnReady=function(e,t){if(e.componentOnReady){e.componentOnReady().then((function(e){return t(e)}))}else{raf((function(){return t(e)}))}};var inheritAttributes=function(e,t){if(t===void 0){t=[]}var n={};t.forEach((function(t){if(e.hasAttribute(t)){var r=e.getAttribute(t);if(r!==null){n[t]=e.getAttribute(t)}e.removeAttribute(t)}}));return n};var addEventListener=function(e,t,n,r){if(typeof window!==\"undefined\"){var i=window;var a=i&&i.Ionic&&i.Ionic.config;if(a){var o=a.get(\"_ael\");if(o){return o(e,t,n,r)}else if(a._ael){return a._ael(e,t,n,r)}}}return e.addEventListener(t,n,r)};var removeEventListener=function(e,t,n,r){if(typeof window!==\"undefined\"){var i=window;var a=i&&i.Ionic&&i.Ionic.config;if(a){var o=a.get(\"_rel\");if(o){return o(e,t,n,r)}else if(a._rel){return a._rel(e,t,n,r)}}}return e.removeEventListener(t,n,r)};var getElementRoot=function(e,t){if(t===void 0){t=e}return e.shadowRoot||t};var raf=function(e){if(typeof __zone_symbol__requestAnimationFrame===\"function\"){return __zone_symbol__requestAnimationFrame(e)}if(typeof requestAnimationFrame===\"function\"){return requestAnimationFrame(e)}return setTimeout(e)};var hasShadowDom=function(e){return!!e.shadowRoot&&!!e.attachShadow};var findItemLabel=function(e){var t=e.closest(\"ion-item\");if(t){return t.querySelector(\"ion-label\")}return null};var getAriaLabel=function(e,t){var n;var r=e.getAttribute(\"aria-labelledby\");var i=e.id;var a=r!==null&&r.trim()!==\"\"?r:t+\"-lbl\";var o=r!==null&&r.trim()!==\"\"?document.getElementById(r):findItemLabel(e);if(o){if(r===null){o.id=a}n=o.textContent;o.setAttribute(\"aria-hidden\",\"true\")}else if(i.trim()!==\"\"){o=document.querySelector('label[for=\"'+i+'\"]');if(o){if(o.id!==\"\"){a=o.id}else{o.id=a=i+\"-lbl\"}n=o.textContent}}return{label:o,labelId:a,labelText:n}};var renderHiddenInput=function(e,t,n,r,i){if(e||hasShadowDom(t)){var a=t.querySelector(\"input.aux-input\");if(!a){a=t.ownerDocument.createElement(\"input\");a.type=\"hidden\";a.classList.add(\"aux-input\");t.appendChild(a)}a.disabled=i;a.name=n;a.value=r||\"\"}};var clamp=function(e,t,n){return Math.max(e,Math.min(t,n))};var assert=function(e,t){if(!e){var n=\"ASSERT: \"+t;console.error(n);debugger;throw new Error(n)}};var now=function(e){return e.timeStamp||Date.now()};var pointerCoord=function(e){if(e){var t=e.changedTouches;if(t&&t.length>0){var n=t[0];return{x:n.clientX,y:n.clientY}}if(e.pageX!==undefined){return{x:e.pageX,y:e.pageY}}}return{x:0,y:0}};var isEndSide=function(e){var t=document.dir===\"rtl\";switch(e){case\"start\":return t;case\"end\":return!t;default:throw new Error('\"'+e+'\" is not a valid value for [side]. Use \"start\" or \"end\" instead.')}};var debounceEvent=function(e,t){var n=e._original||e;return{_original:e,emit:debounce(n.emit.bind(n),t)}};var debounce=function(e,t){if(t===void 0){t=0}var n;return function(){var r=[];for(var i=0;i<arguments.length;i++){r[i]=arguments[i]}clearTimeout(n);n=setTimeout.apply(void 0,(0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([e,t],r))}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvZGlzdC9lc20tZXM1L2hlbHBlcnMtZGQ3ZTRiN2IuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWlDLG1DQUFtQyx1QkFBdUIsdUNBQXVDLFlBQVksR0FBRyxLQUFLLGdCQUFnQixZQUFZLEtBQUssb0NBQW9DLGVBQWUsS0FBSyxTQUFTLHVCQUF1QixzQkFBc0Isd0JBQXdCLGFBQWEsdUJBQXVCLHNCQUFzQixHQUFHLFVBQVUsdUNBQXVDLGdDQUFnQyxhQUFhLGlDQUFpQyxNQUFNLG9CQUFvQixNQUFNLGtCQUFrQixnQkFBZ0IseUJBQXlCLGtDQUFrQywwQ0FBMEMsZ0NBQWdDLGFBQWEsaUNBQWlDLE1BQU0sb0JBQW9CLE1BQU0sa0JBQWtCLGdCQUFnQix5QkFBeUIscUNBQXFDLGlDQUFpQyxlQUFlLElBQUksd0JBQXdCLG9CQUFvQiw2REFBNkQsK0NBQStDLDhDQUE4QyxnQ0FBZ0Msc0JBQXNCLDZCQUE2Qix3Q0FBd0MsOEJBQThCLDRCQUE0QixNQUFNLG9DQUFvQyxhQUFhLCtCQUErQixNQUFNLHdDQUF3QyxXQUFXLHlDQUF5QywwRUFBMEUsTUFBTSxhQUFhLE9BQU8sZ0JBQWdCLHFDQUFxQyx1QkFBdUIsK0NBQStDLE1BQU0sY0FBYyxPQUFPLEtBQUssZ0JBQWdCLGlCQUFpQixPQUFPLGdDQUFnQywwQ0FBMEMsdUJBQXVCLHlDQUF5QyxPQUFPLHlDQUF5QyxnQkFBZ0IsNkJBQTZCLGlCQUFpQixhQUFhLFNBQVMsZ0JBQWdCLDBCQUEwQixrQ0FBa0MseUJBQXlCLE9BQU8sbUJBQW1CLGlCQUFpQixTQUFTLHFCQUFxQixvQkFBb0IsZ0NBQWdDLDZCQUE2QixNQUFNLHVCQUF1QixrQkFBa0IsV0FBVyxPQUFPLHlCQUF5Qix3QkFBd0IsT0FBTyxzQkFBc0IsT0FBTyxVQUFVLDBCQUEwQiwyQkFBMkIsVUFBVSxxQkFBcUIsbUJBQW1CLG9HQUFvRyxnQ0FBZ0MscUJBQXFCLE9BQU8sOENBQThDLDJCQUEyQixlQUFlLElBQUksTUFBTSxrQkFBa0IsU0FBUyxZQUFZLG1CQUFtQixLQUFLLGtCQUFrQixnQkFBZ0IsMEJBQTBCLG9EQUFhIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL0Bpb25pYy9jb3JlL2Rpc3QvZXNtLWVzNS9oZWxwZXJzLWRkN2U0YjdiLmpzPzYxY2YiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0e19fc3ByZWFkQXJyYXl9ZnJvbVwidHNsaWJcIjt2YXIgY29tcG9uZW50T25SZWFkeT1mdW5jdGlvbihlLHQpe2lmKGUuY29tcG9uZW50T25SZWFkeSl7ZS5jb21wb25lbnRPblJlYWR5KCkudGhlbigoZnVuY3Rpb24oZSl7cmV0dXJuIHQoZSl9KSl9ZWxzZXtyYWYoKGZ1bmN0aW9uKCl7cmV0dXJuIHQoZSl9KSl9fTt2YXIgaW5oZXJpdEF0dHJpYnV0ZXM9ZnVuY3Rpb24oZSx0KXtpZih0PT09dm9pZCAwKXt0PVtdfXZhciBuPXt9O3QuZm9yRWFjaCgoZnVuY3Rpb24odCl7aWYoZS5oYXNBdHRyaWJ1dGUodCkpe3ZhciByPWUuZ2V0QXR0cmlidXRlKHQpO2lmKHIhPT1udWxsKXtuW3RdPWUuZ2V0QXR0cmlidXRlKHQpfWUucmVtb3ZlQXR0cmlidXRlKHQpfX0pKTtyZXR1cm4gbn07dmFyIGFkZEV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oZSx0LG4scil7aWYodHlwZW9mIHdpbmRvdyE9PVwidW5kZWZpbmVkXCIpe3ZhciBpPXdpbmRvdzt2YXIgYT1pJiZpLklvbmljJiZpLklvbmljLmNvbmZpZztpZihhKXt2YXIgbz1hLmdldChcIl9hZWxcIik7aWYobyl7cmV0dXJuIG8oZSx0LG4scil9ZWxzZSBpZihhLl9hZWwpe3JldHVybiBhLl9hZWwoZSx0LG4scil9fX1yZXR1cm4gZS5hZGRFdmVudExpc3RlbmVyKHQsbixyKX07dmFyIHJlbW92ZUV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oZSx0LG4scil7aWYodHlwZW9mIHdpbmRvdyE9PVwidW5kZWZpbmVkXCIpe3ZhciBpPXdpbmRvdzt2YXIgYT1pJiZpLklvbmljJiZpLklvbmljLmNvbmZpZztpZihhKXt2YXIgbz1hLmdldChcIl9yZWxcIik7aWYobyl7cmV0dXJuIG8oZSx0LG4scil9ZWxzZSBpZihhLl9yZWwpe3JldHVybiBhLl9yZWwoZSx0LG4scil9fX1yZXR1cm4gZS5yZW1vdmVFdmVudExpc3RlbmVyKHQsbixyKX07dmFyIGdldEVsZW1lbnRSb290PWZ1bmN0aW9uKGUsdCl7aWYodD09PXZvaWQgMCl7dD1lfXJldHVybiBlLnNoYWRvd1Jvb3R8fHR9O3ZhciByYWY9ZnVuY3Rpb24oZSl7aWYodHlwZW9mIF9fem9uZV9zeW1ib2xfX3JlcXVlc3RBbmltYXRpb25GcmFtZT09PVwiZnVuY3Rpb25cIil7cmV0dXJuIF9fem9uZV9zeW1ib2xfX3JlcXVlc3RBbmltYXRpb25GcmFtZShlKX1pZih0eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lPT09XCJmdW5jdGlvblwiKXtyZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGUpfXJldHVybiBzZXRUaW1lb3V0KGUpfTt2YXIgaGFzU2hhZG93RG9tPWZ1bmN0aW9uKGUpe3JldHVybiEhZS5zaGFkb3dSb290JiYhIWUuYXR0YWNoU2hhZG93fTt2YXIgZmluZEl0ZW1MYWJlbD1mdW5jdGlvbihlKXt2YXIgdD1lLmNsb3Nlc3QoXCJpb24taXRlbVwiKTtpZih0KXtyZXR1cm4gdC5xdWVyeVNlbGVjdG9yKFwiaW9uLWxhYmVsXCIpfXJldHVybiBudWxsfTt2YXIgZ2V0QXJpYUxhYmVsPWZ1bmN0aW9uKGUsdCl7dmFyIG47dmFyIHI9ZS5nZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsbGVkYnlcIik7dmFyIGk9ZS5pZDt2YXIgYT1yIT09bnVsbCYmci50cmltKCkhPT1cIlwiP3I6dCtcIi1sYmxcIjt2YXIgbz1yIT09bnVsbCYmci50cmltKCkhPT1cIlwiP2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKHIpOmZpbmRJdGVtTGFiZWwoZSk7aWYobyl7aWYocj09PW51bGwpe28uaWQ9YX1uPW8udGV4dENvbnRlbnQ7by5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLFwidHJ1ZVwiKX1lbHNlIGlmKGkudHJpbSgpIT09XCJcIil7bz1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdsYWJlbFtmb3I9XCInK2krJ1wiXScpO2lmKG8pe2lmKG8uaWQhPT1cIlwiKXthPW8uaWR9ZWxzZXtvLmlkPWE9aStcIi1sYmxcIn1uPW8udGV4dENvbnRlbnR9fXJldHVybntsYWJlbDpvLGxhYmVsSWQ6YSxsYWJlbFRleHQ6bn19O3ZhciByZW5kZXJIaWRkZW5JbnB1dD1mdW5jdGlvbihlLHQsbixyLGkpe2lmKGV8fGhhc1NoYWRvd0RvbSh0KSl7dmFyIGE9dC5xdWVyeVNlbGVjdG9yKFwiaW5wdXQuYXV4LWlucHV0XCIpO2lmKCFhKXthPXQub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7YS50eXBlPVwiaGlkZGVuXCI7YS5jbGFzc0xpc3QuYWRkKFwiYXV4LWlucHV0XCIpO3QuYXBwZW5kQ2hpbGQoYSl9YS5kaXNhYmxlZD1pO2EubmFtZT1uO2EudmFsdWU9cnx8XCJcIn19O3ZhciBjbGFtcD1mdW5jdGlvbihlLHQsbil7cmV0dXJuIE1hdGgubWF4KGUsTWF0aC5taW4odCxuKSl9O3ZhciBhc3NlcnQ9ZnVuY3Rpb24oZSx0KXtpZighZSl7dmFyIG49XCJBU1NFUlQ6IFwiK3Q7Y29uc29sZS5lcnJvcihuKTtkZWJ1Z2dlcjt0aHJvdyBuZXcgRXJyb3Iobil9fTt2YXIgbm93PWZ1bmN0aW9uKGUpe3JldHVybiBlLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX07dmFyIHBvaW50ZXJDb29yZD1mdW5jdGlvbihlKXtpZihlKXt2YXIgdD1lLmNoYW5nZWRUb3VjaGVzO2lmKHQmJnQubGVuZ3RoPjApe3ZhciBuPXRbMF07cmV0dXJue3g6bi5jbGllbnRYLHk6bi5jbGllbnRZfX1pZihlLnBhZ2VYIT09dW5kZWZpbmVkKXtyZXR1cm57eDplLnBhZ2VYLHk6ZS5wYWdlWX19fXJldHVybnt4OjAseTowfX07dmFyIGlzRW5kU2lkZT1mdW5jdGlvbihlKXt2YXIgdD1kb2N1bWVudC5kaXI9PT1cInJ0bFwiO3N3aXRjaChlKXtjYXNlXCJzdGFydFwiOnJldHVybiB0O2Nhc2VcImVuZFwiOnJldHVybiF0O2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKCdcIicrZSsnXCIgaXMgbm90IGEgdmFsaWQgdmFsdWUgZm9yIFtzaWRlXS4gVXNlIFwic3RhcnRcIiBvciBcImVuZFwiIGluc3RlYWQuJyl9fTt2YXIgZGVib3VuY2VFdmVudD1mdW5jdGlvbihlLHQpe3ZhciBuPWUuX29yaWdpbmFsfHxlO3JldHVybntfb3JpZ2luYWw6ZSxlbWl0OmRlYm91bmNlKG4uZW1pdC5iaW5kKG4pLHQpfX07dmFyIGRlYm91bmNlPWZ1bmN0aW9uKGUsdCl7aWYodD09PXZvaWQgMCl7dD0wfXZhciBuO3JldHVybiBmdW5jdGlvbigpe3ZhciByPVtdO2Zvcih2YXIgaT0wO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspe3JbaV09YXJndW1lbnRzW2ldfWNsZWFyVGltZW91dChuKTtuPXNldFRpbWVvdXQuYXBwbHkodm9pZCAwLF9fc3ByZWFkQXJyYXkoW2UsdF0scikpfX07ZXhwb3J0e2FkZEV2ZW50TGlzdGVuZXIgYXMgYSxyZW1vdmVFdmVudExpc3RlbmVyIGFzIGIsY29tcG9uZW50T25SZWFkeSBhcyBjLGdldEFyaWFMYWJlbCBhcyBkLHJlbmRlckhpZGRlbklucHV0IGFzIGUsZGVib3VuY2VFdmVudCBhcyBmLGdldEVsZW1lbnRSb290IGFzIGcsZmluZEl0ZW1MYWJlbCBhcyBoLGluaGVyaXRBdHRyaWJ1dGVzIGFzIGksY2xhbXAgYXMgaixoYXNTaGFkb3dEb20gYXMgayxhc3NlcnQgYXMgbCxpc0VuZFNpZGUgYXMgbSxkZWJvdW5jZSBhcyBuLG5vdyBhcyBvLHBvaW50ZXJDb29yZCBhcyBwLHJhZiBhcyByfTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@ionic/core/dist/esm-es5/helpers-dd7e4b7b.js\n");

/***/ }),

/***/ "./node_modules/@ionic/core/dist/esm-es5/index-0d58a5bf.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm-es5/index-0d58a5bf.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"m\": () => (/* binding */ menuController)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _hardware_back_button_4a6b37fb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hardware-back-button-4a6b37fb.js */ \"./node_modules/@ionic/core/dist/esm-es5/hardware-back-button-4a6b37fb.js\");\n/* harmony import */ var _helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers-dd7e4b7b.js */ \"./node_modules/@ionic/core/dist/esm-es5/helpers-dd7e4b7b.js\");\n/* harmony import */ var _ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ionic-global-63a97a32.js */ \"./node_modules/@ionic/core/dist/esm-es5/ionic-global-63a97a32.js\");\n/* harmony import */ var _animation_096c6391_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./animation-096c6391.js */ \"./node_modules/@ionic/core/dist/esm-es5/animation-096c6391.js\");\nvar baseAnimation=function(n){return (0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_3__.c)().duration(n?400:300)};var menuOverlayAnimation=function(n){var e;var r;var t=n.width+8;var i=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_3__.c)();var a=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_3__.c)();if(n.isEndSide){e=t+\"px\";r=\"0px\"}else{e=-t+\"px\";r=\"0px\"}i.addElement(n.menuInnerEl).fromTo(\"transform\",\"translateX(\"+e+\")\",\"translateX(\"+r+\")\");var o=(0,_ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_2__.b)(n);var u=o===\"ios\";var s=u?.2:.25;a.addElement(n.backdropEl).fromTo(\"opacity\",.01,s);return baseAnimation(u).addAnimation([i,a])};var menuPushAnimation=function(n){var e;var r;var t=(0,_ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_2__.b)(n);var i=n.width;if(n.isEndSide){e=-i+\"px\";r=i+\"px\"}else{e=i+\"px\";r=-i+\"px\"}var a=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_3__.c)().addElement(n.menuInnerEl).fromTo(\"transform\",\"translateX(\"+r+\")\",\"translateX(0px)\");var o=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_3__.c)().addElement(n.contentEl).fromTo(\"transform\",\"translateX(0px)\",\"translateX(\"+e+\")\");var u=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_3__.c)().addElement(n.backdropEl).fromTo(\"opacity\",.01,.32);return baseAnimation(t===\"ios\").addAnimation([a,o,u])};var menuRevealAnimation=function(n){var e=(0,_ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_2__.b)(n);var r=n.width*(n.isEndSide?-1:1)+\"px\";var t=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_3__.c)().addElement(n.contentEl).fromTo(\"transform\",\"translateX(0px)\",\"translateX(\"+r+\")\");return baseAnimation(e===\"ios\").addAnimation(t)};var createMenuController=function(){var n=new Map;var e=[];var r=function(n){return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(void 0,void 0,void 0,(function(){var e;return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this,(function(r){switch(r.label){case 0:return[4,c(n)];case 1:e=r.sent();if(e){return[2,e.open()]}return[2,false]}}))}))};var t=function(n){return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(void 0,void 0,void 0,(function(){var e;return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this,(function(r){switch(r.label){case 0:return[4,n!==undefined?c(n):f()];case 1:e=r.sent();if(e!==undefined){return[2,e.close()]}return[2,false]}}))}))};var i=function(n){return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(void 0,void 0,void 0,(function(){var e;return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this,(function(r){switch(r.label){case 0:return[4,c(n)];case 1:e=r.sent();if(e){return[2,e.toggle()]}return[2,false]}}))}))};var a=function(n,e){return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(void 0,void 0,void 0,(function(){var r;return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this,(function(t){switch(t.label){case 0:return[4,c(e)];case 1:r=t.sent();if(r){r.disabled=!n}return[2,r]}}))}))};var o=function(n,e){return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(void 0,void 0,void 0,(function(){var r;return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this,(function(t){switch(t.label){case 0:return[4,c(e)];case 1:r=t.sent();if(r){r.swipeGesture=n}return[2,r]}}))}))};var u=function(n){return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(void 0,void 0,void 0,(function(){var e,e;return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this,(function(r){switch(r.label){case 0:if(!(n!=null))return[3,2];return[4,c(n)];case 1:e=r.sent();return[2,e!==undefined&&e.isOpen()];case 2:return[4,f()];case 3:e=r.sent();return[2,e!==undefined]}}))}))};var s=function(n){return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(void 0,void 0,void 0,(function(){var e;return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this,(function(r){switch(r.label){case 0:return[4,c(n)];case 1:e=r.sent();if(e){return[2,!e.disabled]}return[2,false]}}))}))};var c=function(n){return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(void 0,void 0,void 0,(function(){var r,t;return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this,(function(i){switch(i.label){case 0:return[4,O()];case 1:i.sent();if(n===\"start\"||n===\"end\"){r=E((function(e){return e.side===n&&!e.disabled}));if(r){return[2,r]}return[2,E((function(e){return e.side===n}))]}else if(n!=null){return[2,E((function(e){return e.menuId===n}))]}t=E((function(n){return!n.disabled}));if(t){return[2,t]}return[2,e.length>0?e[0].el:undefined]}}))}))};var f=function(){return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(void 0,void 0,void 0,(function(){return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this,(function(n){switch(n.label){case 0:return[4,O()];case 1:n.sent();return[2,g()]}}))}))};var d=function(){return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(void 0,void 0,void 0,(function(){return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this,(function(n){switch(n.label){case 0:return[4,O()];case 1:n.sent();return[2,w()]}}))}))};var v=function(){return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(void 0,void 0,void 0,(function(){return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this,(function(n){switch(n.label){case 0:return[4,O()];case 1:n.sent();return[2,A()]}}))}))};var l=function(e,r){n.set(e,r)};var m=function(n){if(e.indexOf(n)<0){if(!n.disabled){p(n)}e.push(n)}};var _=function(n){var r=e.indexOf(n);if(r>-1){e.splice(r,1)}};var p=function(n){var r=n.side;e.filter((function(e){return e.side===r&&e!==n})).forEach((function(n){return n.disabled=true}))};var b=function(n,e,r){return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(void 0,void 0,void 0,(function(){var t;return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this,(function(i){switch(i.label){case 0:if(A()){return[2,false]}if(!e)return[3,3];return[4,f()];case 1:t=i.sent();if(!(t&&n.el!==t))return[3,3];return[4,t.setOpen(false,false)];case 2:i.sent();i.label=3;case 3:return[2,n._setOpen(e,r)]}}))}))};var h=function(e,r){var t=n.get(e);if(!t){throw new Error(\"animation not registered\")}var i=t(r);return i};var g=function(){return E((function(n){return n._isOpen}))};var w=function(){return e.map((function(n){return n.el}))};var A=function(){return e.some((function(n){return n.isAnimating}))};var E=function(n){var r=e.find(n);if(r!==undefined){return r.el}return undefined};var O=function(){return Promise.all(Array.from(document.querySelectorAll(\"ion-menu\")).map((function(n){return new Promise((function(e){return (0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_1__.c)(n,e)}))})))};l(\"reveal\",menuRevealAnimation);l(\"push\",menuPushAnimation);l(\"overlay\",menuOverlayAnimation);if(typeof document!==\"undefined\"){document.addEventListener(\"ionBackButton\",(function(n){var e=g();if(e){n.detail.register(_hardware_back_button_4a6b37fb_js__WEBPACK_IMPORTED_MODULE_0__.MENU_BACK_BUTTON_PRIORITY,(function(){return e.close()}))}}))}return{registerAnimation:l,get:c,getMenus:d,getOpen:f,isEnabled:s,swipeGesture:o,isAnimating:v,isOpen:u,enable:a,toggle:i,close:t,open:r,_getOpenSync:g,_createAnimation:h,_register:m,_unregister:_,_setOpen:b,_setActiveMenu:p}};var menuController=createMenuController();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@ionic/core/dist/esm-es5/index-0d58a5bf.js\n");

/***/ }),

/***/ "./node_modules/@ionic/core/dist/esm-es5/index-34cb2743.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm-es5/index-34cb2743.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GESTURE_CONTROLLER\": () => (/* reexport safe */ _gesture_controller_31cb6bb9_js__WEBPACK_IMPORTED_MODULE_0__.G),\n/* harmony export */   \"createGesture\": () => (/* binding */ createGesture)\n/* harmony export */ });\n/* harmony import */ var _gesture_controller_31cb6bb9_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gesture-controller-31cb6bb9.js */ \"./node_modules/@ionic/core/dist/esm-es5/gesture-controller-31cb6bb9.js\");\nvar addEventListener=function(e,r,t,a){var n=supportsPassive(e)?{capture:!!a.capture,passive:!!a.passive}:!!a.capture;var i;var u;if(e[\"__zone_symbol__addEventListener\"]){i=\"__zone_symbol__addEventListener\";u=\"__zone_symbol__removeEventListener\"}else{i=\"addEventListener\";u=\"removeEventListener\"}e[i](r,t,n);return function(){e[u](r,t,n)}};var supportsPassive=function(e){if(_sPassive===undefined){try{var r=Object.defineProperty({},\"passive\",{get:function(){_sPassive=true}});e.addEventListener(\"optsTest\",(function(){return}),r)}catch(t){_sPassive=false}}return!!_sPassive};var _sPassive;var MOUSE_WAIT=2e3;var createPointerEvents=function(e,r,t,a,n){var i;var u;var s;var v;var f;var o;var c;var l=0;var d=function(a){l=Date.now()+MOUSE_WAIT;if(!r(a)){return}if(!u&&t){u=addEventListener(e,\"touchmove\",t,n)}if(!s){s=addEventListener(a.target,\"touchend\",p,n)}if(!v){v=addEventListener(a.target,\"touchcancel\",p,n)}};var m=function(a){if(l>Date.now()){return}if(!r(a)){return}if(!o&&t){o=addEventListener(getDocument(e),\"mousemove\",t,n)}if(!c){c=addEventListener(getDocument(e),\"mouseup\",E,n)}};var p=function(e){_();if(a){a(e)}};var E=function(e){g();if(a){a(e)}};var _=function(){if(u){u()}if(s){s()}if(v){v()}u=s=v=undefined};var g=function(){if(o){o()}if(c){c()}o=c=undefined};var y=function(){_();g()};var X=function(r){if(r===void 0){r=true}if(!r){if(i){i()}if(f){f()}i=f=undefined;y()}else{if(!i){i=addEventListener(e,\"touchstart\",d,n)}if(!f){f=addEventListener(e,\"mousedown\",m,n)}}};var Y=function(){X(false);a=t=r=undefined};return{enable:X,stop:y,destroy:Y}};var getDocument=function(e){return e instanceof Document?e:e.ownerDocument};var createPanRecognizer=function(e,r,t){var a=t*(Math.PI/180);var n=e===\"x\";var i=Math.cos(a);var u=r*r;var s=0;var v=0;var f=false;var o=0;return{start:function(e,r){s=e;v=r;o=0;f=true},detect:function(e,r){if(!f){return false}var t=e-s;var a=r-v;var c=t*t+a*a;if(c<u){return false}var l=Math.sqrt(c);var d=(n?t:a)/l;if(d>i){o=1}else if(d<-i){o=-1}else{o=0}f=false;return true},isGesture:function(){return o!==0},getDirection:function(){return o}}};var createGesture=function(e){var r=false;var t=false;var a=true;var n=false;var i=Object.assign({disableScroll:false,direction:\"x\",gesturePriority:0,passive:true,maxAngle:40,threshold:10},e);var u=i.canStart;var s=i.onWillStart;var v=i.onStart;var f=i.onEnd;var o=i.notCaptured;var c=i.onMove;var l=i.threshold;var d=i.passive;var m=i.blurOnStart;var p={type:\"pan\",startX:0,startY:0,startTime:0,currentX:0,currentY:0,velocityX:0,velocityY:0,deltaX:0,deltaY:0,currentTime:0,event:undefined,data:undefined};var E=createPanRecognizer(i.direction,i.threshold,i.maxAngle);var _=_gesture_controller_31cb6bb9_js__WEBPACK_IMPORTED_MODULE_0__.G.createGesture({name:e.gestureName,priority:e.gesturePriority,disableScroll:e.disableScroll});var g=function(e){var r=now(e);if(t||!a){return false}updateDetail(e,p);p.startX=p.currentX;p.startY=p.currentY;p.startTime=p.currentTime=r;p.velocityX=p.velocityY=p.deltaX=p.deltaY=0;p.event=e;if(u&&u(p)===false){return false}_.release();if(!_.start()){return false}t=true;if(l===0){return Y()}E.start(p.startX,p.startY);return true};var y=function(e){if(r){if(!n&&a){n=true;calcGestureData(p,e);requestAnimationFrame(X)}return}calcGestureData(p,e);if(E.detect(p.currentX,p.currentY)){if(!E.isGesture()||!Y()){P()}}};var X=function(){if(!r){return}n=false;if(c){c(p)}};var Y=function(){if(_&&!_.capture()){return false}r=true;a=false;p.startX=p.currentX;p.startY=p.currentY;p.startTime=p.currentTime;if(s){s(p).then(L)}else{L()}return true};var b=function(){if(typeof document!==\"undefined\"){var e=document.activeElement;if(e!==null&&e.blur){e.blur()}}};var L=function(){if(m){b()}if(v){v(p)}a=true};var h=function(){r=false;t=false;n=false;a=true;_.release()};var T=function(e){var t=r;var n=a;h();if(!n){return}calcGestureData(p,e);if(t){if(f){f(p)}return}if(o){o(p)}};var D=createPointerEvents(i.el,g,y,T,{capture:false,passive:d});var P=function(){h();D.stop();if(o){o(p)}};return{enable:function(e){if(e===void 0){e=true}if(!e){if(r){T(undefined)}h()}D.enable(e)},destroy:function(){_.destroy();D.destroy()}}};var calcGestureData=function(e,r){if(!r){return}var t=e.currentX;var a=e.currentY;var n=e.currentTime;updateDetail(r,e);var i=e.currentX;var u=e.currentY;var s=e.currentTime=now(r);var v=s-n;if(v>0&&v<100){var f=(i-t)/v;var o=(u-a)/v;e.velocityX=f*.7+e.velocityX*.3;e.velocityY=o*.7+e.velocityY*.3}e.deltaX=i-e.startX;e.deltaY=u-e.startY;e.event=r};var updateDetail=function(e,r){var t=0;var a=0;if(e){var n=e.changedTouches;if(n&&n.length>0){var i=n[0];t=i.clientX;a=i.clientY}else if(e.pageX!==undefined){t=e.pageX;a=e.pageY}}r.currentX=t;r.currentY=a};var now=function(e){return e.timeStamp||Date.now()};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@ionic/core/dist/esm-es5/index-34cb2743.js\n");

/***/ }),

/***/ "./node_modules/@ionic/core/dist/esm-es5/index-7a8b7a1c.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm-es5/index-7a8b7a1c.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"B\": () => (/* binding */ Build),\n/* harmony export */   \"C\": () => (/* binding */ CSS),\n/* harmony export */   \"H\": () => (/* binding */ Host),\n/* harmony export */   \"N\": () => (/* binding */ NAMESPACE),\n/* harmony export */   \"a\": () => (/* binding */ promiseResolve),\n/* harmony export */   \"b\": () => (/* binding */ bootstrapLazy),\n/* harmony export */   \"c\": () => (/* binding */ writeTask),\n/* harmony export */   \"d\": () => (/* binding */ doc),\n/* harmony export */   \"e\": () => (/* binding */ createEvent),\n/* harmony export */   \"f\": () => (/* binding */ readTask),\n/* harmony export */   \"g\": () => (/* binding */ getMode),\n/* harmony export */   \"h\": () => (/* binding */ h),\n/* harmony export */   \"i\": () => (/* binding */ getElement),\n/* harmony export */   \"j\": () => (/* binding */ forceUpdate),\n/* harmony export */   \"k\": () => (/* binding */ getAssetPath),\n/* harmony export */   \"p\": () => (/* binding */ plt),\n/* harmony export */   \"r\": () => (/* binding */ registerInstance),\n/* harmony export */   \"s\": () => (/* binding */ setMode),\n/* harmony export */   \"w\": () => (/* binding */ win)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar NAMESPACE=\"ionic\";var scopeId;var contentRef;var hostTagName;var useNativeShadowDom=false;var checkSlotFallbackVisibility=false;var checkSlotRelocate=false;var isSvgMode=false;var queuePending=false;var win=typeof window!==\"undefined\"?window:{};var CSS=win.CSS;var doc=win.document||{head:{}};var plt={$flags$:0,$resourcesUrl$:\"\",jmp:function(e){return e()},raf:function(e){return requestAnimationFrame(e)},ael:function(e,t,r,n){return e.addEventListener(t,r,n)},rel:function(e,t,r,n){return e.removeEventListener(t,r,n)},ce:function(e,t){return new CustomEvent(e,t)}};var supportsShadow=function(){return(doc.head.attachShadow+\"\").indexOf(\"[native\")>-1}();var promiseResolve=function(e){return Promise.resolve(e)};var supportsConstructibleStylesheets=function(){try{new CSSStyleSheet;return typeof(new CSSStyleSheet).replace===\"function\"}catch(e){}return false}();var addHostEventListeners=function(e,t,r,n){if(r){r.map((function(r){var n=r[0],a=r[1],o=r[2];var s=getHostListenerTarget(e,n);var i=hostListenerProxy(t,o);var l=hostListenerOpts(n);plt.ael(s,a,i,l);(t.$rmListeners$=t.$rmListeners$||[]).push((function(){return plt.rel(s,a,i,l)}))}))}};var hostListenerProxy=function(e,t){return function(r){try{{if(e.$flags$&256){e.$lazyInstance$[t](r)}else{(e.$queuedListeners$=e.$queuedListeners$||[]).push([t,r])}}}catch(n){consoleError(n)}}};var getHostListenerTarget=function(e,t){if(t&4)return doc;if(t&8)return win;if(t&16)return doc.body;return e};var hostListenerOpts=function(e){return(e&2)!==0};var CONTENT_REF_ID=\"r\";var ORG_LOCATION_ID=\"o\";var SLOT_NODE_ID=\"s\";var TEXT_NODE_ID=\"t\";var HYDRATE_ID=\"s-id\";var HYDRATED_STYLE_ID=\"sty-id\";var HYDRATE_CHILD_ID=\"c-id\";var HYDRATED_CSS=\"{visibility:hidden}.hydrated{visibility:inherit}\";var XLINK_NS=\"http://www.w3.org/1999/xlink\";var createTime=function(e,t){if(t===void 0){t=\"\"}{return function(){return}}};var uniqueTime=function(e,t){{return function(){return}}};var rootAppliedStyles=new WeakMap;var registerStyle=function(e,t,r){var n=styles.get(e);if(supportsConstructibleStylesheets&&r){n=n||new CSSStyleSheet;n.replace(t)}else{n=t}styles.set(e,n)};var addStyle=function(e,t,r,n){var a=getScopeId(t,r);var o=styles.get(a);e=e.nodeType===11?e:doc;if(o){if(typeof o===\"string\"){e=e.head||e;var s=rootAppliedStyles.get(e);var i=void 0;if(!s){rootAppliedStyles.set(e,s=new Set)}if(!s.has(a)){if(e.host&&(i=e.querySelector(\"[\"+HYDRATED_STYLE_ID+'=\"'+a+'\"]'))){i.innerHTML=o}else{if(plt.$cssShim$){i=plt.$cssShim$.createHostStyle(n,a,o,!!(t.$flags$&10));var l=i[\"s-sc\"];if(l){a=l;s=null}}else{i=doc.createElement(\"style\");i.innerHTML=o}e.insertBefore(i,e.querySelector(\"link\"))}if(s){s.add(a)}}}else if(!e.adoptedStyleSheets.includes(o)){e.adoptedStyleSheets=(0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([],e.adoptedStyleSheets),[o])}}return a};var attachStyles=function(e){var t=e.$cmpMeta$;var r=e.$hostElement$;var n=t.$flags$;var a=createTime(\"attachStyles\",t.$tagName$);var o=addStyle(supportsShadow&&r.shadowRoot?r.shadowRoot:r.getRootNode(),t,e.$modeName$,r);if(n&10){r[\"s-sc\"]=o;r.classList.add(o+\"-h\");if(n&2){r.classList.add(o+\"-s\")}}a()};var getScopeId=function(e,t){return\"sc-\"+(t&&e.$flags$&32?e.$tagName$+\"-\"+t:e.$tagName$)};var convertScopedToShadow=function(e){return e.replace(/\\/\\*!@([^\\/]+)\\*\\/[^\\{]+\\{/g,\"$1{\")};var computeMode=function(e){return modeResolutionChain.map((function(t){return t(e)})).find((function(e){return!!e}))};var setMode=function(e){return modeResolutionChain.push(e)};var getMode=function(e){return getHostRef(e).$modeName$};var EMPTY_OBJ={};var SVG_NS=\"http://www.w3.org/2000/svg\";var HTML_NS=\"http://www.w3.org/1999/xhtml\";var isDef=function(e){return e!=null};var isComplexType=function(e){e=typeof e;return e===\"object\"||e===\"function\"};var h=function(e,t){var r=[];for(var n=2;n<arguments.length;n++){r[n-2]=arguments[n]}var a=null;var o=null;var s=null;var i=false;var l=false;var $=[];var c=function(t){for(var r=0;r<t.length;r++){a=t[r];if(Array.isArray(a)){c(a)}else if(a!=null&&typeof a!==\"boolean\"){if(i=typeof e!==\"function\"&&!isComplexType(a)){a=String(a)}if(i&&l){$[$.length-1].$text$+=a}else{$.push(i?newVNode(null,a):a)}l=i}}};c(r);if(t){if(t.key){o=t.key}if(t.name){s=t.name}{var f=t.className||t.class;if(f){t.class=typeof f!==\"object\"?f:Object.keys(f).filter((function(e){return f[e]})).join(\" \")}}}if(typeof e===\"function\"){return e(t===null?{}:t,$,vdomFnUtils)}var u=newVNode(e,null);u.$attrs$=t;if($.length>0){u.$children$=$}{u.$key$=o}{u.$name$=s}return u};var newVNode=function(e,t){var r={$flags$:0,$tag$:e,$text$:t,$elm$:null,$children$:null};{r.$attrs$=null}{r.$key$=null}{r.$name$=null}return r};var Host={};var isHost=function(e){return e&&e.$tag$===Host};var vdomFnUtils={forEach:function(e,t){return e.map(convertToPublic).forEach(t)},map:function(e,t){return e.map(convertToPublic).map(t).map(convertToPrivate)}};var convertToPublic=function(e){return{vattrs:e.$attrs$,vchildren:e.$children$,vkey:e.$key$,vname:e.$name$,vtag:e.$tag$,vtext:e.$text$}};var convertToPrivate=function(e){if(typeof e.vtag===\"function\"){var t=Object.assign({},e.vattrs);if(e.vkey){t.key=e.vkey}if(e.vname){t.name=e.vname}return h.apply(void 0,(0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([e.vtag,t],e.vchildren||[]))}var r=newVNode(e.vtag,e.vtext);r.$attrs$=e.vattrs;r.$children$=e.vchildren;r.$key$=e.vkey;r.$name$=e.vname;return r};var setAccessor=function(e,t,r,n,a,o){if(r!==n){var s=isMemberInElement(e,t);var i=t.toLowerCase();if(t===\"class\"){var l=e.classList;var $=parseClassList(r);var c=parseClassList(n);l.remove.apply(l,$.filter((function(e){return e&&!c.includes(e)})));l.add.apply(l,c.filter((function(e){return e&&!$.includes(e)})))}else if(t===\"style\"){{for(var f in r){if(!n||n[f]==null){if(f.includes(\"-\")){e.style.removeProperty(f)}else{e.style[f]=\"\"}}}}for(var f in n){if(!r||n[f]!==r[f]){if(f.includes(\"-\")){e.style.setProperty(f,n[f])}else{e.style[f]=n[f]}}}}else if(t===\"key\");else if(t===\"ref\"){if(n){n(e)}}else if(!s&&t[0]===\"o\"&&t[1]===\"n\"){if(t[2]===\"-\"){t=t.slice(3)}else if(isMemberInElement(win,i)){t=i.slice(2)}else{t=i[2]+t.slice(3)}if(r){plt.rel(e,t,r,false)}if(n){plt.ael(e,t,n,false)}}else{var u=isComplexType(n);if((s||u&&n!==null)&&!a){try{if(!e.tagName.includes(\"-\")){var d=n==null?\"\":n;if(t===\"list\"){s=false}else if(r==null||e[t]!=d){e[t]=d}}else{e[t]=n}}catch(p){}}var v=false;{if(i!==(i=i.replace(/^xlink\\:?/,\"\"))){t=i;v=true}}if(n==null||n===false){if(n!==false||e.getAttribute(t)===\"\"){if(v){e.removeAttributeNS(XLINK_NS,t)}else{e.removeAttribute(t)}}}else if((!s||o&4||a)&&!u){n=n===true?\"\":n;if(v){e.setAttributeNS(XLINK_NS,t,n)}else{e.setAttribute(t,n)}}}}};var parseClassListRegex=/\\s/;var parseClassList=function(e){return!e?[]:e.split(parseClassListRegex)};var updateElement=function(e,t,r,n){var a=t.$elm$.nodeType===11&&t.$elm$.host?t.$elm$.host:t.$elm$;var o=e&&e.$attrs$||EMPTY_OBJ;var s=t.$attrs$||EMPTY_OBJ;{for(n in o){if(!(n in s)){setAccessor(a,n,o[n],undefined,r,t.$flags$)}}}for(n in s){setAccessor(a,n,o[n],s[n],r,t.$flags$)}};var createElm=function(e,t,r,n){var a=t.$children$[r];var o=0;var s;var i;var l;if(!useNativeShadowDom){checkSlotRelocate=true;if(a.$tag$===\"slot\"){if(scopeId){n.classList.add(scopeId+\"-s\")}a.$flags$|=a.$children$?2:1}}if(a.$text$!==null){s=a.$elm$=doc.createTextNode(a.$text$)}else if(a.$flags$&1){s=a.$elm$=doc.createTextNode(\"\")}else{if(!isSvgMode){isSvgMode=a.$tag$===\"svg\"}s=a.$elm$=doc.createElementNS(isSvgMode?SVG_NS:HTML_NS,a.$flags$&2?\"slot-fb\":a.$tag$);if(isSvgMode&&a.$tag$===\"foreignObject\"){isSvgMode=false}{updateElement(null,a,isSvgMode)}if(isDef(scopeId)&&s[\"s-si\"]!==scopeId){s.classList.add(s[\"s-si\"]=scopeId)}if(a.$children$){for(o=0;o<a.$children$.length;++o){i=createElm(e,a,o,s);if(i){s.appendChild(i)}}}{if(a.$tag$===\"svg\"){isSvgMode=false}else if(s.tagName===\"foreignObject\"){isSvgMode=true}}}{s[\"s-hn\"]=hostTagName;if(a.$flags$&(2|1)){s[\"s-sr\"]=true;s[\"s-cr\"]=contentRef;s[\"s-sn\"]=a.$name$||\"\";l=e&&e.$children$&&e.$children$[r];if(l&&l.$tag$===a.$tag$&&e.$elm$){putBackInOriginalLocation(e.$elm$,false)}}}return s};var putBackInOriginalLocation=function(e,t){plt.$flags$|=1;var r=e.childNodes;for(var n=r.length-1;n>=0;n--){var a=r[n];if(a[\"s-hn\"]!==hostTagName&&a[\"s-ol\"]){parentReferenceNode(a).insertBefore(a,referenceNode(a));a[\"s-ol\"].remove();a[\"s-ol\"]=undefined;checkSlotRelocate=true}if(t){putBackInOriginalLocation(a,t)}}plt.$flags$&=~1};var addVnodes=function(e,t,r,n,a,o){var s=e[\"s-cr\"]&&e[\"s-cr\"].parentNode||e;var i;if(s.shadowRoot&&s.tagName===hostTagName){s=s.shadowRoot}for(;a<=o;++a){if(n[a]){i=createElm(null,r,a,e);if(i){n[a].$elm$=i;s.insertBefore(i,referenceNode(t))}}}};var removeVnodes=function(e,t,r,n,a){for(;t<=r;++t){if(n=e[t]){a=n.$elm$;callNodeRefs(n);{checkSlotFallbackVisibility=true;if(a[\"s-ol\"]){a[\"s-ol\"].remove()}else{putBackInOriginalLocation(a,true)}}a.remove()}}};var updateChildren=function(e,t,r,n){var a=0;var o=0;var s=0;var i=0;var l=t.length-1;var $=t[0];var c=t[l];var f=n.length-1;var u=n[0];var d=n[f];var v;var p;while(a<=l&&o<=f){if($==null){$=t[++a]}else if(c==null){c=t[--l]}else if(u==null){u=n[++o]}else if(d==null){d=n[--f]}else if(isSameVnode($,u)){patch($,u);$=t[++a];u=n[++o]}else if(isSameVnode(c,d)){patch(c,d);c=t[--l];d=n[--f]}else if(isSameVnode($,d)){if($.$tag$===\"slot\"||d.$tag$===\"slot\"){putBackInOriginalLocation($.$elm$.parentNode,false)}patch($,d);e.insertBefore($.$elm$,c.$elm$.nextSibling);$=t[++a];d=n[--f]}else if(isSameVnode(c,u)){if($.$tag$===\"slot\"||d.$tag$===\"slot\"){putBackInOriginalLocation(c.$elm$.parentNode,false)}patch(c,u);e.insertBefore(c.$elm$,$.$elm$);c=t[--l];u=n[++o]}else{s=-1;{for(i=a;i<=l;++i){if(t[i]&&t[i].$key$!==null&&t[i].$key$===u.$key$){s=i;break}}}if(s>=0){p=t[s];if(p.$tag$!==u.$tag$){v=createElm(t&&t[o],r,s,e)}else{patch(p,u);t[s]=undefined;v=p.$elm$}u=n[++o]}else{v=createElm(t&&t[o],r,o,e);u=n[++o]}if(v){{parentReferenceNode($.$elm$).insertBefore(v,referenceNode($.$elm$))}}}}if(a>l){addVnodes(e,n[f+1]==null?null:n[f+1].$elm$,r,n,o,f)}else if(o>f){removeVnodes(t,a,l)}};var isSameVnode=function(e,t){if(e.$tag$===t.$tag$){if(e.$tag$===\"slot\"){return e.$name$===t.$name$}{return e.$key$===t.$key$}}return false};var referenceNode=function(e){return e&&e[\"s-ol\"]||e};var parentReferenceNode=function(e){return(e[\"s-ol\"]?e[\"s-ol\"]:e).parentNode};var patch=function(e,t){var r=t.$elm$=e.$elm$;var n=e.$children$;var a=t.$children$;var o=t.$tag$;var s=t.$text$;var i;if(s===null){{isSvgMode=o===\"svg\"?true:o===\"foreignObject\"?false:isSvgMode}{if(o===\"slot\");else{updateElement(e,t,isSvgMode)}}if(n!==null&&a!==null){updateChildren(r,n,t,a)}else if(a!==null){if(e.$text$!==null){r.textContent=\"\"}addVnodes(r,null,t,a,0,a.length-1)}else if(n!==null){removeVnodes(n,0,n.length-1)}if(isSvgMode&&o===\"svg\"){isSvgMode=false}}else if(i=r[\"s-cr\"]){i.parentNode.textContent=s}else if(e.$text$!==s){r.data=s}};var updateFallbackSlotVisibility=function(e){var t=e.childNodes;var r;var n;var a;var o;var s;var i;for(n=0,a=t.length;n<a;n++){r=t[n];if(r.nodeType===1){if(r[\"s-sr\"]){s=r[\"s-sn\"];r.hidden=false;for(o=0;o<a;o++){i=t[o].nodeType;if(t[o][\"s-hn\"]!==r[\"s-hn\"]||s!==\"\"){if(i===1&&s===t[o].getAttribute(\"slot\")){r.hidden=true;break}}else{if(i===1||i===3&&t[o].textContent.trim()!==\"\"){r.hidden=true;break}}}}updateFallbackSlotVisibility(r)}}};var relocateNodes=[];var relocateSlotContent=function(e){var t;var r;var n;var a;var o;var s;var i=0;var l=e.childNodes;var $=l.length;for(;i<$;i++){t=l[i];if(t[\"s-sr\"]&&(r=t[\"s-cr\"])&&r.parentNode){n=r.parentNode.childNodes;a=t[\"s-sn\"];for(s=n.length-1;s>=0;s--){r=n[s];if(!r[\"s-cn\"]&&!r[\"s-nr\"]&&r[\"s-hn\"]!==t[\"s-hn\"]){if(isNodeLocatedInSlot(r,a)){o=relocateNodes.find((function(e){return e.$nodeToRelocate$===r}));checkSlotFallbackVisibility=true;r[\"s-sn\"]=r[\"s-sn\"]||a;if(o){o.$slotRefNode$=t}else{relocateNodes.push({$slotRefNode$:t,$nodeToRelocate$:r})}if(r[\"s-sr\"]){relocateNodes.map((function(e){if(isNodeLocatedInSlot(e.$nodeToRelocate$,r[\"s-sn\"])){o=relocateNodes.find((function(e){return e.$nodeToRelocate$===r}));if(o&&!e.$slotRefNode$){e.$slotRefNode$=o.$slotRefNode$}}}))}}else if(!relocateNodes.some((function(e){return e.$nodeToRelocate$===r}))){relocateNodes.push({$nodeToRelocate$:r})}}}}if(t.nodeType===1){relocateSlotContent(t)}}};var isNodeLocatedInSlot=function(e,t){if(e.nodeType===1){if(e.getAttribute(\"slot\")===null&&t===\"\"){return true}if(e.getAttribute(\"slot\")===t){return true}return false}if(e[\"s-sn\"]===t){return true}return t===\"\"};var callNodeRefs=function(e){{e.$attrs$&&e.$attrs$.ref&&e.$attrs$.ref(null);e.$children$&&e.$children$.map(callNodeRefs)}};var renderVdom=function(e,t){var r=e.$hostElement$;var n=e.$cmpMeta$;var a=e.$vnode$||newVNode(null,null);var o=isHost(t)?t:h(null,null,t);hostTagName=r.tagName;if(n.$attrsToReflect$){o.$attrs$=o.$attrs$||{};n.$attrsToReflect$.map((function(e){var t=e[0],n=e[1];return o.$attrs$[n]=r[t]}))}o.$tag$=null;o.$flags$|=4;e.$vnode$=o;o.$elm$=a.$elm$=r.shadowRoot||r;{scopeId=r[\"s-sc\"]}{contentRef=r[\"s-cr\"];useNativeShadowDom=supportsShadow&&(n.$flags$&1)!==0;checkSlotFallbackVisibility=false}patch(a,o);{plt.$flags$|=1;if(checkSlotRelocate){relocateSlotContent(o.$elm$);var s=void 0;var i=void 0;var l=void 0;var $=void 0;var c=void 0;var f=void 0;var u=0;for(;u<relocateNodes.length;u++){s=relocateNodes[u];i=s.$nodeToRelocate$;if(!i[\"s-ol\"]){l=doc.createTextNode(\"\");l[\"s-nr\"]=i;i.parentNode.insertBefore(i[\"s-ol\"]=l,i)}}for(u=0;u<relocateNodes.length;u++){s=relocateNodes[u];i=s.$nodeToRelocate$;if(s.$slotRefNode$){$=s.$slotRefNode$.parentNode;c=s.$slotRefNode$.nextSibling;l=i[\"s-ol\"];while(l=l.previousSibling){f=l[\"s-nr\"];if(f&&f[\"s-sn\"]===i[\"s-sn\"]&&$===f.parentNode){f=f.nextSibling;if(!f||!f[\"s-nr\"]){c=f;break}}}if(!c&&$!==i.parentNode||i.nextSibling!==c){if(i!==c){if(!i[\"s-hn\"]&&i[\"s-ol\"]){i[\"s-hn\"]=i[\"s-ol\"].parentNode.nodeName}$.insertBefore(i,c)}}}else{if(i.nodeType===1){i.hidden=true}}}}if(checkSlotFallbackVisibility){updateFallbackSlotVisibility(o.$elm$)}plt.$flags$&=~1;relocateNodes.length=0}};var getElement=function(e){return getHostRef(e).$hostElement$};var createEvent=function(e,t,r){var n=getElement(e);return{emit:function(e){return emitEvent(n,t,{bubbles:!!(r&4),composed:!!(r&2),cancelable:!!(r&1),detail:e})}}};var emitEvent=function(e,t,r){var n=plt.ce(t,r);e.dispatchEvent(n);return n};var attachToAncestor=function(e,t){if(t&&!e.$onRenderResolve$&&t[\"s-p\"]){t[\"s-p\"].push(new Promise((function(t){return e.$onRenderResolve$=t})))}};var scheduleUpdate=function(e,t){{e.$flags$|=16}if(e.$flags$&4){e.$flags$|=512;return}attachToAncestor(e,e.$ancestorComponent$);var r=function(){return dispatchHooks(e,t)};return writeTask(r)};var dispatchHooks=function(e,t){var r=createTime(\"scheduleUpdate\",e.$cmpMeta$.$tagName$);var n=e.$lazyInstance$;var a;if(t){{e.$flags$|=256;if(e.$queuedListeners$){e.$queuedListeners$.map((function(e){var t=e[0],r=e[1];return safeCall(n,t,r)}));e.$queuedListeners$=null}}{a=safeCall(n,\"componentWillLoad\")}}{a=then(a,(function(){return safeCall(n,\"componentWillRender\")}))}r();return then(a,(function(){return updateComponent(e,n,t)}))};var updateComponent=function(e,t,r){return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(void 0,void 0,void 0,(function(){var n,a,o,s,i,l;return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this,(function($){n=e.$hostElement$;a=createTime(\"update\",e.$cmpMeta$.$tagName$);o=n[\"s-rc\"];if(r){attachStyles(e)}s=createTime(\"render\",e.$cmpMeta$.$tagName$);{callRender(e,t)}if(plt.$cssShim$){plt.$cssShim$.updateHost(n)}if(o){o.map((function(e){return e()}));n[\"s-rc\"]=undefined}s();a();{i=n[\"s-p\"];l=function(){return postUpdateComponent(e)};if(i.length===0){l()}else{Promise.all(i).then(l);e.$flags$|=4;i.length=0}}return[2]}))}))};var callRender=function(e,t,r){try{t=t.render&&t.render();{e.$flags$&=~16}{e.$flags$|=2}{{{renderVdom(e,t)}}}}catch(n){consoleError(n,e.$hostElement$)}return null};var postUpdateComponent=function(e){var t=e.$cmpMeta$.$tagName$;var r=e.$hostElement$;var n=createTime(\"postUpdate\",t);var a=e.$lazyInstance$;var o=e.$ancestorComponent$;if(!(e.$flags$&64)){e.$flags$|=64;{addHydratedFlag(r)}{safeCall(a,\"componentDidLoad\")}n();{e.$onReadyResolve$(r);if(!o){appDidLoad()}}}else{{safeCall(a,\"componentDidUpdate\")}n()}{e.$onInstanceResolve$(r)}{if(e.$onRenderResolve$){e.$onRenderResolve$();e.$onRenderResolve$=undefined}if(e.$flags$&512){nextTick((function(){return scheduleUpdate(e,false)}))}e.$flags$&=~(4|512)}};var forceUpdate=function(e){{var t=getHostRef(e);var r=t.$hostElement$.isConnected;if(r&&(t.$flags$&(2|16))===2){scheduleUpdate(t,false)}return r}};var appDidLoad=function(e){{addHydratedFlag(doc.documentElement)}nextTick((function(){return emitEvent(win,\"appload\",{detail:{namespace:NAMESPACE}})}))};var safeCall=function(e,t,r){if(e&&e[t]){try{return e[t](r)}catch(n){consoleError(n)}}return undefined};var then=function(e,t){return e&&e.then?e.then(t):t()};var addHydratedFlag=function(e){return e.classList.add(\"hydrated\")};var initializeClientHydrate=function(e,t,r,n){var a=createTime(\"hydrateClient\",t);var o=e.shadowRoot;var s=[];var i=[];var l=o?[]:null;var $=n.$vnode$=newVNode(t,null);if(!plt.$orgLocNodes$){initializeDocumentHydrate(doc.body,plt.$orgLocNodes$=new Map)}e[HYDRATE_ID]=r;e.removeAttribute(HYDRATE_ID);clientHydrate($,s,i,l,e,e,r);s.map((function(e){var r=e.$hostId$+\".\"+e.$nodeId$;var n=plt.$orgLocNodes$.get(r);var a=e.$elm$;if(n&&supportsShadow&&n[\"s-en\"]===\"\"){n.parentNode.insertBefore(a,n.nextSibling)}if(!o){a[\"s-hn\"]=t;if(n){a[\"s-ol\"]=n;a[\"s-ol\"][\"s-nr\"]=a}}plt.$orgLocNodes$.delete(r)}));if(o){l.map((function(e){if(e){o.appendChild(e)}}))}a()};var clientHydrate=function(e,t,r,n,a,o,s){var i;var l;var $;var c;if(o.nodeType===1){i=o.getAttribute(HYDRATE_CHILD_ID);if(i){l=i.split(\".\");if(l[0]===s||l[0]===\"0\"){$={$flags$:0,$hostId$:l[0],$nodeId$:l[1],$depth$:l[2],$index$:l[3],$tag$:o.tagName.toLowerCase(),$elm$:o,$attrs$:null,$children$:null,$key$:null,$name$:null,$text$:null};t.push($);o.removeAttribute(HYDRATE_CHILD_ID);if(!e.$children$){e.$children$=[]}e.$children$[$.$index$]=$;e=$;if(n&&$.$depth$===\"0\"){n[$.$index$]=$.$elm$}}}for(c=o.childNodes.length-1;c>=0;c--){clientHydrate(e,t,r,n,a,o.childNodes[c],s)}if(o.shadowRoot){for(c=o.shadowRoot.childNodes.length-1;c>=0;c--){clientHydrate(e,t,r,n,a,o.shadowRoot.childNodes[c],s)}}}else if(o.nodeType===8){l=o.nodeValue.split(\".\");if(l[1]===s||l[1]===\"0\"){i=l[0];$={$flags$:0,$hostId$:l[1],$nodeId$:l[2],$depth$:l[3],$index$:l[4],$elm$:o,$attrs$:null,$children$:null,$key$:null,$name$:null,$tag$:null,$text$:null};if(i===TEXT_NODE_ID){$.$elm$=o.nextSibling;if($.$elm$&&$.$elm$.nodeType===3){$.$text$=$.$elm$.textContent;t.push($);o.remove();if(!e.$children$){e.$children$=[]}e.$children$[$.$index$]=$;if(n&&$.$depth$===\"0\"){n[$.$index$]=$.$elm$}}}else if($.$hostId$===s){if(i===SLOT_NODE_ID){$.$tag$=\"slot\";if(l[5]){o[\"s-sn\"]=$.$name$=l[5]}else{o[\"s-sn\"]=\"\"}o[\"s-sr\"]=true;if(n){$.$elm$=doc.createElement($.$tag$);if($.$name$){$.$elm$.setAttribute(\"name\",$.$name$)}o.parentNode.insertBefore($.$elm$,o);o.remove();if($.$depth$===\"0\"){n[$.$index$]=$.$elm$}}r.push($);if(!e.$children$){e.$children$=[]}e.$children$[$.$index$]=$}else if(i===CONTENT_REF_ID){if(n){o.remove()}else{a[\"s-cr\"]=o;o[\"s-cn\"]=true}}}}}else if(e&&e.$tag$===\"style\"){var f=newVNode(null,o.textContent);f.$elm$=o;f.$index$=\"0\";e.$children$=[f]}};var initializeDocumentHydrate=function(e,t){if(e.nodeType===1){var r=0;for(;r<e.childNodes.length;r++){initializeDocumentHydrate(e.childNodes[r],t)}if(e.shadowRoot){for(r=0;r<e.shadowRoot.childNodes.length;r++){initializeDocumentHydrate(e.shadowRoot.childNodes[r],t)}}}else if(e.nodeType===8){var n=e.nodeValue.split(\".\");if(n[0]===ORG_LOCATION_ID){t.set(n[1]+\".\"+n[2],e);e.nodeValue=\"\";e[\"s-en\"]=n[3]}}};var parsePropertyValue=function(e,t){if(e!=null&&!isComplexType(e)){if(t&4){return e===\"false\"?false:e===\"\"||!!e}if(t&2){return parseFloat(e)}if(t&1){return String(e)}return e}return e};var getValue=function(e,t){return getHostRef(e).$instanceValues$.get(t)};var setValue=function(e,t,r,n){var a=getHostRef(e);var o=a.$hostElement$;var s=a.$instanceValues$.get(t);var i=a.$flags$;var l=a.$lazyInstance$;r=parsePropertyValue(r,n.$members$[t][0]);if((!(i&8)||s===undefined)&&r!==s){a.$instanceValues$.set(t,r);if(l){if(n.$watchers$&&i&128){var $=n.$watchers$[t];if($){$.map((function(e){try{l[e](r,s,t)}catch(n){consoleError(n,o)}}))}}if((i&(2|16))===2){scheduleUpdate(a,false)}}}};var proxyComponent=function(e,t,r){if(t.$members$){if(e.watchers){t.$watchers$=e.watchers}var n=Object.entries(t.$members$);var a=e.prototype;n.map((function(e){var n=e[0],o=e[1][0];if(o&31||r&2&&o&32){Object.defineProperty(a,n,{get:function(){return getValue(this,n)},set:function(e){setValue(this,n,e,t)},configurable:true,enumerable:true})}else if(r&1&&o&64){Object.defineProperty(a,n,{value:function(){var e=[];for(var t=0;t<arguments.length;t++){e[t]=arguments[t]}var r=getHostRef(this);return r.$onInstancePromise$.then((function(){var t;return(t=r.$lazyInstance$)[n].apply(t,e)}))}})}}));if(r&1){var o=new Map;a.attributeChangedCallback=function(e,t,r){var n=this;plt.jmp((function(){var t=o.get(e);n[t]=r===null&&typeof n[t]===\"boolean\"?false:r}))};e.observedAttributes=n.filter((function(e){var t=e[0],r=e[1];return r[0]&15})).map((function(e){var r=e[0],n=e[1];var a=n[1]||r;o.set(a,r);if(n[0]&512){t.$attrsToReflect$.push([r,a])}return a}))}}return e};var initializeComponent=function(e,t,r,n,a){return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(void 0,void 0,void 0,(function(){var n,o,s,i,l,$,c;return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this,(function(f){switch(f.label){case 0:if(!((t.$flags$&32)===0))return[3,5];t.$flags$|=32;a=loadModule(r);if(!a.then)return[3,2];n=uniqueTime();return[4,a];case 1:a=f.sent();n();f.label=2;case 2:if(!a.isProxied){{r.$watchers$=a.watchers}proxyComponent(a,r,2);a.isProxied=true}o=createTime(\"createInstance\",r.$tagName$);{t.$flags$|=8}try{new a(t)}catch(u){consoleError(u)}{t.$flags$&=~8}{t.$flags$|=128}o();fireConnectedCallback(t.$lazyInstance$);if(!a.style)return[3,5];s=a.style;if(typeof s!==\"string\"){s=s[t.$modeName$=computeMode(e)]}i=getScopeId(r,t.$modeName$);if(!!styles.has(i))return[3,5];l=createTime(\"registerStyles\",r.$tagName$);if(!(r.$flags$&8))return[3,4];return[4,__webpack_require__.e(/*! import() */ \"node_modules_ionic_core_dist_esm-es5_shadow-css-a3f00b33_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./shadow-css-a3f00b33.js */ \"./node_modules/@ionic/core/dist/esm-es5/shadow-css-a3f00b33.js\")).then((function(e){return e.scopeCss(s,i,false)}))];case 3:s=f.sent();f.label=4;case 4:registerStyle(i,s,!!(r.$flags$&1));l();f.label=5;case 5:$=t.$ancestorComponent$;c=function(){return scheduleUpdate(t,true)};if($&&$[\"s-rc\"]){$[\"s-rc\"].push(c)}else{c()}return[2]}}))}))};var fireConnectedCallback=function(e){{safeCall(e,\"connectedCallback\")}};var connectedCallback=function(e){if((plt.$flags$&1)===0){var t=getHostRef(e);var r=t.$cmpMeta$;var n=createTime(\"connectedCallback\",r.$tagName$);if(!(t.$flags$&1)){t.$flags$|=1;var a=void 0;{a=e.getAttribute(HYDRATE_ID);if(a){if(supportsShadow&&r.$flags$&1){var o=addStyle(e.shadowRoot,r,e.getAttribute(\"s-mode\"));e.classList.remove(o+\"-h\",o+\"-s\")}initializeClientHydrate(e,r.$tagName$,a,t)}}if(!a){if(r.$flags$&(4|8)){setContentReference(e)}}{var s=e;while(s=s.parentNode||s.host){if(s.nodeType===1&&s.hasAttribute(\"s-id\")&&s[\"s-p\"]||s[\"s-p\"]){attachToAncestor(t,t.$ancestorComponent$=s);break}}}if(r.$members$){Object.entries(r.$members$).map((function(t){var r=t[0],n=t[1][0];if(n&31&&e.hasOwnProperty(r)){var a=e[r];delete e[r];e[r]=a}}))}{nextTick((function(){return initializeComponent(e,t,r)}))}}else{addHostEventListeners(e,t,r.$listeners$);fireConnectedCallback(t.$lazyInstance$)}n()}};var setContentReference=function(e){var t=e[\"s-cr\"]=doc.createComment(\"\");t[\"s-cn\"]=true;e.insertBefore(t,e.firstChild)};var disconnectedCallback=function(e){if((plt.$flags$&1)===0){var t=getHostRef(e);var r=t.$lazyInstance$;{if(t.$rmListeners$){t.$rmListeners$.map((function(e){return e()}));t.$rmListeners$=undefined}}if(plt.$cssShim$){plt.$cssShim$.removeHost(e)}{safeCall(r,\"disconnectedCallback\")}}};var bootstrapLazy=function(e,t){if(t===void 0){t={}}var r=createTime();var n=[];var a=t.exclude||[];var o=win.customElements;var s=doc.head;var i=s.querySelector(\"meta[charset]\");var l=doc.createElement(\"style\");var $=[];var c=doc.querySelectorAll(\"[\"+HYDRATED_STYLE_ID+\"]\");var f;var u=true;var d=0;Object.assign(plt,t);plt.$resourcesUrl$=new URL(t.resourcesUrl||\"./\",doc.baseURI).href;{plt.$flags$|=2}{for(;d<c.length;d++){registerStyle(c[d].getAttribute(HYDRATED_STYLE_ID),convertScopedToShadow(c[d].innerHTML),true)}}e.map((function(e){return e[1].map((function(t){var r={$flags$:t[0],$tagName$:t[1],$members$:t[2],$listeners$:t[3]};{r.$members$=t[2]}{r.$listeners$=t[3]}{r.$attrsToReflect$=[]}{r.$watchers$={}}if(!supportsShadow&&r.$flags$&1){r.$flags$|=8}var s=r.$tagName$;var i=function(e){(0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(t,e);function t(t){var n=e.call(this,t)||this;t=n;registerHost(t,r);if(r.$flags$&1){if(supportsShadow){{t.attachShadow({mode:\"open\",delegatesFocus:!!(r.$flags$&16)})}}else if(!(\"shadowRoot\"in t)){t.shadowRoot=t}}return n}t.prototype.connectedCallback=function(){var e=this;if(f){clearTimeout(f);f=null}if(u){$.push(this)}else{plt.jmp((function(){return connectedCallback(e)}))}};t.prototype.disconnectedCallback=function(){var e=this;plt.jmp((function(){return disconnectedCallback(e)}))};t.prototype.componentOnReady=function(){return getHostRef(this).$onReadyPromise$};return t}(HTMLElement);r.$lazyBundleId$=e[0];if(!a.includes(s)&&!o.get(s)){n.push(s);o.define(s,proxyComponent(i,r,1))}}))}));{l.innerHTML=n+HYDRATED_CSS;l.setAttribute(\"data-styles\",\"\");s.insertBefore(l,i?i.nextSibling:s.firstChild)}u=false;if($.length){$.map((function(e){return e.connectedCallback()}))}else{{plt.jmp((function(){return f=setTimeout(appDidLoad,30)}))}}r()};var getAssetPath=function(e){var t=new URL(e,plt.$resourcesUrl$);return t.origin!==win.location.origin?t.href:t.pathname};var hostRefs=new WeakMap;var getHostRef=function(e){return hostRefs.get(e)};var registerInstance=function(e,t){return hostRefs.set(t.$lazyInstance$=e,t)};var registerHost=function(e,t){var r={$flags$:0,$hostElement$:e,$cmpMeta$:t,$instanceValues$:new Map};{r.$onInstancePromise$=new Promise((function(e){return r.$onInstanceResolve$=e}))}{r.$onReadyPromise$=new Promise((function(e){return r.$onReadyResolve$=e}));e[\"s-p\"]=[];e[\"s-rc\"]=[]}addHostEventListeners(e,r,t.$listeners$);return hostRefs.set(e,r)};var isMemberInElement=function(e,t){return t in e};var consoleError=function(e,t){return(0,console.error)(e,t)};var cmpModules=new Map;var loadModule=function(e,t,r){var n=e.$tagName$.replace(/-/g,\"_\");var a=e.$lazyBundleId$;var o=cmpModules.get(a);if(o){return o[n]}return __webpack_require__(\"./node_modules/@ionic/core/dist/esm-es5 lazy recursive ^\\\\.\\\\/.*\\\\.entry\\\\.js$\")(\"./\"+a+\".entry.js\").then((function(e){{cmpModules.set(a,e)}return e[n]}),consoleError)};var styles=new Map;var modeResolutionChain=[];var queueDomReads=[];var queueDomWrites=[];var queueTask=function(e,t){return function(r){e.push(r);if(!queuePending){queuePending=true;if(t&&plt.$flags$&4){nextTick(flush)}else{plt.raf(flush)}}}};var consume=function(e){for(var t=0;t<e.length;t++){try{e[t](performance.now())}catch(r){consoleError(r)}}e.length=0};var flush=function(){consume(queueDomReads);{consume(queueDomWrites);if(queuePending=queueDomReads.length>0){plt.raf(flush)}}};var nextTick=function(e){return promiseResolve().then(e)};var readTask=queueTask(queueDomReads,false);var writeTask=queueTask(queueDomWrites,true);var Build={isDev:false,isBrowser:true,isServer:false,isTesting:false};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@ionic/core/dist/esm-es5/index-7a8b7a1c.js\n");

/***/ }),

/***/ "./node_modules/@ionic/core/dist/esm-es5/index-931440b1.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm-es5/index-931440b1.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"L\": () => (/* binding */ LIFECYCLE_WILL_ENTER),\n/* harmony export */   \"a\": () => (/* binding */ LIFECYCLE_DID_ENTER),\n/* harmony export */   \"b\": () => (/* binding */ LIFECYCLE_WILL_LEAVE),\n/* harmony export */   \"c\": () => (/* binding */ LIFECYCLE_DID_LEAVE),\n/* harmony export */   \"d\": () => (/* binding */ LIFECYCLE_WILL_UNLOAD),\n/* harmony export */   \"e\": () => (/* binding */ deepReady),\n/* harmony export */   \"g\": () => (/* binding */ getIonPageElement),\n/* harmony export */   \"l\": () => (/* binding */ lifecycle),\n/* harmony export */   \"s\": () => (/* binding */ setPageHidden),\n/* harmony export */   \"t\": () => (/* binding */ transition)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-7a8b7a1c.js */ \"./node_modules/@ionic/core/dist/esm-es5/index-7a8b7a1c.js\");\n/* harmony import */ var _helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers-dd7e4b7b.js */ \"./node_modules/@ionic/core/dist/esm-es5/helpers-dd7e4b7b.js\");\nvar LIFECYCLE_WILL_ENTER=\"ionViewWillEnter\";var LIFECYCLE_DID_ENTER=\"ionViewDidEnter\";var LIFECYCLE_WILL_LEAVE=\"ionViewWillLeave\";var LIFECYCLE_DID_LEAVE=\"ionViewDidLeave\";var LIFECYCLE_WILL_UNLOAD=\"ionViewWillUnload\";var iosTransitionAnimation=function(){return Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./ios.transition-12db6216.js */ \"./node_modules/@ionic/core/dist/esm-es5/ios.transition-12db6216.js\"))};var mdTransitionAnimation=function(){return Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./md.transition-eecd3a67.js */ \"./node_modules/@ionic/core/dist/esm-es5/md.transition-eecd3a67.js\"))};var transition=function(e){return new Promise((function(n,i){(0,_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__.c)((function(){beforeTransition(e);runTransition(e).then((function(i){if(i.animation){i.animation.destroy()}afterTransition(e);n(i)}),(function(n){afterTransition(e);i(n)}))}))}))};var beforeTransition=function(e){var n=e.enteringEl;var i=e.leavingEl;setZIndex(n,i,e.direction);if(e.showGoBack){n.classList.add(\"can-go-back\")}else{n.classList.remove(\"can-go-back\")}setPageHidden(n,false);n.style.setProperty(\"pointer-events\",\"none\");if(i){setPageHidden(i,false);i.style.setProperty(\"pointer-events\",\"none\")}};var runTransition=function(e){return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0,void 0,void 0,(function(){var n,i;return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this,(function(r){switch(r.label){case 0:return[4,getAnimationBuilder(e)];case 1:n=r.sent();i=n&&_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__.B.isBrowser?animation(n,e):noAnimation(e);return[2,i]}}))}))};var afterTransition=function(e){var n=e.enteringEl;var i=e.leavingEl;n.classList.remove(\"ion-page-invisible\");n.style.removeProperty(\"pointer-events\");if(i!==undefined){i.classList.remove(\"ion-page-invisible\");i.style.removeProperty(\"pointer-events\")}};var getAnimationBuilder=function(e){return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0,void 0,void 0,(function(){var n,i;return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this,(function(r){switch(r.label){case 0:if(!e.leavingEl||!e.animated||e.duration===0){return[2,undefined]}if(e.animationBuilder){return[2,e.animationBuilder]}if(!(e.mode===\"ios\"))return[3,2];return[4,iosTransitionAnimation()];case 1:i=r.sent().iosTransitionAnimation;return[3,4];case 2:return[4,mdTransitionAnimation()];case 3:i=r.sent().mdTransitionAnimation;r.label=4;case 4:n=i;return[2,n]}}))}))};var animation=function(e,n){return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0,void 0,void 0,(function(){var i,r;return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this,(function(t){switch(t.label){case 0:return[4,waitForReady(n,true)];case 1:t.sent();i=e(n.baseEl,n);fireWillEvents(n.enteringEl,n.leavingEl);return[4,playTransition(i,n)];case 2:r=t.sent();if(n.progressCallback){n.progressCallback(undefined)}if(r){fireDidEvents(n.enteringEl,n.leavingEl)}return[2,{hasCompleted:r,animation:i}]}}))}))};var noAnimation=function(e){return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0,void 0,void 0,(function(){var n,i;return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this,(function(r){switch(r.label){case 0:n=e.enteringEl;i=e.leavingEl;return[4,waitForReady(e,false)];case 1:r.sent();fireWillEvents(n,i);fireDidEvents(n,i);return[2,{hasCompleted:true}]}}))}))};var waitForReady=function(e,n){return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0,void 0,void 0,(function(){var i,r;return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this,(function(t){switch(t.label){case 0:i=e.deepWait!==undefined?e.deepWait:n;r=i?[deepReady(e.enteringEl),deepReady(e.leavingEl)]:[shallowReady(e.enteringEl),shallowReady(e.leavingEl)];return[4,Promise.all(r)];case 1:t.sent();return[4,notifyViewReady(e.viewIsReady,e.enteringEl)];case 2:t.sent();return[2]}}))}))};var notifyViewReady=function(e,n){return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0,void 0,void 0,(function(){return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this,(function(i){switch(i.label){case 0:if(!e)return[3,2];return[4,e(n)];case 1:i.sent();i.label=2;case 2:return[2]}}))}))};var playTransition=function(e,n){var i=n.progressCallback;var r=new Promise((function(n){e.onFinish((function(e){return n(e===1)}))}));if(i){e.progressStart(true);i(e)}else{e.play()}return r};var fireWillEvents=function(e,n){lifecycle(n,LIFECYCLE_WILL_LEAVE);lifecycle(e,LIFECYCLE_WILL_ENTER)};var fireDidEvents=function(e,n){lifecycle(e,LIFECYCLE_DID_ENTER);lifecycle(n,LIFECYCLE_DID_LEAVE)};var lifecycle=function(e,n){if(e){var i=new CustomEvent(n,{bubbles:false,cancelable:false});e.dispatchEvent(i)}};var shallowReady=function(e){if(e){return new Promise((function(n){return (0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_1__.c)(e,n)}))}return Promise.resolve()};var deepReady=function(e){return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0,void 0,void 0,(function(){var n,i;return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this,(function(r){switch(r.label){case 0:n=e;if(!n)return[3,4];if(!(n.componentOnReady!=null))return[3,2];return[4,n.componentOnReady()];case 1:i=r.sent();if(i!=null){return[2]}r.label=2;case 2:return[4,Promise.all(Array.from(n.children).map(deepReady))];case 3:r.sent();r.label=4;case 4:return[2]}}))}))};var setPageHidden=function(e,n){if(n){e.setAttribute(\"aria-hidden\",\"true\");e.classList.add(\"ion-page-hidden\")}else{e.hidden=false;e.removeAttribute(\"aria-hidden\");e.classList.remove(\"ion-page-hidden\")}};var setZIndex=function(e,n,i){if(e!==undefined){e.style.zIndex=i===\"back\"?\"99\":\"101\"}if(n!==undefined){n.style.zIndex=\"100\"}};var getIonPageElement=function(e){if(e.classList.contains(\"ion-page\")){return e}var n=e.querySelector(\":scope > .ion-page, :scope > ion-nav, :scope > ion-tabs\");if(n){return n}return e};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@ionic/core/dist/esm-es5/index-931440b1.js\n");

/***/ }),

/***/ "./node_modules/@ionic/core/dist/esm-es5/index-9e3fe806.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm-es5/index-9e3fe806.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"I\": () => (/* binding */ IonicSafeString),\n/* harmony export */   \"s\": () => (/* binding */ sanitizeDOMString)\n/* harmony export */ });\nvar sanitizeDOMString=function(e){try{if(e instanceof IonicSafeString){return e.value}if(!isSanitizerEnabled()||typeof e!==\"string\"||e===\"\"){return e}var r=document.createDocumentFragment();var n=document.createElement(\"div\");r.appendChild(n);n.innerHTML=e;blockedTags.forEach((function(e){var n=r.querySelectorAll(e);for(var t=n.length-1;t>=0;t--){var i=n[t];if(i.parentNode){i.parentNode.removeChild(i)}else{r.removeChild(i)}var a=getElementChildren(i);for(var l=0;l<a.length;l++){sanitizeElement(a[l])}}}));var t=getElementChildren(r);for(var i=0;i<t.length;i++){sanitizeElement(t[i])}var a=document.createElement(\"div\");a.appendChild(r);var l=a.querySelector(\"div\");return l!==null?l.innerHTML:a.innerHTML}catch(o){console.error(o);return\"\"}};var sanitizeElement=function(e){if(e.nodeType&&e.nodeType!==1){return}for(var r=e.attributes.length-1;r>=0;r--){var n=e.attributes.item(r);var t=n.name;if(!allowedAttributes.includes(t.toLowerCase())){e.removeAttribute(t);continue}var i=n.value;if(i!=null&&i.toLowerCase().includes(\"javascript:\")){e.removeAttribute(t)}}var a=getElementChildren(e);for(var r=0;r<a.length;r++){sanitizeElement(a[r])}};var getElementChildren=function(e){return e.children!=null?e.children:e.childNodes};var isSanitizerEnabled=function(){var e=window;var r=e&&e.Ionic&&e.Ionic.config;if(r){if(r.get){return r.get(\"sanitizerEnabled\",true)}else{return r.sanitizerEnabled===true||r.sanitizerEnabled===undefined}}return true};var allowedAttributes=[\"class\",\"id\",\"href\",\"src\",\"name\",\"slot\"];var blockedTags=[\"script\",\"style\",\"iframe\",\"meta\",\"link\",\"object\",\"embed\"];var IonicSafeString=function(){function e(e){this.value=e}return e}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvZGlzdC9lc20tZXM1L2luZGV4LTllM2ZlODA2LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsa0NBQWtDLElBQUksaUNBQWlDLGVBQWUsdURBQXVELFNBQVMsd0NBQXdDLG9DQUFvQyxpQkFBaUIsY0FBYyxpQ0FBaUMsNEJBQTRCLHFCQUFxQixLQUFLLEtBQUssV0FBVyxpQkFBaUIsNEJBQTRCLEtBQUssaUJBQWlCLDRCQUE0QixZQUFZLFdBQVcsS0FBSyx3QkFBd0IsR0FBRyw0QkFBNEIsWUFBWSxXQUFXLEtBQUssc0JBQXNCLG9DQUFvQyxpQkFBaUIsNkJBQTZCLHdDQUF3QyxTQUFTLGlCQUFpQixXQUFXLGdDQUFnQywrQkFBK0IsT0FBTyxnQ0FBZ0MsS0FBSyxLQUFLLDJCQUEyQixhQUFhLGlEQUFpRCxxQkFBcUIsU0FBUyxjQUFjLHFEQUFxRCxzQkFBc0IsNEJBQTRCLFlBQVksV0FBVyxLQUFLLHdCQUF3QixtQ0FBbUMsaURBQWlELGtDQUFrQyxhQUFhLGlDQUFpQyxNQUFNLFVBQVUsc0NBQXNDLEtBQUssa0VBQWtFLGFBQWEsZ0VBQWdFLDJFQUEyRSwrQkFBK0IsY0FBYyxhQUFhLFNBQVMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvZGlzdC9lc20tZXM1L2luZGV4LTllM2ZlODA2LmpzPzIxOTYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHNhbml0aXplRE9NU3RyaW5nPWZ1bmN0aW9uKGUpe3RyeXtpZihlIGluc3RhbmNlb2YgSW9uaWNTYWZlU3RyaW5nKXtyZXR1cm4gZS52YWx1ZX1pZighaXNTYW5pdGl6ZXJFbmFibGVkKCl8fHR5cGVvZiBlIT09XCJzdHJpbmdcInx8ZT09PVwiXCIpe3JldHVybiBlfXZhciByPWRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTt2YXIgbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3IuYXBwZW5kQ2hpbGQobik7bi5pbm5lckhUTUw9ZTtibG9ja2VkVGFncy5mb3JFYWNoKChmdW5jdGlvbihlKXt2YXIgbj1yLnF1ZXJ5U2VsZWN0b3JBbGwoZSk7Zm9yKHZhciB0PW4ubGVuZ3RoLTE7dD49MDt0LS0pe3ZhciBpPW5bdF07aWYoaS5wYXJlbnROb2RlKXtpLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaSl9ZWxzZXtyLnJlbW92ZUNoaWxkKGkpfXZhciBhPWdldEVsZW1lbnRDaGlsZHJlbihpKTtmb3IodmFyIGw9MDtsPGEubGVuZ3RoO2wrKyl7c2FuaXRpemVFbGVtZW50KGFbbF0pfX19KSk7dmFyIHQ9Z2V0RWxlbWVudENoaWxkcmVuKHIpO2Zvcih2YXIgaT0wO2k8dC5sZW5ndGg7aSsrKXtzYW5pdGl6ZUVsZW1lbnQodFtpXSl9dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTthLmFwcGVuZENoaWxkKHIpO3ZhciBsPWEucXVlcnlTZWxlY3RvcihcImRpdlwiKTtyZXR1cm4gbCE9PW51bGw/bC5pbm5lckhUTUw6YS5pbm5lckhUTUx9Y2F0Y2gobyl7Y29uc29sZS5lcnJvcihvKTtyZXR1cm5cIlwifX07dmFyIHNhbml0aXplRWxlbWVudD1mdW5jdGlvbihlKXtpZihlLm5vZGVUeXBlJiZlLm5vZGVUeXBlIT09MSl7cmV0dXJufWZvcih2YXIgcj1lLmF0dHJpYnV0ZXMubGVuZ3RoLTE7cj49MDtyLS0pe3ZhciBuPWUuYXR0cmlidXRlcy5pdGVtKHIpO3ZhciB0PW4ubmFtZTtpZighYWxsb3dlZEF0dHJpYnV0ZXMuaW5jbHVkZXModC50b0xvd2VyQ2FzZSgpKSl7ZS5yZW1vdmVBdHRyaWJ1dGUodCk7Y29udGludWV9dmFyIGk9bi52YWx1ZTtpZihpIT1udWxsJiZpLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoXCJqYXZhc2NyaXB0OlwiKSl7ZS5yZW1vdmVBdHRyaWJ1dGUodCl9fXZhciBhPWdldEVsZW1lbnRDaGlsZHJlbihlKTtmb3IodmFyIHI9MDtyPGEubGVuZ3RoO3IrKyl7c2FuaXRpemVFbGVtZW50KGFbcl0pfX07dmFyIGdldEVsZW1lbnRDaGlsZHJlbj1mdW5jdGlvbihlKXtyZXR1cm4gZS5jaGlsZHJlbiE9bnVsbD9lLmNoaWxkcmVuOmUuY2hpbGROb2Rlc307dmFyIGlzU2FuaXRpemVyRW5hYmxlZD1mdW5jdGlvbigpe3ZhciBlPXdpbmRvdzt2YXIgcj1lJiZlLklvbmljJiZlLklvbmljLmNvbmZpZztpZihyKXtpZihyLmdldCl7cmV0dXJuIHIuZ2V0KFwic2FuaXRpemVyRW5hYmxlZFwiLHRydWUpfWVsc2V7cmV0dXJuIHIuc2FuaXRpemVyRW5hYmxlZD09PXRydWV8fHIuc2FuaXRpemVyRW5hYmxlZD09PXVuZGVmaW5lZH19cmV0dXJuIHRydWV9O3ZhciBhbGxvd2VkQXR0cmlidXRlcz1bXCJjbGFzc1wiLFwiaWRcIixcImhyZWZcIixcInNyY1wiLFwibmFtZVwiLFwic2xvdFwiXTt2YXIgYmxvY2tlZFRhZ3M9W1wic2NyaXB0XCIsXCJzdHlsZVwiLFwiaWZyYW1lXCIsXCJtZXRhXCIsXCJsaW5rXCIsXCJvYmplY3RcIixcImVtYmVkXCJdO3ZhciBJb25pY1NhZmVTdHJpbmc9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3RoaXMudmFsdWU9ZX1yZXR1cm4gZX0oKTtleHBvcnR7SW9uaWNTYWZlU3RyaW5nIGFzIEksc2FuaXRpemVET01TdHJpbmcgYXMgc307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@ionic/core/dist/esm-es5/index-9e3fe806.js\n");

/***/ }),

/***/ "./node_modules/@ionic/core/dist/esm-es5/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm-es5/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createAnimation\": () => (/* reexport safe */ _animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   \"iosTransitionAnimation\": () => (/* reexport safe */ _ios_transition_12db6216_js__WEBPACK_IMPORTED_MODULE_1__.iosTransitionAnimation),\n/* harmony export */   \"mdTransitionAnimation\": () => (/* reexport safe */ _md_transition_eecd3a67_js__WEBPACK_IMPORTED_MODULE_2__.mdTransitionAnimation),\n/* harmony export */   \"getTimeGivenProgression\": () => (/* reexport safe */ _cubic_bezier_eea9a7a9_js__WEBPACK_IMPORTED_MODULE_3__.g),\n/* harmony export */   \"createGesture\": () => (/* reexport safe */ _index_34cb2743_js__WEBPACK_IMPORTED_MODULE_4__.createGesture),\n/* harmony export */   \"getPlatforms\": () => (/* reexport safe */ _ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_5__.g),\n/* harmony export */   \"initialize\": () => (/* reexport safe */ _ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_5__.i),\n/* harmony export */   \"isPlatform\": () => (/* reexport safe */ _ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_5__.a),\n/* harmony export */   \"componentOnReady\": () => (/* reexport safe */ _helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_6__.c),\n/* harmony export */   \"IonicSafeString\": () => (/* reexport safe */ _index_9e3fe806_js__WEBPACK_IMPORTED_MODULE_7__.I),\n/* harmony export */   \"LIFECYCLE_DID_ENTER\": () => (/* reexport safe */ _index_931440b1_js__WEBPACK_IMPORTED_MODULE_8__.a),\n/* harmony export */   \"LIFECYCLE_DID_LEAVE\": () => (/* reexport safe */ _index_931440b1_js__WEBPACK_IMPORTED_MODULE_8__.c),\n/* harmony export */   \"LIFECYCLE_WILL_ENTER\": () => (/* reexport safe */ _index_931440b1_js__WEBPACK_IMPORTED_MODULE_8__.L),\n/* harmony export */   \"LIFECYCLE_WILL_LEAVE\": () => (/* reexport safe */ _index_931440b1_js__WEBPACK_IMPORTED_MODULE_8__.b),\n/* harmony export */   \"LIFECYCLE_WILL_UNLOAD\": () => (/* reexport safe */ _index_931440b1_js__WEBPACK_IMPORTED_MODULE_8__.d),\n/* harmony export */   \"menuController\": () => (/* reexport safe */ _index_0d58a5bf_js__WEBPACK_IMPORTED_MODULE_9__.m),\n/* harmony export */   \"actionSheetController\": () => (/* reexport safe */ _overlays_e9ccff30_js__WEBPACK_IMPORTED_MODULE_10__.b),\n/* harmony export */   \"alertController\": () => (/* reexport safe */ _overlays_e9ccff30_js__WEBPACK_IMPORTED_MODULE_10__.a),\n/* harmony export */   \"loadingController\": () => (/* reexport safe */ _overlays_e9ccff30_js__WEBPACK_IMPORTED_MODULE_10__.l),\n/* harmony export */   \"modalController\": () => (/* reexport safe */ _overlays_e9ccff30_js__WEBPACK_IMPORTED_MODULE_10__.m),\n/* harmony export */   \"pickerController\": () => (/* reexport safe */ _overlays_e9ccff30_js__WEBPACK_IMPORTED_MODULE_10__.p),\n/* harmony export */   \"popoverController\": () => (/* reexport safe */ _overlays_e9ccff30_js__WEBPACK_IMPORTED_MODULE_10__.c),\n/* harmony export */   \"toastController\": () => (/* reexport safe */ _overlays_e9ccff30_js__WEBPACK_IMPORTED_MODULE_10__.t),\n/* harmony export */   \"IonicSlides\": () => (/* binding */ IonicSlides),\n/* harmony export */   \"IonicSwiper\": () => (/* binding */ IonicSwiper),\n/* harmony export */   \"getMode\": () => (/* binding */ getMode),\n/* harmony export */   \"setupConfig\": () => (/* binding */ setupConfig)\n/* harmony export */ });\n/* harmony import */ var _animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./animation-096c6391.js */ \"./node_modules/@ionic/core/dist/esm-es5/animation-096c6391.js\");\n/* harmony import */ var _ios_transition_12db6216_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ios.transition-12db6216.js */ \"./node_modules/@ionic/core/dist/esm-es5/ios.transition-12db6216.js\");\n/* harmony import */ var _md_transition_eecd3a67_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./md.transition-eecd3a67.js */ \"./node_modules/@ionic/core/dist/esm-es5/md.transition-eecd3a67.js\");\n/* harmony import */ var _cubic_bezier_eea9a7a9_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cubic-bezier-eea9a7a9.js */ \"./node_modules/@ionic/core/dist/esm-es5/cubic-bezier-eea9a7a9.js\");\n/* harmony import */ var _index_34cb2743_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./index-34cb2743.js */ \"./node_modules/@ionic/core/dist/esm-es5/index-34cb2743.js\");\n/* harmony import */ var _ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ionic-global-63a97a32.js */ \"./node_modules/@ionic/core/dist/esm-es5/ionic-global-63a97a32.js\");\n/* harmony import */ var _helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./helpers-dd7e4b7b.js */ \"./node_modules/@ionic/core/dist/esm-es5/helpers-dd7e4b7b.js\");\n/* harmony import */ var _index_9e3fe806_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./index-9e3fe806.js */ \"./node_modules/@ionic/core/dist/esm-es5/index-9e3fe806.js\");\n/* harmony import */ var _index_931440b1_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./index-931440b1.js */ \"./node_modules/@ionic/core/dist/esm-es5/index-931440b1.js\");\n/* harmony import */ var _index_0d58a5bf_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./index-0d58a5bf.js */ \"./node_modules/@ionic/core/dist/esm-es5/index-0d58a5bf.js\");\n/* harmony import */ var _overlays_e9ccff30_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./overlays-e9ccff30.js */ \"./node_modules/@ionic/core/dist/esm-es5/overlays-e9ccff30.js\");\n/* harmony import */ var _gesture_controller_31cb6bb9_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./gesture-controller-31cb6bb9.js */ \"./node_modules/@ionic/core/dist/esm-es5/gesture-controller-31cb6bb9.js\");\n/* harmony import */ var _index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./index-7a8b7a1c.js */ \"./node_modules/@ionic/core/dist/esm-es5/index-7a8b7a1c.js\");\n/* harmony import */ var _hardware_back_button_4a6b37fb_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./hardware-back-button-4a6b37fb.js */ \"./node_modules/@ionic/core/dist/esm-es5/hardware-back-button-4a6b37fb.js\");\nvar setupConfig=function(e){var i=window;var o=i.Ionic;if(o&&o.config&&o.config.constructor.name!==\"Object\"){return}i.Ionic=i.Ionic||{};i.Ionic.config=Object.assign(Object.assign({},i.Ionic.config),e);return i.Ionic.config};var getMode=function(){var e=window;var i=e&&e.Ionic&&e.Ionic.config;if(i){if(i.mode){return i.mode}else{return i.get(\"mode\")}}return\"md\"};var setupSwiperInIonic=function(e,i){if(i===void 0){i=true}if(typeof window===\"undefined\"){return}var o=e.el;var t=o.closest(\".ion-page\");if(!t){if(i){var r=o.getRootNode();if(r.tagName===\"DIV\"){var a=new MutationObserver((function(i){var o=i[0];var t=o.oldValue===null;var s=r.classList.contains(\"ion-page\");if(t&&s){a.disconnect();setupSwiperInIonic(e,false)}}));a.observe(r,{attributeFilter:[\"class\"],attributeOldValue:true})}}return}var s=o.closest(\"ion-modal, ion-popover\");if(s){var n=s.tagName===\"ION-MODAL\"?\"ionModalWillPresent\":\"ionPopoverWillPresent\";var l=function(){(0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_6__.r)((function(){o.swiper.update();(0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_6__.b)(s,n,l)}))};(0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_6__.a)(s,n,l)}else{var d=new MutationObserver((function(e){var i;var r=e[0];var a=(i=r.oldValue)===null||i===void 0?void 0:i.includes(\"ion-page-invisible\");var s=t.classList.contains(\"ion-page-invisible\");if(!s&&s!==a){o.swiper.update()}}));d.observe(t,{attributeFilter:[\"class\"],attributeOldValue:true})}var c=function(){o.swiper.update();(0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_6__.b)(window,\"appload\",c)};(0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_6__.a)(window,\"appload\",c)};var IonicSwiper={name:\"ionic\",on:{afterInit:function(e){console.warn(\"[Deprecation Warning]: The IonicSwiper module has been deprecated in favor of the IonSlides module. This change was made to better support the Swiper 7 release. The IonicSwiper module will be removed in Ionic 7.0. See https://ionicframework.com/docs/api/slides#migration for revised migration steps.\");setupSwiperInIonic(e)}}};var IonicSlides=function(e){var i=e.swiper,o=e.extendParams;var t={effect:undefined,direction:\"horizontal\",initialSlide:0,loop:false,parallax:false,slidesPerView:1,spaceBetween:0,speed:300,slidesPerColumn:1,slidesPerColumnFill:\"column\",slidesPerGroup:1,centeredSlides:false,slidesOffsetBefore:0,slidesOffsetAfter:0,touchEventsTarget:\"container\",autoplay:false,freeMode:false,freeModeMomentum:true,freeModeMomentumRatio:1,freeModeMomentumBounce:true,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:false,freeModeMinimumVelocity:.02,autoHeight:false,setWrapperSize:false,zoom:{maxRatio:3,minRatio:1,toggle:false},touchRatio:1,touchAngle:45,simulateTouch:true,touchStartPreventDefault:false,shortSwipes:true,longSwipes:true,longSwipesRatio:.5,longSwipesMs:300,followFinger:true,threshold:0,touchMoveStopPropagation:true,touchReleaseOnEdges:false,iOSEdgeSwipeDetection:false,iOSEdgeSwipeThreshold:20,resistance:true,resistanceRatio:.85,watchSlidesProgress:false,watchSlidesVisibility:false,preventClicks:true,preventClicksPropagation:true,slideToClickedSlide:false,loopAdditionalSlides:0,noSwiping:true,runCallbacksOnInit:true,coverflowEffect:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:true},flipEffect:{slideShadows:true,limitRotation:true},cubeEffect:{slideShadows:true,shadow:true,shadowOffset:20,shadowScale:.94},fadeEffect:{crossFade:false},a11y:{prevSlideMessage:\"Previous slide\",nextSlideMessage:\"Next slide\",firstSlideMessage:\"This is the first slide\",lastSlideMessage:\"This is the last slide\"}};if(i.pagination){t.pagination={type:\"bullets\",clickable:false,hideOnClick:false}}if(i.scrollbar){t.scrollbar={hide:true}}o(t)};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvZGlzdC9lc20tZXM1L2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTJsQyw0QkFBNEIsYUFBYSxjQUFjLHNEQUFzRCxPQUFPLG9CQUFvQiw2Q0FBNkMsb0JBQW9CLHVCQUF1Qix1QkFBdUIsYUFBYSxpQ0FBaUMsTUFBTSxXQUFXLGNBQWMsS0FBSyxzQkFBc0IsWUFBWSxxQ0FBcUMsZUFBZSxPQUFPLGdDQUFnQyxPQUFPLFdBQVcsNkJBQTZCLE9BQU8sTUFBTSxzQkFBc0Isc0JBQXNCLHdDQUF3QyxXQUFXLHdCQUF3Qix1Q0FBdUMsU0FBUyxlQUFlLDZCQUE2QixHQUFHLGFBQWEsaURBQWlELEdBQUcsT0FBTywwQ0FBMEMsTUFBTSw0RUFBNEUsaUJBQWlCLHVEQUFHLGFBQWEsa0JBQWtCLHVEQUFtQixRQUFRLElBQUksdURBQWdCLFFBQVEsS0FBSyx3Q0FBd0MsTUFBTSxXQUFXLGdGQUFnRixpREFBaUQsY0FBYyxtQkFBbUIsR0FBRyxhQUFhLGlEQUFpRCxFQUFFLGlCQUFpQixrQkFBa0IsdURBQW1CLHNCQUFzQix1REFBZ0Isc0JBQXNCLGlCQUFpQixpQkFBaUIsc0JBQXNCLDRUQUE0VCx5QkFBeUIsNEJBQTRCLGdDQUFnQyxPQUFPLHloQkFBeWhCLG1DQUFtQyxraEJBQWtoQiwyREFBMkQsYUFBYSxxQ0FBcUMsYUFBYSw4REFBOEQsYUFBYSxnQkFBZ0IsT0FBTyx3SkFBd0osaUJBQWlCLGNBQWMsa0RBQWtELGdCQUFnQixhQUFhLFdBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvZGlzdC9lc20tZXM1L2luZGV4LmpzPzYyNmMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0e2MgYXMgY3JlYXRlQW5pbWF0aW9ufWZyb21cIi4vYW5pbWF0aW9uLTA5NmM2MzkxLmpzXCI7ZXhwb3J0e2lvc1RyYW5zaXRpb25BbmltYXRpb259ZnJvbVwiLi9pb3MudHJhbnNpdGlvbi0xMmRiNjIxNi5qc1wiO2V4cG9ydHttZFRyYW5zaXRpb25BbmltYXRpb259ZnJvbVwiLi9tZC50cmFuc2l0aW9uLWVlY2QzYTY3LmpzXCI7ZXhwb3J0e2cgYXMgZ2V0VGltZUdpdmVuUHJvZ3Jlc3Npb259ZnJvbVwiLi9jdWJpYy1iZXppZXItZWVhOWE3YTkuanNcIjtleHBvcnR7Y3JlYXRlR2VzdHVyZX1mcm9tXCIuL2luZGV4LTM0Y2IyNzQzLmpzXCI7ZXhwb3J0e2cgYXMgZ2V0UGxhdGZvcm1zLGkgYXMgaW5pdGlhbGl6ZSxhIGFzIGlzUGxhdGZvcm19ZnJvbVwiLi9pb25pYy1nbG9iYWwtNjNhOTdhMzIuanNcIjtpbXBvcnR7YSBhcyBhZGRFdmVudExpc3RlbmVyLHIgYXMgcmFmLGIgYXMgcmVtb3ZlRXZlbnRMaXN0ZW5lcn1mcm9tXCIuL2hlbHBlcnMtZGQ3ZTRiN2IuanNcIjtleHBvcnR7YyBhcyBjb21wb25lbnRPblJlYWR5fWZyb21cIi4vaGVscGVycy1kZDdlNGI3Yi5qc1wiO2V4cG9ydHtJIGFzIElvbmljU2FmZVN0cmluZ31mcm9tXCIuL2luZGV4LTllM2ZlODA2LmpzXCI7ZXhwb3J0e2EgYXMgTElGRUNZQ0xFX0RJRF9FTlRFUixjIGFzIExJRkVDWUNMRV9ESURfTEVBVkUsTCBhcyBMSUZFQ1lDTEVfV0lMTF9FTlRFUixiIGFzIExJRkVDWUNMRV9XSUxMX0xFQVZFLGQgYXMgTElGRUNZQ0xFX1dJTExfVU5MT0FEfWZyb21cIi4vaW5kZXgtOTMxNDQwYjEuanNcIjtleHBvcnR7bSBhcyBtZW51Q29udHJvbGxlcn1mcm9tXCIuL2luZGV4LTBkNThhNWJmLmpzXCI7ZXhwb3J0e2IgYXMgYWN0aW9uU2hlZXRDb250cm9sbGVyLGEgYXMgYWxlcnRDb250cm9sbGVyLGwgYXMgbG9hZGluZ0NvbnRyb2xsZXIsbSBhcyBtb2RhbENvbnRyb2xsZXIscCBhcyBwaWNrZXJDb250cm9sbGVyLGMgYXMgcG9wb3ZlckNvbnRyb2xsZXIsdCBhcyB0b2FzdENvbnRyb2xsZXJ9ZnJvbVwiLi9vdmVybGF5cy1lOWNjZmYzMC5qc1wiO2ltcG9ydFwiLi9nZXN0dXJlLWNvbnRyb2xsZXItMzFjYjZiYjkuanNcIjtpbXBvcnRcIi4vaW5kZXgtN2E4YjdhMWMuanNcIjtpbXBvcnRcIi4vaGFyZHdhcmUtYmFjay1idXR0b24tNGE2YjM3ZmIuanNcIjt2YXIgc2V0dXBDb25maWc9ZnVuY3Rpb24oZSl7dmFyIGk9d2luZG93O3ZhciBvPWkuSW9uaWM7aWYobyYmby5jb25maWcmJm8uY29uZmlnLmNvbnN0cnVjdG9yLm5hbWUhPT1cIk9iamVjdFwiKXtyZXR1cm59aS5Jb25pYz1pLklvbmljfHx7fTtpLklvbmljLmNvbmZpZz1PYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30saS5Jb25pYy5jb25maWcpLGUpO3JldHVybiBpLklvbmljLmNvbmZpZ307dmFyIGdldE1vZGU9ZnVuY3Rpb24oKXt2YXIgZT13aW5kb3c7dmFyIGk9ZSYmZS5Jb25pYyYmZS5Jb25pYy5jb25maWc7aWYoaSl7aWYoaS5tb2RlKXtyZXR1cm4gaS5tb2RlfWVsc2V7cmV0dXJuIGkuZ2V0KFwibW9kZVwiKX19cmV0dXJuXCJtZFwifTt2YXIgc2V0dXBTd2lwZXJJbklvbmljPWZ1bmN0aW9uKGUsaSl7aWYoaT09PXZvaWQgMCl7aT10cnVlfWlmKHR5cGVvZiB3aW5kb3c9PT1cInVuZGVmaW5lZFwiKXtyZXR1cm59dmFyIG89ZS5lbDt2YXIgdD1vLmNsb3Nlc3QoXCIuaW9uLXBhZ2VcIik7aWYoIXQpe2lmKGkpe3ZhciByPW8uZ2V0Um9vdE5vZGUoKTtpZihyLnRhZ05hbWU9PT1cIkRJVlwiKXt2YXIgYT1uZXcgTXV0YXRpb25PYnNlcnZlcigoZnVuY3Rpb24oaSl7dmFyIG89aVswXTt2YXIgdD1vLm9sZFZhbHVlPT09bnVsbDt2YXIgcz1yLmNsYXNzTGlzdC5jb250YWlucyhcImlvbi1wYWdlXCIpO2lmKHQmJnMpe2EuZGlzY29ubmVjdCgpO3NldHVwU3dpcGVySW5Jb25pYyhlLGZhbHNlKX19KSk7YS5vYnNlcnZlKHIse2F0dHJpYnV0ZUZpbHRlcjpbXCJjbGFzc1wiXSxhdHRyaWJ1dGVPbGRWYWx1ZTp0cnVlfSl9fXJldHVybn12YXIgcz1vLmNsb3Nlc3QoXCJpb24tbW9kYWwsIGlvbi1wb3BvdmVyXCIpO2lmKHMpe3ZhciBuPXMudGFnTmFtZT09PVwiSU9OLU1PREFMXCI/XCJpb25Nb2RhbFdpbGxQcmVzZW50XCI6XCJpb25Qb3BvdmVyV2lsbFByZXNlbnRcIjt2YXIgbD1mdW5jdGlvbigpe3JhZigoZnVuY3Rpb24oKXtvLnN3aXBlci51cGRhdGUoKTtyZW1vdmVFdmVudExpc3RlbmVyKHMsbixsKX0pKX07YWRkRXZlbnRMaXN0ZW5lcihzLG4sbCl9ZWxzZXt2YXIgZD1uZXcgTXV0YXRpb25PYnNlcnZlcigoZnVuY3Rpb24oZSl7dmFyIGk7dmFyIHI9ZVswXTt2YXIgYT0oaT1yLm9sZFZhbHVlKT09PW51bGx8fGk9PT12b2lkIDA/dm9pZCAwOmkuaW5jbHVkZXMoXCJpb24tcGFnZS1pbnZpc2libGVcIik7dmFyIHM9dC5jbGFzc0xpc3QuY29udGFpbnMoXCJpb24tcGFnZS1pbnZpc2libGVcIik7aWYoIXMmJnMhPT1hKXtvLnN3aXBlci51cGRhdGUoKX19KSk7ZC5vYnNlcnZlKHQse2F0dHJpYnV0ZUZpbHRlcjpbXCJjbGFzc1wiXSxhdHRyaWJ1dGVPbGRWYWx1ZTp0cnVlfSl9dmFyIGM9ZnVuY3Rpb24oKXtvLnN3aXBlci51cGRhdGUoKTtyZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdyxcImFwcGxvYWRcIixjKX07YWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csXCJhcHBsb2FkXCIsYyl9O3ZhciBJb25pY1N3aXBlcj17bmFtZTpcImlvbmljXCIsb246e2FmdGVySW5pdDpmdW5jdGlvbihlKXtjb25zb2xlLndhcm4oXCJbRGVwcmVjYXRpb24gV2FybmluZ106IFRoZSBJb25pY1N3aXBlciBtb2R1bGUgaGFzIGJlZW4gZGVwcmVjYXRlZCBpbiBmYXZvciBvZiB0aGUgSW9uU2xpZGVzIG1vZHVsZS4gVGhpcyBjaGFuZ2Ugd2FzIG1hZGUgdG8gYmV0dGVyIHN1cHBvcnQgdGhlIFN3aXBlciA3IHJlbGVhc2UuIFRoZSBJb25pY1N3aXBlciBtb2R1bGUgd2lsbCBiZSByZW1vdmVkIGluIElvbmljIDcuMC4gU2VlIGh0dHBzOi8vaW9uaWNmcmFtZXdvcmsuY29tL2RvY3MvYXBpL3NsaWRlcyNtaWdyYXRpb24gZm9yIHJldmlzZWQgbWlncmF0aW9uIHN0ZXBzLlwiKTtzZXR1cFN3aXBlckluSW9uaWMoZSl9fX07dmFyIElvbmljU2xpZGVzPWZ1bmN0aW9uKGUpe3ZhciBpPWUuc3dpcGVyLG89ZS5leHRlbmRQYXJhbXM7dmFyIHQ9e2VmZmVjdDp1bmRlZmluZWQsZGlyZWN0aW9uOlwiaG9yaXpvbnRhbFwiLGluaXRpYWxTbGlkZTowLGxvb3A6ZmFsc2UscGFyYWxsYXg6ZmFsc2Usc2xpZGVzUGVyVmlldzoxLHNwYWNlQmV0d2VlbjowLHNwZWVkOjMwMCxzbGlkZXNQZXJDb2x1bW46MSxzbGlkZXNQZXJDb2x1bW5GaWxsOlwiY29sdW1uXCIsc2xpZGVzUGVyR3JvdXA6MSxjZW50ZXJlZFNsaWRlczpmYWxzZSxzbGlkZXNPZmZzZXRCZWZvcmU6MCxzbGlkZXNPZmZzZXRBZnRlcjowLHRvdWNoRXZlbnRzVGFyZ2V0OlwiY29udGFpbmVyXCIsYXV0b3BsYXk6ZmFsc2UsZnJlZU1vZGU6ZmFsc2UsZnJlZU1vZGVNb21lbnR1bTp0cnVlLGZyZWVNb2RlTW9tZW50dW1SYXRpbzoxLGZyZWVNb2RlTW9tZW50dW1Cb3VuY2U6dHJ1ZSxmcmVlTW9kZU1vbWVudHVtQm91bmNlUmF0aW86MSxmcmVlTW9kZU1vbWVudHVtVmVsb2NpdHlSYXRpbzoxLGZyZWVNb2RlU3RpY2t5OmZhbHNlLGZyZWVNb2RlTWluaW11bVZlbG9jaXR5Oi4wMixhdXRvSGVpZ2h0OmZhbHNlLHNldFdyYXBwZXJTaXplOmZhbHNlLHpvb206e21heFJhdGlvOjMsbWluUmF0aW86MSx0b2dnbGU6ZmFsc2V9LHRvdWNoUmF0aW86MSx0b3VjaEFuZ2xlOjQ1LHNpbXVsYXRlVG91Y2g6dHJ1ZSx0b3VjaFN0YXJ0UHJldmVudERlZmF1bHQ6ZmFsc2Usc2hvcnRTd2lwZXM6dHJ1ZSxsb25nU3dpcGVzOnRydWUsbG9uZ1N3aXBlc1JhdGlvOi41LGxvbmdTd2lwZXNNczozMDAsZm9sbG93RmluZ2VyOnRydWUsdGhyZXNob2xkOjAsdG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uOnRydWUsdG91Y2hSZWxlYXNlT25FZGdlczpmYWxzZSxpT1NFZGdlU3dpcGVEZXRlY3Rpb246ZmFsc2UsaU9TRWRnZVN3aXBlVGhyZXNob2xkOjIwLHJlc2lzdGFuY2U6dHJ1ZSxyZXNpc3RhbmNlUmF0aW86Ljg1LHdhdGNoU2xpZGVzUHJvZ3Jlc3M6ZmFsc2Usd2F0Y2hTbGlkZXNWaXNpYmlsaXR5OmZhbHNlLHByZXZlbnRDbGlja3M6dHJ1ZSxwcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb246dHJ1ZSxzbGlkZVRvQ2xpY2tlZFNsaWRlOmZhbHNlLGxvb3BBZGRpdGlvbmFsU2xpZGVzOjAsbm9Td2lwaW5nOnRydWUscnVuQ2FsbGJhY2tzT25Jbml0OnRydWUsY292ZXJmbG93RWZmZWN0Ontyb3RhdGU6NTAsc3RyZXRjaDowLGRlcHRoOjEwMCxtb2RpZmllcjoxLHNsaWRlU2hhZG93czp0cnVlfSxmbGlwRWZmZWN0OntzbGlkZVNoYWRvd3M6dHJ1ZSxsaW1pdFJvdGF0aW9uOnRydWV9LGN1YmVFZmZlY3Q6e3NsaWRlU2hhZG93czp0cnVlLHNoYWRvdzp0cnVlLHNoYWRvd09mZnNldDoyMCxzaGFkb3dTY2FsZTouOTR9LGZhZGVFZmZlY3Q6e2Nyb3NzRmFkZTpmYWxzZX0sYTExeTp7cHJldlNsaWRlTWVzc2FnZTpcIlByZXZpb3VzIHNsaWRlXCIsbmV4dFNsaWRlTWVzc2FnZTpcIk5leHQgc2xpZGVcIixmaXJzdFNsaWRlTWVzc2FnZTpcIlRoaXMgaXMgdGhlIGZpcnN0IHNsaWRlXCIsbGFzdFNsaWRlTWVzc2FnZTpcIlRoaXMgaXMgdGhlIGxhc3Qgc2xpZGVcIn19O2lmKGkucGFnaW5hdGlvbil7dC5wYWdpbmF0aW9uPXt0eXBlOlwiYnVsbGV0c1wiLGNsaWNrYWJsZTpmYWxzZSxoaWRlT25DbGljazpmYWxzZX19aWYoaS5zY3JvbGxiYXIpe3Quc2Nyb2xsYmFyPXtoaWRlOnRydWV9fW8odCl9O2V4cG9ydHtJb25pY1NsaWRlcyxJb25pY1N3aXBlcixnZXRNb2RlLHNldHVwQ29uZmlnfTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@ionic/core/dist/esm-es5/index.js\n");

/***/ }),

/***/ "./node_modules/@ionic/core/dist/esm-es5/ionic-global-63a97a32.js":
/*!************************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm-es5/ionic-global-63a97a32.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"a\": () => (/* binding */ isPlatform),\n/* harmony export */   \"b\": () => (/* binding */ getIonMode),\n/* harmony export */   \"c\": () => (/* binding */ config),\n/* harmony export */   \"g\": () => (/* binding */ getPlatforms),\n/* harmony export */   \"i\": () => (/* binding */ initialize)\n/* harmony export */ });\n/* harmony import */ var _index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-7a8b7a1c.js */ \"./node_modules/@ionic/core/dist/esm-es5/index-7a8b7a1c.js\");\nvar getPlatforms=function(t){return setupPlatforms(t)};var isPlatform=function(t,e){if(typeof t===\"string\"){e=t;t=undefined}return getPlatforms(t).includes(e)};var setupPlatforms=function(t){if(t===void 0){t=window}if(typeof t===\"undefined\"){return[]}t.Ionic=t.Ionic||{};var e=t.Ionic.platforms;if(e==null){e=t.Ionic.platforms=detectPlatforms(t);e.forEach((function(e){return t.document.documentElement.classList.add(\"plt-\"+e)}))}return e};var detectPlatforms=function(t){return Object.keys(PLATFORMS_MAP).filter((function(e){return PLATFORMS_MAP[e](t)}))};var isMobileWeb=function(t){return isMobile(t)&&!isHybrid(t)};var isIpad=function(t){if(testUserAgent(t,/iPad/i)){return true}if(testUserAgent(t,/Macintosh/i)&&isMobile(t)){return true}return false};var isIphone=function(t){return testUserAgent(t,/iPhone/i)};var isIOS=function(t){return testUserAgent(t,/iPhone|iPod/i)||isIpad(t)};var isAndroid=function(t){return testUserAgent(t,/android|sink/i)};var isAndroidTablet=function(t){return isAndroid(t)&&!testUserAgent(t,/mobile/i)};var isPhablet=function(t){var e=t.innerWidth;var n=t.innerHeight;var i=Math.min(e,n);var r=Math.max(e,n);return i>390&&i<520&&(r>620&&r<800)};var isTablet=function(t){var e=t.innerWidth;var n=t.innerHeight;var i=Math.min(e,n);var r=Math.max(e,n);return isIpad(t)||isAndroidTablet(t)||i>460&&i<820&&(r>780&&r<1400)};var isMobile=function(t){return matchMedia(t,\"(any-pointer:coarse)\")};var isDesktop=function(t){return!isMobile(t)};var isHybrid=function(t){return isCordova(t)||isCapacitorNative(t)};var isCordova=function(t){return!!(t[\"cordova\"]||t[\"phonegap\"]||t[\"PhoneGap\"])};var isCapacitorNative=function(t){var e=t[\"Capacitor\"];return!!(e&&e.isNative)};var isElectron=function(t){return testUserAgent(t,/electron/i)};var isPWA=function(t){return!!(t.matchMedia(\"(display-mode: standalone)\").matches||t.navigator.standalone)};var testUserAgent=function(t,e){return e.test(t.navigator.userAgent)};var matchMedia=function(t,e){return t.matchMedia(e).matches};var PLATFORMS_MAP={ipad:isIpad,iphone:isIphone,ios:isIOS,android:isAndroid,phablet:isPhablet,tablet:isTablet,cordova:isCordova,capacitor:isCapacitorNative,electron:isElectron,pwa:isPWA,mobile:isMobile,mobileweb:isMobileWeb,desktop:isDesktop,hybrid:isHybrid};var Config=function(){function t(){this.m=new Map}t.prototype.reset=function(t){this.m=new Map(Object.entries(t))};t.prototype.get=function(t,e){var n=this.m.get(t);return n!==undefined?n:e};t.prototype.getBoolean=function(t,e){if(e===void 0){e=false}var n=this.m.get(t);if(n===undefined){return e}if(typeof n===\"string\"){return n===\"true\"}return!!n};t.prototype.getNumber=function(t,e){var n=parseFloat(this.m.get(t));return isNaN(n)?e!==undefined?e:NaN:n};t.prototype.set=function(t,e){this.m.set(t,e)};return t}();var config=new Config;var configFromSession=function(t){try{var e=t.sessionStorage.getItem(IONIC_SESSION_KEY);return e!==null?JSON.parse(e):{}}catch(n){return{}}};var saveConfig=function(t,e){try{t.sessionStorage.setItem(IONIC_SESSION_KEY,JSON.stringify(e))}catch(n){return}};var configFromURL=function(t){var e={};t.location.search.slice(1).split(\"&\").map((function(t){return t.split(\"=\")})).map((function(t){var e=t[0],n=t[1];return[decodeURIComponent(e),decodeURIComponent(n)]})).filter((function(t){var e=t[0];return startsWith(e,IONIC_PREFIX)})).map((function(t){var e=t[0],n=t[1];return[e.slice(IONIC_PREFIX.length),n]})).forEach((function(t){var n=t[0],i=t[1];e[n]=i}));return e};var startsWith=function(t,e){return t.substr(0,e.length)===e};var IONIC_PREFIX=\"ionic:\";var IONIC_SESSION_KEY=\"ionic-persist-config\";var defaultMode;var getIonMode=function(t){return t&&(0,_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__.g)(t)||defaultMode};var initialize=function(t){if(t===void 0){t={}}if(typeof window===\"undefined\"){return}var e=window.document;var n=window;var i=n.Ionic=n.Ionic||{};setupPlatforms(n);var r=Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},configFromSession(n)),{persistConfig:false}),i.config),configFromURL(n)),t);config.reset(r);if(config.getBoolean(\"persistConfig\")){saveConfig(n,r)}i.config=config;i.mode=defaultMode=config.get(\"mode\",e.documentElement.getAttribute(\"mode\")||(isPlatform(n,\"ios\")?\"ios\":\"md\"));config.set(\"mode\",defaultMode);e.documentElement.setAttribute(\"mode\",defaultMode);e.documentElement.classList.add(defaultMode);if(config.getBoolean(\"_testing\")){config.set(\"animated\",false)}var o=function(t){return t.tagName&&t.tagName.startsWith(\"ION-\")};var a=function(t){return[\"ios\",\"md\"].includes(t)};(0,_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__.s)((function(t){while(t){var e=t.mode||t.getAttribute(\"mode\");if(e){if(a(e)){return e}else if(o(t)){console.warn('Invalid ionic mode: \"'+e+'\", expected: \"ios\" or \"md\"')}}t=t.parentElement}return defaultMode}))};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@ionic/core/dist/esm-es5/ionic-global-63a97a32.js\n");

/***/ }),

/***/ "./node_modules/@ionic/core/dist/esm-es5/ios.transition-12db6216.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm-es5/ios.transition-12db6216.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"iosTransitionAnimation\": () => (/* binding */ iosTransitionAnimation),\n/* harmony export */   \"shadow\": () => (/* binding */ shadow)\n/* harmony export */ });\n/* harmony import */ var _animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./animation-096c6391.js */ \"./node_modules/@ionic/core/dist/esm-es5/animation-096c6391.js\");\n/* harmony import */ var _index_931440b1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-931440b1.js */ \"./node_modules/@ionic/core/dist/esm-es5/index-931440b1.js\");\n/* harmony import */ var _helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers-dd7e4b7b.js */ \"./node_modules/@ionic/core/dist/esm-es5/helpers-dd7e4b7b.js\");\n/* harmony import */ var _index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index-7a8b7a1c.js */ \"./node_modules/@ionic/core/dist/esm-es5/index-7a8b7a1c.js\");\nvar DURATION=540;var getClonedElement=function(e){return document.querySelector(e+\".ion-cloned-element\")};var shadow=function(e){return e.shadowRoot||e};var getLargeTitle=function(e){var t=e.tagName===\"ION-TABS\"?e:e.querySelector(\"ion-tabs\");var a=\"ion-content ion-header:not(.header-collapse-condense-inactive) ion-title.title-large\";if(t!=null){var r=t.querySelector(\"ion-tab:not(.tab-hidden), .ion-page:not(.ion-page-hidden)\");return r!=null?r.querySelector(a):null}return e.querySelector(a)};var getBackButton=function(e,t){var a=e.tagName===\"ION-TABS\"?e:e.querySelector(\"ion-tabs\");var r=[];if(a!=null){var o=a.querySelector(\"ion-tab:not(.tab-hidden), .ion-page:not(.ion-page-hidden)\");if(o!=null){r=o.querySelectorAll(\"ion-buttons\")}}else{r=e.querySelectorAll(\"ion-buttons\")}for(var n=0,i=r;n<i.length;n++){var l=i[n];var s=l.closest(\"ion-header\");var c=s&&!s.classList.contains(\"header-collapse-condense-inactive\");var f=l.querySelector(\"ion-back-button\");var d=l.classList.contains(\"buttons-collapse\");var m=l.slot===\"start\"||l.slot===\"\";if(f!==null&&m&&(d&&c&&t||!d)){return f}}return null};var createLargeTitleTransition=function(e,t,a,r,o){var n=getBackButton(r,a);var i=getLargeTitle(o);var l=getLargeTitle(r);var s=getBackButton(o,a);var c=n!==null&&i!==null&&!a;var f=l!==null&&s!==null&&a;if(c){var d=i.getBoundingClientRect();var m=n.getBoundingClientRect();animateLargeTitle(e,t,a,i,d,m);animateBackButton(e,t,a,n,d,m)}else if(f){var v=l.getBoundingClientRect();var p=s.getBoundingClientRect();animateLargeTitle(e,t,a,l,v,p);animateBackButton(e,t,a,s,v,p)}return{forward:c,backward:f}};var animateBackButton=function(e,t,a,r,o,n){var i=t?\"calc(100% - \"+(n.right+4)+\"px)\":n.left-4+\"px\";var l=t?\"7px\":\"-7px\";var s=t?\"-4px\":\"4px\";var c=t?\"-4px\":\"4px\";var f=t?\"right\":\"left\";var d=t?\"left\":\"right\";var m=[{offset:0,opacity:0,transform:\"translate3d(\"+l+\", \"+(o.top-40)+\"px, 0) scale(2.1)\"},{offset:1,opacity:1,transform:\"translate3d(\"+s+\", \"+(n.top-46)+\"px, 0) scale(1)\"}];var v=[{offset:0,opacity:1,transform:\"translate3d(\"+s+\", \"+(n.top-46)+\"px, 0) scale(1)\"},{offset:.6,opacity:0},{offset:1,opacity:0,transform:\"translate3d(\"+l+\", \"+(o.top-40)+\"px, 0) scale(2.1)\"}];var p=a?v:m;var y=[{offset:0,opacity:0,transform:\"translate3d(\"+c+\", \"+(n.top-41)+\"px, 0) scale(0.6)\"},{offset:1,opacity:1,transform:\"translate3d(\"+c+\", \"+(n.top-46)+\"px, 0) scale(1)\"}];var u=[{offset:0,opacity:1,transform:\"translate3d(\"+c+\", \"+(n.top-46)+\"px, 0) scale(1)\"},{offset:.2,opacity:0,transform:\"translate3d(\"+c+\", \"+(n.top-41)+\"px, 0) scale(0.6)\"},{offset:1,opacity:0,transform:\"translate3d(\"+c+\", \"+(n.top-41)+\"px, 0) scale(0.6)\"}];var b=a?u:y;var g=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();var A=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();var S=getClonedElement(\"ion-back-button\");var T=shadow(S).querySelector(\".button-text\");var h=shadow(S).querySelector(\"ion-icon\");S.text=r.text;S.mode=r.mode;S.icon=r.icon;S.color=r.color;S.disabled=r.disabled;S.style.setProperty(\"display\",\"block\");S.style.setProperty(\"position\",\"fixed\");A.addElement(h);g.addElement(T);g.beforeStyles({\"transform-origin\":f+\" center\"}).beforeAddWrite((function(){r.style.setProperty(\"display\",\"none\");S.style.setProperty(f,i)})).afterAddWrite((function(){r.style.setProperty(\"display\",\"\");S.style.setProperty(\"display\",\"none\");S.style.removeProperty(f)})).keyframes(p);A.beforeStyles({\"transform-origin\":d+\" center\"}).keyframes(b);e.addAnimation([g,A])};var animateLargeTitle=function(e,t,a,r,o,n){var i;var l=t?\"calc(100% - \"+o.right+\"px)\":o.left+\"px\";var s=t?\"-18px\":\"18px\";var c=t?\"right\":\"left\";var f=[{offset:0,opacity:0,transform:\"translate3d(\"+s+\", \"+(n.top-4)+\"px, 0) scale(0.49)\"},{offset:.1,opacity:0},{offset:1,opacity:1,transform:\"translate3d(0, \"+(o.top-2)+\"px, 0) scale(1)\"}];var d=[{offset:0,opacity:.99,transform:\"translate3d(0, \"+(o.top-2)+\"px, 0) scale(1)\"},{offset:.6,opacity:0},{offset:1,opacity:0,transform:\"translate3d(\"+s+\", \"+(n.top-4)+\"px, 0) scale(0.5)\"}];var m=a?f:d;var v=getClonedElement(\"ion-title\");var p=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();v.innerText=r.innerText;v.size=r.size;v.color=r.color;p.addElement(v);p.beforeStyles((i={\"transform-origin\":c+\" center\",height:\"46px\",display:\"\",position:\"relative\"},i[c]=l,i)).beforeAddWrite((function(){r.style.setProperty(\"display\",\"none\")})).afterAddWrite((function(){r.style.setProperty(\"display\",\"\");v.style.setProperty(\"display\",\"none\")})).keyframes(m);e.addAnimation(p)};var iosTransitionAnimation=function(e,t){try{var a=\"cubic-bezier(0.32,0.72,0,1)\";var r=\"opacity\";var o=\"transform\";var n=\"0%\";var i=.8;var l=e.ownerDocument.dir===\"rtl\";var s=l?\"-99.5%\":\"99.5%\";var c=l?\"33%\":\"-33%\";var f=t.enteringEl;var d=t.leavingEl;var m=t.direction===\"back\";var v=f.querySelector(\":scope > ion-content\");var p=f.querySelectorAll(\":scope > ion-header > *:not(ion-toolbar), :scope > ion-footer > *\");var y=f.querySelectorAll(\":scope > ion-header > ion-toolbar\");var u=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();var b=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();u.addElement(f).duration(t.duration||DURATION).easing(t.easing||a).fill(\"both\").beforeRemoveClass(\"ion-page-invisible\");if(d&&e){var g=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();g.addElement(e);u.addAnimation(g)}if(!v&&y.length===0&&p.length===0){b.addElement(f.querySelector(\":scope > .ion-page, :scope > ion-nav, :scope > ion-tabs\"))}else{b.addElement(v);b.addElement(p)}u.addAnimation(b);if(m){b.beforeClearStyles([r]).fromTo(\"transform\",\"translateX(\"+c+\")\",\"translateX(\"+n+\")\").fromTo(r,i,1)}else{b.beforeClearStyles([r]).fromTo(\"transform\",\"translateX(\"+s+\")\",\"translateX(\"+n+\")\")}if(v){var A=shadow(v).querySelector(\".transition-effect\");if(A){var S=A.querySelector(\".transition-cover\");var T=A.querySelector(\".transition-shadow\");var h=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();var x=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();var E=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();h.addElement(A).beforeStyles({opacity:\"1\",display:\"block\"}).afterStyles({opacity:\"\",display:\"\"});x.addElement(S).beforeClearStyles([r]).fromTo(r,0,.1);E.addElement(T).beforeClearStyles([r]).fromTo(r,.03,.7);h.addAnimation([x,E]);b.addAnimation([h])}}var q=f.querySelector(\"ion-header.header-collapse-condense\");var X=createLargeTitleTransition(u,l,m,f,d),C=X.forward,k=X.backward;y.forEach((function(e){var t=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();t.addElement(e);u.addAnimation(t);var a=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();a.addElement(e.querySelector(\"ion-title\"));var o=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();var i=Array.from(e.querySelectorAll(\"ion-buttons,[menuToggle]\"));var f=e.closest(\"ion-header\");var d=f&&f.classList.contains(\"header-collapse-condense-inactive\");var v;if(m){v=i.filter((function(e){var t=e.classList.contains(\"buttons-collapse\");return t&&!d||!t}))}else{v=i.filter((function(e){return!e.classList.contains(\"buttons-collapse\")}))}o.addElement(v);var p=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();p.addElement(e.querySelectorAll(\":scope > *:not(ion-title):not(ion-buttons):not([menuToggle])\"));var y=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();y.addElement(shadow(e).querySelector(\".toolbar-background\"));var b=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();var g=e.querySelector(\"ion-back-button\");if(g){b.addElement(g)}t.addAnimation([a,o,p,y,b]);o.fromTo(r,.01,1);p.fromTo(r,.01,1);if(m){if(!d){a.fromTo(\"transform\",\"translateX(\"+c+\")\",\"translateX(\"+n+\")\").fromTo(r,.01,1)}p.fromTo(\"transform\",\"translateX(\"+c+\")\",\"translateX(\"+n+\")\");b.fromTo(r,.01,1)}else{if(!q){a.fromTo(\"transform\",\"translateX(\"+s+\")\",\"translateX(\"+n+\")\").fromTo(r,.01,1)}p.fromTo(\"transform\",\"translateX(\"+s+\")\",\"translateX(\"+n+\")\");y.beforeClearStyles([r,\"transform\"]);var A=f===null||f===void 0?void 0:f.translucent;if(!A){y.fromTo(r,.01,\"var(--opacity)\")}else{y.fromTo(\"transform\",l?\"translateX(-100%)\":\"translateX(100%)\",\"translateX(0px)\")}if(!C){b.fromTo(r,.01,1)}if(g&&!C){var S=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();S.addElement(shadow(g).querySelector(\".button-text\")).fromTo(\"transform\",l?\"translateX(-100px)\":\"translateX(100px)\",\"translateX(0px)\");t.addAnimation(S)}}}));if(d){var w=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();var B=d.querySelector(\":scope > ion-content\");var L=d.querySelectorAll(\":scope > ion-header > ion-toolbar\");var P=d.querySelectorAll(\":scope > ion-header > *:not(ion-toolbar), :scope > ion-footer > *\");if(!B&&L.length===0&&P.length===0){w.addElement(d.querySelector(\":scope > .ion-page, :scope > ion-nav, :scope > ion-tabs\"))}else{w.addElement(B);w.addElement(P)}u.addAnimation(w);if(m){w.beforeClearStyles([r]).fromTo(\"transform\",\"translateX(\"+n+\")\",l?\"translateX(-100%)\":\"translateX(100%)\");var R=(0,_index_931440b1_js__WEBPACK_IMPORTED_MODULE_1__.g)(d);u.afterAddWrite((function(){if(u.getDirection()===\"normal\"){R.style.setProperty(\"display\",\"none\")}}))}else{w.fromTo(\"transform\",\"translateX(\"+n+\")\",\"translateX(\"+c+\")\").fromTo(r,1,i)}if(B){var I=shadow(B).querySelector(\".transition-effect\");if(I){var N=I.querySelector(\".transition-cover\");var W=I.querySelector(\".transition-shadow\");var j=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();var D=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();var O=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();j.addElement(I).beforeStyles({opacity:\"1\",display:\"block\"}).afterStyles({opacity:\"\",display:\"\"});D.addElement(N).beforeClearStyles([r]).fromTo(r,.1,0);O.addElement(W).beforeClearStyles([r]).fromTo(r,.7,.03);j.addAnimation([D,O]);w.addAnimation([j])}}L.forEach((function(e){var t=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();t.addElement(e);var a=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();a.addElement(e.querySelector(\"ion-title\"));var i=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();var s=e.querySelectorAll(\"ion-buttons,[menuToggle]\");var f=e.closest(\"ion-header\");var d=f&&f.classList.contains(\"header-collapse-condense-inactive\");var v=Array.from(s).filter((function(e){var t=e.classList.contains(\"buttons-collapse\");return t&&!d||!t}));i.addElement(v);var p=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();var y=e.querySelectorAll(\":scope > *:not(ion-title):not(ion-buttons):not([menuToggle])\");if(y.length>0){p.addElement(y)}var b=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();b.addElement(shadow(e).querySelector(\".toolbar-background\"));var g=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();var A=e.querySelector(\"ion-back-button\");if(A){g.addElement(A)}t.addAnimation([a,i,p,g,b]);u.addAnimation(t);g.fromTo(r,.99,0);i.fromTo(r,.99,0);p.fromTo(r,.99,0);if(m){if(!d){a.fromTo(\"transform\",\"translateX(\"+n+\")\",l?\"translateX(-100%)\":\"translateX(100%)\").fromTo(r,.99,0)}p.fromTo(\"transform\",\"translateX(\"+n+\")\",l?\"translateX(-100%)\":\"translateX(100%)\");b.beforeClearStyles([r,\"transform\"]);var S=f===null||f===void 0?void 0:f.translucent;if(!S){b.fromTo(r,\"var(--opacity)\",0)}else{b.fromTo(\"transform\",\"translateX(0px)\",l?\"translateX(-100%)\":\"translateX(100%)\")}if(A&&!k){var T=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();T.addElement(shadow(A).querySelector(\".button-text\")).fromTo(\"transform\",\"translateX(\"+n+\")\",\"translateX(\"+((l?-124:124)+\"px\")+\")\");t.addAnimation(T)}}else{if(!d){a.fromTo(\"transform\",\"translateX(\"+n+\")\",\"translateX(\"+c+\")\").fromTo(r,.99,0).afterClearStyles([o,r])}p.fromTo(\"transform\",\"translateX(\"+n+\")\",\"translateX(\"+c+\")\").afterClearStyles([o,r]);g.afterClearStyles([r]);a.afterClearStyles([r]);i.afterClearStyles([r])}}))}return u}catch(z){throw z}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@ionic/core/dist/esm-es5/ios.transition-12db6216.js\n");

/***/ }),

/***/ "./node_modules/@ionic/core/dist/esm-es5/loader.js":
/*!*********************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm-es5/loader.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"defineCustomElements\": () => (/* binding */ defineCustomElements)\n/* harmony export */ });\n/* harmony import */ var _index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-7a8b7a1c.js */ \"./node_modules/@ionic/core/dist/esm-es5/index-7a8b7a1c.js\");\n/* harmony import */ var _app_globals_fd807b9a_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./app-globals-fd807b9a.js */ \"./node_modules/@ionic/core/dist/esm-es5/app-globals-fd807b9a.js\");\n/* harmony import */ var _ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ionic-global-63a97a32.js */ \"./node_modules/@ionic/core/dist/esm-es5/ionic-global-63a97a32.js\");\nvar patchEsm=function(){if(!(_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__.C&&_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__.C.supports&&_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__.C.supports(\"color\",\"var(--c)\"))){return __webpack_require__.e(/*! import() */ \"vendors-node_modules_ionic_core_dist_esm-es5_css-shim-2ccf4dec_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./css-shim-2ccf4dec.js */ \"./node_modules/@ionic/core/dist/esm-es5/css-shim-2ccf4dec.js\", 23)).then((function(){if(_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__.p.$cssShim$=_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__.w.__cssshim){return _index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__.p.$cssShim$.i()}else{return 0}}))}return (0,_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__.a)()};var defineCustomElements=function(e,o){if(typeof window===\"undefined\")return Promise.resolve();return patchEsm().then((function(){(0,_app_globals_fd807b9a_js__WEBPACK_IMPORTED_MODULE_1__.g)();return (0,_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__.b)(JSON.parse('[[\"ion-select_3\",[[2,\"ion-select-popover\",{\"header\":[1],\"subHeader\":[1,\"sub-header\"],\"message\":[1],\"options\":[16]},[[0,\"ionChange\",\"onSelect\"]]],[33,\"ion-select\",{\"disabled\":[4],\"cancelText\":[1,\"cancel-text\"],\"okText\":[1,\"ok-text\"],\"placeholder\":[1],\"name\":[1],\"selectedText\":[1,\"selected-text\"],\"multiple\":[4],\"interface\":[1],\"interfaceOptions\":[8,\"interface-options\"],\"compareWith\":[1,\"compare-with\"],\"value\":[1032],\"isExpanded\":[32],\"open\":[64]}],[1,\"ion-select-option\",{\"disabled\":[4],\"value\":[8]}]]],[\"ion-menu_3\",[[33,\"ion-menu-button\",{\"color\":[513],\"disabled\":[4],\"menu\":[1],\"autoHide\":[4,\"auto-hide\"],\"type\":[1],\"visible\":[32]},[[16,\"ionMenuChange\",\"visibilityChanged\"],[16,\"ionSplitPaneVisible\",\"visibilityChanged\"]]],[33,\"ion-menu\",{\"contentId\":[513,\"content-id\"],\"menuId\":[513,\"menu-id\"],\"type\":[1025],\"disabled\":[1028],\"side\":[513],\"swipeGesture\":[4,\"swipe-gesture\"],\"maxEdgeStart\":[2,\"max-edge-start\"],\"isPaneVisible\":[32],\"isEndSide\":[32],\"isOpen\":[64],\"isActive\":[64],\"open\":[64],\"close\":[64],\"toggle\":[64],\"setOpen\":[64]},[[16,\"ionSplitPaneVisible\",\"onSplitPaneChanged\"],[2,\"click\",\"onBackdropClick\"],[0,\"keydown\",\"onKeydown\"]]],[1,\"ion-menu-toggle\",{\"menu\":[1],\"autoHide\":[4,\"auto-hide\"],\"visible\":[32]},[[16,\"ionMenuChange\",\"visibilityChanged\"],[16,\"ionSplitPaneVisible\",\"visibilityChanged\"]]]]],[\"ion-action-sheet\",[[34,\"ion-action-sheet\",{\"overlayIndex\":[2,\"overlay-index\"],\"keyboardClose\":[4,\"keyboard-close\"],\"enterAnimation\":[16],\"leaveAnimation\":[16],\"buttons\":[16],\"cssClass\":[1,\"css-class\"],\"backdropDismiss\":[4,\"backdrop-dismiss\"],\"header\":[1],\"subHeader\":[1,\"sub-header\"],\"translucent\":[4],\"animated\":[4],\"htmlAttributes\":[16],\"present\":[64],\"dismiss\":[64],\"onDidDismiss\":[64],\"onWillDismiss\":[64]}]]],[\"ion-fab_3\",[[33,\"ion-fab-button\",{\"color\":[513],\"activated\":[4],\"disabled\":[4],\"download\":[1],\"href\":[1],\"rel\":[1],\"routerDirection\":[1,\"router-direction\"],\"routerAnimation\":[16],\"target\":[1],\"show\":[4],\"translucent\":[4],\"type\":[1],\"size\":[1],\"closeIcon\":[1,\"close-icon\"]}],[1,\"ion-fab\",{\"horizontal\":[1],\"vertical\":[1],\"edge\":[4],\"activated\":[1028],\"close\":[64]}],[1,\"ion-fab-list\",{\"activated\":[4],\"side\":[1]}]]],[\"ion-refresher_2\",[[0,\"ion-refresher-content\",{\"pullingIcon\":[1025,\"pulling-icon\"],\"pullingText\":[1,\"pulling-text\"],\"refreshingSpinner\":[1025,\"refreshing-spinner\"],\"refreshingText\":[1,\"refreshing-text\"]}],[32,\"ion-refresher\",{\"pullMin\":[2,\"pull-min\"],\"pullMax\":[2,\"pull-max\"],\"closeDuration\":[1,\"close-duration\"],\"snapbackDuration\":[1,\"snapback-duration\"],\"pullFactor\":[2,\"pull-factor\"],\"disabled\":[4],\"nativeRefresher\":[32],\"state\":[32],\"complete\":[64],\"cancel\":[64],\"getProgress\":[64]}]]],[\"ion-alert\",[[34,\"ion-alert\",{\"overlayIndex\":[2,\"overlay-index\"],\"keyboardClose\":[4,\"keyboard-close\"],\"enterAnimation\":[16],\"leaveAnimation\":[16],\"cssClass\":[1,\"css-class\"],\"header\":[1],\"subHeader\":[1,\"sub-header\"],\"message\":[1],\"buttons\":[16],\"inputs\":[1040],\"backdropDismiss\":[4,\"backdrop-dismiss\"],\"translucent\":[4],\"animated\":[4],\"htmlAttributes\":[16],\"present\":[64],\"dismiss\":[64],\"onDidDismiss\":[64],\"onWillDismiss\":[64]},[[4,\"keydown\",\"onKeydown\"]]]]],[\"ion-back-button\",[[33,\"ion-back-button\",{\"color\":[513],\"defaultHref\":[1025,\"default-href\"],\"disabled\":[516],\"icon\":[1],\"text\":[1],\"type\":[1],\"routerAnimation\":[16]}]]],[\"ion-loading\",[[34,\"ion-loading\",{\"overlayIndex\":[2,\"overlay-index\"],\"keyboardClose\":[4,\"keyboard-close\"],\"enterAnimation\":[16],\"leaveAnimation\":[16],\"message\":[1],\"cssClass\":[1,\"css-class\"],\"duration\":[2],\"backdropDismiss\":[4,\"backdrop-dismiss\"],\"showBackdrop\":[4,\"show-backdrop\"],\"spinner\":[1025],\"translucent\":[4],\"animated\":[4],\"htmlAttributes\":[16],\"present\":[64],\"dismiss\":[64],\"onDidDismiss\":[64],\"onWillDismiss\":[64]}]]],[\"ion-toast\",[[33,\"ion-toast\",{\"overlayIndex\":[2,\"overlay-index\"],\"color\":[513],\"enterAnimation\":[16],\"leaveAnimation\":[16],\"cssClass\":[1,\"css-class\"],\"duration\":[2],\"header\":[1],\"message\":[1],\"keyboardClose\":[4,\"keyboard-close\"],\"position\":[1],\"buttons\":[16],\"translucent\":[4],\"animated\":[4],\"htmlAttributes\":[16],\"present\":[64],\"dismiss\":[64],\"onDidDismiss\":[64],\"onWillDismiss\":[64]}]]],[\"ion-card_5\",[[33,\"ion-card\",{\"color\":[513],\"button\":[4],\"type\":[1],\"disabled\":[4],\"download\":[1],\"href\":[1],\"rel\":[1],\"routerDirection\":[1,\"router-direction\"],\"routerAnimation\":[16],\"target\":[1]}],[32,\"ion-card-content\"],[33,\"ion-card-header\",{\"color\":[513],\"translucent\":[4]}],[33,\"ion-card-subtitle\",{\"color\":[513]}],[33,\"ion-card-title\",{\"color\":[513]}]]],[\"ion-item-option_3\",[[33,\"ion-item-option\",{\"color\":[513],\"disabled\":[4],\"download\":[1],\"expandable\":[4],\"href\":[1],\"rel\":[1],\"target\":[1],\"type\":[1]}],[32,\"ion-item-options\",{\"side\":[1],\"fireSwipeEvent\":[64]}],[0,\"ion-item-sliding\",{\"disabled\":[4],\"state\":[32],\"getOpenAmount\":[64],\"getSlidingRatio\":[64],\"open\":[64],\"close\":[64],\"closeOpened\":[64]}]]],[\"ion-infinite-scroll_2\",[[32,\"ion-infinite-scroll-content\",{\"loadingSpinner\":[1025,\"loading-spinner\"],\"loadingText\":[1,\"loading-text\"]}],[0,\"ion-infinite-scroll\",{\"threshold\":[1],\"disabled\":[4],\"position\":[1],\"isLoading\":[32],\"complete\":[64]}]]],[\"ion-reorder_2\",[[33,\"ion-reorder\",null,[[2,\"click\",\"onClick\"]]],[0,\"ion-reorder-group\",{\"disabled\":[4],\"state\":[32],\"complete\":[64]}]]],[\"ion-segment_2\",[[33,\"ion-segment-button\",{\"disabled\":[4],\"layout\":[1],\"type\":[1],\"value\":[1],\"checked\":[32]}],[33,\"ion-segment\",{\"color\":[513],\"disabled\":[4],\"scrollable\":[4],\"swipeGesture\":[4,\"swipe-gesture\"],\"value\":[1025],\"activated\":[32]}]]],[\"ion-tab-bar_2\",[[33,\"ion-tab-button\",{\"disabled\":[4],\"download\":[1],\"href\":[1],\"rel\":[1],\"layout\":[1025],\"selected\":[1028],\"tab\":[1],\"target\":[1]},[[8,\"ionTabBarChanged\",\"onTabBarChanged\"]]],[33,\"ion-tab-bar\",{\"color\":[513],\"selectedTab\":[1,\"selected-tab\"],\"translucent\":[4],\"keyboardVisible\":[32]}]]],[\"ion-chip\",[[33,\"ion-chip\",{\"color\":[513],\"outline\":[4],\"disabled\":[4]}]]],[\"ion-modal\",[[34,\"ion-modal\",{\"overlayIndex\":[2,\"overlay-index\"],\"delegate\":[16],\"keyboardClose\":[4,\"keyboard-close\"],\"enterAnimation\":[16],\"leaveAnimation\":[16],\"component\":[1],\"componentProps\":[16],\"cssClass\":[1,\"css-class\"],\"backdropDismiss\":[4,\"backdrop-dismiss\"],\"showBackdrop\":[4,\"show-backdrop\"],\"animated\":[4],\"swipeToClose\":[4,\"swipe-to-close\"],\"presentingElement\":[16],\"htmlAttributes\":[16],\"present\":[64],\"dismiss\":[64],\"onDidDismiss\":[64],\"onWillDismiss\":[64]}]]],[\"ion-popover\",[[34,\"ion-popover\",{\"delegate\":[16],\"overlayIndex\":[2,\"overlay-index\"],\"enterAnimation\":[16],\"leaveAnimation\":[16],\"component\":[1],\"componentProps\":[16],\"keyboardClose\":[4,\"keyboard-close\"],\"cssClass\":[1,\"css-class\"],\"backdropDismiss\":[4,\"backdrop-dismiss\"],\"event\":[8],\"showBackdrop\":[4,\"show-backdrop\"],\"translucent\":[4],\"animated\":[4],\"htmlAttributes\":[16],\"present\":[64],\"dismiss\":[64],\"onDidDismiss\":[64],\"onWillDismiss\":[64]}]]],[\"ion-searchbar\",[[34,\"ion-searchbar\",{\"color\":[513],\"animated\":[4],\"autocomplete\":[1],\"autocorrect\":[1],\"cancelButtonIcon\":[1,\"cancel-button-icon\"],\"cancelButtonText\":[1,\"cancel-button-text\"],\"clearIcon\":[1,\"clear-icon\"],\"debounce\":[2],\"disabled\":[4],\"inputmode\":[1],\"enterkeyhint\":[1],\"placeholder\":[1],\"searchIcon\":[1,\"search-icon\"],\"showCancelButton\":[1,\"show-cancel-button\"],\"showClearButton\":[1,\"show-clear-button\"],\"spellcheck\":[4],\"type\":[1],\"value\":[1025],\"focused\":[32],\"noAnimate\":[32],\"setFocus\":[64],\"getInputElement\":[64]}]]],[\"ion-app_8\",[[0,\"ion-app\"],[34,\"ion-buttons\",{\"collapse\":[4]}],[1,\"ion-content\",{\"color\":[513],\"fullscreen\":[4],\"forceOverscroll\":[1028,\"force-overscroll\"],\"scrollX\":[4,\"scroll-x\"],\"scrollY\":[4,\"scroll-y\"],\"scrollEvents\":[4,\"scroll-events\"],\"getScrollElement\":[64],\"scrollToTop\":[64],\"scrollToBottom\":[64],\"scrollByPoint\":[64],\"scrollToPoint\":[64]},[[8,\"appload\",\"onAppLoad\"],[2,\"click\",\"onClick\"]]],[36,\"ion-footer\",{\"translucent\":[4]}],[36,\"ion-header\",{\"collapse\":[1],\"translucent\":[4]}],[1,\"ion-router-outlet\",{\"mode\":[1025],\"delegate\":[16],\"animated\":[4],\"animation\":[16],\"swipeHandler\":[16],\"commit\":[64],\"setRouteId\":[64],\"getRouteId\":[64]}],[33,\"ion-title\",{\"color\":[513],\"size\":[1]}],[33,\"ion-toolbar\",{\"color\":[513]},[[0,\"ionStyle\",\"childrenStyle\"]]]]],[\"ion-route_4\",[[0,\"ion-route\",{\"url\":[1],\"component\":[1],\"componentProps\":[16],\"beforeLeave\":[16],\"beforeEnter\":[16]}],[0,\"ion-route-redirect\",{\"from\":[1],\"to\":[1]}],[0,\"ion-router\",{\"root\":[1],\"useHash\":[4,\"use-hash\"],\"canTransition\":[64],\"push\":[64],\"back\":[64],\"printDebug\":[64],\"navChanged\":[64]},[[8,\"popstate\",\"onPopState\"],[4,\"ionBackButton\",\"onBackButton\"]]],[1,\"ion-router-link\",{\"color\":[513],\"href\":[1],\"rel\":[1],\"routerDirection\":[1,\"router-direction\"],\"routerAnimation\":[16],\"target\":[1]}]]],[\"ion-avatar_3\",[[33,\"ion-avatar\"],[33,\"ion-badge\",{\"color\":[513]}],[1,\"ion-thumbnail\"]]],[\"ion-col_3\",[[1,\"ion-col\",{\"offset\":[1],\"offsetXs\":[1,\"offset-xs\"],\"offsetSm\":[1,\"offset-sm\"],\"offsetMd\":[1,\"offset-md\"],\"offsetLg\":[1,\"offset-lg\"],\"offsetXl\":[1,\"offset-xl\"],\"pull\":[1],\"pullXs\":[1,\"pull-xs\"],\"pullSm\":[1,\"pull-sm\"],\"pullMd\":[1,\"pull-md\"],\"pullLg\":[1,\"pull-lg\"],\"pullXl\":[1,\"pull-xl\"],\"push\":[1],\"pushXs\":[1,\"push-xs\"],\"pushSm\":[1,\"push-sm\"],\"pushMd\":[1,\"push-md\"],\"pushLg\":[1,\"push-lg\"],\"pushXl\":[1,\"push-xl\"],\"size\":[1],\"sizeXs\":[1,\"size-xs\"],\"sizeSm\":[1,\"size-sm\"],\"sizeMd\":[1,\"size-md\"],\"sizeLg\":[1,\"size-lg\"],\"sizeXl\":[1,\"size-xl\"]},[[9,\"resize\",\"onResize\"]]],[1,\"ion-grid\",{\"fixed\":[4]}],[1,\"ion-row\"]]],[\"ion-nav_2\",[[1,\"ion-nav\",{\"delegate\":[16],\"swipeGesture\":[1028,\"swipe-gesture\"],\"animated\":[4],\"animation\":[16],\"rootParams\":[16],\"root\":[1],\"push\":[64],\"insert\":[64],\"insertPages\":[64],\"pop\":[64],\"popTo\":[64],\"popToRoot\":[64],\"removeIndex\":[64],\"setRoot\":[64],\"setPages\":[64],\"setRouteId\":[64],\"getRouteId\":[64],\"getActive\":[64],\"getByIndex\":[64],\"canGoBack\":[64],\"getPrevious\":[64]}],[0,\"ion-nav-link\",{\"component\":[1],\"componentProps\":[16],\"routerDirection\":[1,\"router-direction\"],\"routerAnimation\":[16]}]]],[\"ion-slide_2\",[[0,\"ion-slide\"],[36,\"ion-slides\",{\"options\":[8],\"pager\":[4],\"scrollbar\":[4],\"update\":[64],\"updateAutoHeight\":[64],\"slideTo\":[64],\"slideNext\":[64],\"slidePrev\":[64],\"getActiveIndex\":[64],\"getPreviousIndex\":[64],\"length\":[64],\"isEnd\":[64],\"isBeginning\":[64],\"startAutoplay\":[64],\"stopAutoplay\":[64],\"lockSwipeToNext\":[64],\"lockSwipeToPrev\":[64],\"lockSwipes\":[64],\"getSwiper\":[64]}]]],[\"ion-tab_2\",[[1,\"ion-tab\",{\"active\":[1028],\"delegate\":[16],\"tab\":[1],\"component\":[1],\"setActive\":[64]}],[1,\"ion-tabs\",{\"useRouter\":[1028,\"use-router\"],\"selectedTab\":[32],\"select\":[64],\"getTab\":[64],\"getSelected\":[64],\"setRouteId\":[64],\"getRouteId\":[64]}]]],[\"ion-checkbox\",[[33,\"ion-checkbox\",{\"color\":[513],\"name\":[1],\"checked\":[1028],\"indeterminate\":[1028],\"disabled\":[4],\"value\":[1]}]]],[\"ion-img\",[[1,\"ion-img\",{\"alt\":[1],\"src\":[1],\"loadSrc\":[32],\"loadError\":[32]}]]],[\"ion-input\",[[34,\"ion-input\",{\"fireFocusEvents\":[4,\"fire-focus-events\"],\"color\":[513],\"accept\":[1],\"autocapitalize\":[1],\"autocomplete\":[1],\"autocorrect\":[1],\"autofocus\":[4],\"clearInput\":[4,\"clear-input\"],\"clearOnEdit\":[4,\"clear-on-edit\"],\"debounce\":[2],\"disabled\":[4],\"enterkeyhint\":[1],\"inputmode\":[1],\"max\":[1],\"maxlength\":[2],\"min\":[1],\"minlength\":[2],\"multiple\":[4],\"name\":[1],\"pattern\":[1],\"placeholder\":[1],\"readonly\":[4],\"required\":[4],\"spellcheck\":[4],\"step\":[1],\"size\":[2],\"type\":[1],\"value\":[1032],\"hasFocus\":[32],\"setFocus\":[64],\"setBlur\":[64],\"getInputElement\":[64]}]]],[\"ion-progress-bar\",[[33,\"ion-progress-bar\",{\"type\":[1],\"reversed\":[4],\"value\":[2],\"buffer\":[2],\"color\":[513]}]]],[\"ion-range\",[[33,\"ion-range\",{\"color\":[513],\"debounce\":[2],\"name\":[1],\"dualKnobs\":[4,\"dual-knobs\"],\"min\":[2],\"max\":[2],\"pin\":[4],\"snaps\":[4],\"step\":[2],\"ticks\":[4],\"disabled\":[4],\"value\":[1026],\"ratioA\":[32],\"ratioB\":[32],\"pressedKnob\":[32]}]]],[\"ion-split-pane\",[[33,\"ion-split-pane\",{\"contentId\":[513,\"content-id\"],\"disabled\":[4],\"when\":[8],\"visible\":[32]}]]],[\"ion-text\",[[1,\"ion-text\",{\"color\":[513]}]]],[\"ion-textarea\",[[34,\"ion-textarea\",{\"fireFocusEvents\":[4,\"fire-focus-events\"],\"color\":[513],\"autocapitalize\":[1],\"autofocus\":[4],\"clearOnEdit\":[1028,\"clear-on-edit\"],\"debounce\":[2],\"disabled\":[4],\"inputmode\":[1],\"enterkeyhint\":[1],\"maxlength\":[2],\"minlength\":[2],\"name\":[1],\"placeholder\":[1],\"readonly\":[4],\"required\":[4],\"spellcheck\":[4],\"cols\":[2],\"rows\":[2],\"wrap\":[1],\"autoGrow\":[4,\"auto-grow\"],\"value\":[1025],\"hasFocus\":[32],\"setFocus\":[64],\"setBlur\":[64],\"getInputElement\":[64]}]]],[\"ion-toggle\",[[33,\"ion-toggle\",{\"color\":[513],\"name\":[1],\"checked\":[1028],\"disabled\":[4],\"value\":[1],\"activated\":[32]}]]],[\"ion-virtual-scroll\",[[0,\"ion-virtual-scroll\",{\"approxItemHeight\":[2,\"approx-item-height\"],\"approxHeaderHeight\":[2,\"approx-header-height\"],\"approxFooterHeight\":[2,\"approx-footer-height\"],\"headerFn\":[16],\"footerFn\":[16],\"items\":[16],\"itemHeight\":[16],\"headerHeight\":[16],\"footerHeight\":[16],\"renderItem\":[16],\"renderHeader\":[16],\"renderFooter\":[16],\"nodeRender\":[16],\"domRender\":[16],\"totalHeight\":[32],\"positionForItem\":[64],\"checkRange\":[64],\"checkEnd\":[64]},[[9,\"resize\",\"onResize\"]]]]],[\"ion-datetime_3\",[[34,\"ion-picker\",{\"overlayIndex\":[2,\"overlay-index\"],\"keyboardClose\":[4,\"keyboard-close\"],\"enterAnimation\":[16],\"leaveAnimation\":[16],\"buttons\":[16],\"columns\":[16],\"cssClass\":[1,\"css-class\"],\"duration\":[2],\"showBackdrop\":[4,\"show-backdrop\"],\"backdropDismiss\":[4,\"backdrop-dismiss\"],\"animated\":[4],\"htmlAttributes\":[16],\"presented\":[32],\"present\":[64],\"dismiss\":[64],\"onDidDismiss\":[64],\"onWillDismiss\":[64],\"getColumn\":[64]}],[33,\"ion-datetime\",{\"name\":[1],\"disabled\":[4],\"readonly\":[4],\"min\":[1025],\"max\":[1025],\"displayFormat\":[1,\"display-format\"],\"displayTimezone\":[1,\"display-timezone\"],\"pickerFormat\":[1,\"picker-format\"],\"cancelText\":[1,\"cancel-text\"],\"doneText\":[1,\"done-text\"],\"yearValues\":[8,\"year-values\"],\"monthValues\":[8,\"month-values\"],\"dayValues\":[8,\"day-values\"],\"hourValues\":[8,\"hour-values\"],\"minuteValues\":[8,\"minute-values\"],\"monthNames\":[1,\"month-names\"],\"monthShortNames\":[1,\"month-short-names\"],\"dayNames\":[1,\"day-names\"],\"dayShortNames\":[1,\"day-short-names\"],\"pickerOptions\":[16],\"placeholder\":[1],\"value\":[1025],\"isExpanded\":[32],\"open\":[64]}],[32,\"ion-picker-column\",{\"col\":[16]}]]],[\"ion-radio_2\",[[33,\"ion-radio\",{\"color\":[513],\"name\":[1],\"disabled\":[4],\"value\":[8],\"checked\":[32],\"buttonTabindex\":[32],\"setFocus\":[64],\"setButtonTabindex\":[64]}],[0,\"ion-radio-group\",{\"allowEmptySelection\":[4,\"allow-empty-selection\"],\"name\":[1],\"value\":[1032]},[[4,\"keydown\",\"onKeydown\"]]]]],[\"ion-spinner\",[[1,\"ion-spinner\",{\"color\":[513],\"duration\":[2],\"name\":[1],\"paused\":[4]}]]],[\"ion-backdrop\",[[33,\"ion-backdrop\",{\"visible\":[4],\"tappable\":[4],\"stopPropagation\":[4,\"stop-propagation\"]},[[2,\"click\",\"onMouseDown\"]]]]],[\"ion-ripple-effect\",[[1,\"ion-ripple-effect\",{\"type\":[1],\"addRipple\":[64]}]]],[\"ion-button_2\",[[33,\"ion-button\",{\"color\":[513],\"buttonType\":[1025,\"button-type\"],\"disabled\":[516],\"expand\":[513],\"fill\":[1537],\"routerDirection\":[1,\"router-direction\"],\"routerAnimation\":[16],\"download\":[1],\"href\":[1],\"rel\":[1],\"shape\":[513],\"size\":[513],\"strong\":[4],\"target\":[1],\"type\":[1]}],[1,\"ion-icon\",{\"mode\":[1025],\"color\":[1],\"ariaLabel\":[1537,\"aria-label\"],\"ariaHidden\":[513,\"aria-hidden\"],\"ios\":[1],\"md\":[1],\"flipRtl\":[4,\"flip-rtl\"],\"name\":[513],\"src\":[1],\"icon\":[8],\"size\":[1],\"lazy\":[4],\"sanitize\":[4],\"svgContent\":[32],\"isVisible\":[32]}]]],[\"ion-item_8\",[[33,\"ion-item-divider\",{\"color\":[513],\"sticky\":[4]}],[32,\"ion-item-group\"],[33,\"ion-note\",{\"color\":[513]}],[1,\"ion-skeleton-text\",{\"animated\":[4]}],[49,\"ion-item\",{\"color\":[513],\"button\":[4],\"detail\":[4],\"detailIcon\":[1,\"detail-icon\"],\"disabled\":[4],\"download\":[1],\"href\":[1],\"rel\":[1],\"lines\":[1],\"routerAnimation\":[16],\"routerDirection\":[1,\"router-direction\"],\"target\":[1],\"type\":[1],\"multipleInputs\":[32],\"focusable\":[32]},[[0,\"ionColor\",\"labelColorChanged\"],[0,\"ionStyle\",\"itemStyle\"]]],[34,\"ion-label\",{\"color\":[513],\"position\":[1],\"noAnimate\":[32]}],[32,\"ion-list\",{\"lines\":[1],\"inset\":[4],\"closeSlidingItems\":[64]}],[33,\"ion-list-header\",{\"color\":[513],\"lines\":[1]}]]]]'),o)}))};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvZGlzdC9lc20tZXM1L2xvYWRlci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWdNLHdCQUF3QixLQUFLLGlEQUFHLEVBQUUsMERBQVksRUFBRSwwREFBWSx1QkFBdUIsT0FBTyxrUUFBZ0Msa0JBQWtCLEdBQUcsMkRBQWEsQ0FBQywyREFBYSxFQUFFLE9BQU8sNkRBQWUsR0FBRyxLQUFLLFVBQVUsR0FBRyxPQUFPLHFEQUFjLElBQUksdUNBQXVDLHdEQUF3RCxtQ0FBbUMsMkRBQWEsR0FBRyxPQUFPLHFEQUFhLHdEQUF3RCx1RUFBdUUsaURBQWlELDZSQUE2UiwwQkFBMEIsMkJBQTJCLDBDQUEwQyw2RkFBNkYsNEdBQTRHLHNTQUFzUyxrSUFBa0kscURBQXFELDJJQUEySSwrV0FBK1csd0NBQXdDLDhPQUE4TyxnQkFBZ0IsMkVBQTJFLHFCQUFxQiwyQkFBMkIsb0RBQW9ELDRKQUE0Six1QkFBdUIscVFBQXFRLG1DQUFtQyw2WUFBNlksMkVBQTJFLDJIQUEySCx1Q0FBdUMsdVlBQXVZLG1DQUFtQyxtV0FBbVcsbUNBQW1DLHNLQUFzSyxpREFBaUQsZ0NBQWdDLDJCQUEyQixjQUFjLHdCQUF3QixjQUFjLGlEQUFpRCwwR0FBMEcsMEJBQTBCLGlDQUFpQyx5QkFBeUIsb0hBQW9ILGlFQUFpRSwyRUFBMkUsNEJBQTRCLCtFQUErRSw4RkFBOEYsNENBQTRDLGdEQUFnRCxrRUFBa0UscUJBQXFCLGlIQUFpSCw0Q0FBNEMsNEdBQTRHLGdFQUFnRSx3RkFBd0YsaUNBQWlDLDJDQUEyQyxtQ0FBbUMsMGJBQTBiLHVDQUF1QywyWkFBMlosMkNBQTJDLGlmQUFpZixtREFBbUQsZUFBZSxvQkFBb0IsMlFBQTJRLHNFQUFzRSxrQkFBa0Isb0JBQW9CLGlDQUFpQywwQkFBMEIsb0lBQW9JLG1CQUFtQix5QkFBeUIscUJBQXFCLGNBQWMscUVBQXFFLHNGQUFzRiwyQkFBMkIsb0JBQW9CLG1CQUFtQixxSEFBcUgseUZBQXlGLGdIQUFnSCx3REFBd0QsY0FBYyxvREFBb0QsOGdCQUE4Z0IsMkNBQTJDLFlBQVksOENBQThDLHNXQUFzVyxxQkFBcUIsc0dBQXNHLHNEQUFzRCx1VkFBdVYsZ0NBQWdDLDJFQUEyRSxpQkFBaUIsc0lBQXNJLHlDQUF5Qyw0RkFBNEYsOEJBQThCLG9EQUFvRCxtQ0FBbUMsb2lCQUFvaUIsaURBQWlELGlFQUFpRSxtQ0FBbUMsbU5BQW1OLDZDQUE2Qyx3RUFBd0UsZ0NBQWdDLGNBQWMseUNBQXlDLGdjQUFnYyxxQ0FBcUMsc0ZBQXNGLG9EQUFvRCw0WkFBNFosbUVBQW1FLHNaQUFzWixzQkFBc0IsMm1CQUEybUIsMkJBQTJCLFdBQVcscUNBQXFDLGtJQUFrSSx3QkFBd0IsNEVBQTRFLGtFQUFrRSxxREFBcUQseUNBQXlDLHNFQUFzRSw4RUFBOEUsNEJBQTRCLHVDQUF1QyxrUUFBa1EsaUJBQWlCLGlQQUFpUCwyQ0FBMkMsMkJBQTJCLHdDQUF3QyxjQUFjLDBCQUEwQixlQUFlLGtCQUFrQixxUUFBcVEsbUZBQW1GLDhDQUE4QyxrQkFBa0IsaURBQWlELHlCQUF5QiwwQkFBMEIsVUFBVSIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AaW9uaWMvY29yZS9kaXN0L2VzbS1lczUvbG9hZGVyLmpzPzc0YzQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0e0MgYXMgQ1NTLHAgYXMgcGx0LHcgYXMgd2luLGEgYXMgcHJvbWlzZVJlc29sdmUsYiBhcyBib290c3RyYXBMYXp5fWZyb21cIi4vaW5kZXgtN2E4YjdhMWMuanNcIjtpbXBvcnR7ZyBhcyBnbG9iYWxTY3JpcHRzfWZyb21cIi4vYXBwLWdsb2JhbHMtZmQ4MDdiOWEuanNcIjtpbXBvcnRcIi4vaW9uaWMtZ2xvYmFsLTYzYTk3YTMyLmpzXCI7dmFyIHBhdGNoRXNtPWZ1bmN0aW9uKCl7aWYoIShDU1MmJkNTUy5zdXBwb3J0cyYmQ1NTLnN1cHBvcnRzKFwiY29sb3JcIixcInZhcigtLWMpXCIpKSl7cmV0dXJuIGltcG9ydChcIi4vY3NzLXNoaW0tMmNjZjRkZWMuanNcIikudGhlbigoZnVuY3Rpb24oKXtpZihwbHQuJGNzc1NoaW0kPXdpbi5fX2Nzc3NoaW0pe3JldHVybiBwbHQuJGNzc1NoaW0kLmkoKX1lbHNle3JldHVybiAwfX0pKX1yZXR1cm4gcHJvbWlzZVJlc29sdmUoKX07dmFyIGRlZmluZUN1c3RvbUVsZW1lbnRzPWZ1bmN0aW9uKGUsbyl7aWYodHlwZW9mIHdpbmRvdz09PVwidW5kZWZpbmVkXCIpcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO3JldHVybiBwYXRjaEVzbSgpLnRoZW4oKGZ1bmN0aW9uKCl7Z2xvYmFsU2NyaXB0cygpO3JldHVybiBib290c3RyYXBMYXp5KEpTT04ucGFyc2UoJ1tbXCJpb24tc2VsZWN0XzNcIixbWzIsXCJpb24tc2VsZWN0LXBvcG92ZXJcIix7XCJoZWFkZXJcIjpbMV0sXCJzdWJIZWFkZXJcIjpbMSxcInN1Yi1oZWFkZXJcIl0sXCJtZXNzYWdlXCI6WzFdLFwib3B0aW9uc1wiOlsxNl19LFtbMCxcImlvbkNoYW5nZVwiLFwib25TZWxlY3RcIl1dXSxbMzMsXCJpb24tc2VsZWN0XCIse1wiZGlzYWJsZWRcIjpbNF0sXCJjYW5jZWxUZXh0XCI6WzEsXCJjYW5jZWwtdGV4dFwiXSxcIm9rVGV4dFwiOlsxLFwib2stdGV4dFwiXSxcInBsYWNlaG9sZGVyXCI6WzFdLFwibmFtZVwiOlsxXSxcInNlbGVjdGVkVGV4dFwiOlsxLFwic2VsZWN0ZWQtdGV4dFwiXSxcIm11bHRpcGxlXCI6WzRdLFwiaW50ZXJmYWNlXCI6WzFdLFwiaW50ZXJmYWNlT3B0aW9uc1wiOls4LFwiaW50ZXJmYWNlLW9wdGlvbnNcIl0sXCJjb21wYXJlV2l0aFwiOlsxLFwiY29tcGFyZS13aXRoXCJdLFwidmFsdWVcIjpbMTAzMl0sXCJpc0V4cGFuZGVkXCI6WzMyXSxcIm9wZW5cIjpbNjRdfV0sWzEsXCJpb24tc2VsZWN0LW9wdGlvblwiLHtcImRpc2FibGVkXCI6WzRdLFwidmFsdWVcIjpbOF19XV1dLFtcImlvbi1tZW51XzNcIixbWzMzLFwiaW9uLW1lbnUtYnV0dG9uXCIse1wiY29sb3JcIjpbNTEzXSxcImRpc2FibGVkXCI6WzRdLFwibWVudVwiOlsxXSxcImF1dG9IaWRlXCI6WzQsXCJhdXRvLWhpZGVcIl0sXCJ0eXBlXCI6WzFdLFwidmlzaWJsZVwiOlszMl19LFtbMTYsXCJpb25NZW51Q2hhbmdlXCIsXCJ2aXNpYmlsaXR5Q2hhbmdlZFwiXSxbMTYsXCJpb25TcGxpdFBhbmVWaXNpYmxlXCIsXCJ2aXNpYmlsaXR5Q2hhbmdlZFwiXV1dLFszMyxcImlvbi1tZW51XCIse1wiY29udGVudElkXCI6WzUxMyxcImNvbnRlbnQtaWRcIl0sXCJtZW51SWRcIjpbNTEzLFwibWVudS1pZFwiXSxcInR5cGVcIjpbMTAyNV0sXCJkaXNhYmxlZFwiOlsxMDI4XSxcInNpZGVcIjpbNTEzXSxcInN3aXBlR2VzdHVyZVwiOls0LFwic3dpcGUtZ2VzdHVyZVwiXSxcIm1heEVkZ2VTdGFydFwiOlsyLFwibWF4LWVkZ2Utc3RhcnRcIl0sXCJpc1BhbmVWaXNpYmxlXCI6WzMyXSxcImlzRW5kU2lkZVwiOlszMl0sXCJpc09wZW5cIjpbNjRdLFwiaXNBY3RpdmVcIjpbNjRdLFwib3BlblwiOls2NF0sXCJjbG9zZVwiOls2NF0sXCJ0b2dnbGVcIjpbNjRdLFwic2V0T3BlblwiOls2NF19LFtbMTYsXCJpb25TcGxpdFBhbmVWaXNpYmxlXCIsXCJvblNwbGl0UGFuZUNoYW5nZWRcIl0sWzIsXCJjbGlja1wiLFwib25CYWNrZHJvcENsaWNrXCJdLFswLFwia2V5ZG93blwiLFwib25LZXlkb3duXCJdXV0sWzEsXCJpb24tbWVudS10b2dnbGVcIix7XCJtZW51XCI6WzFdLFwiYXV0b0hpZGVcIjpbNCxcImF1dG8taGlkZVwiXSxcInZpc2libGVcIjpbMzJdfSxbWzE2LFwiaW9uTWVudUNoYW5nZVwiLFwidmlzaWJpbGl0eUNoYW5nZWRcIl0sWzE2LFwiaW9uU3BsaXRQYW5lVmlzaWJsZVwiLFwidmlzaWJpbGl0eUNoYW5nZWRcIl1dXV1dLFtcImlvbi1hY3Rpb24tc2hlZXRcIixbWzM0LFwiaW9uLWFjdGlvbi1zaGVldFwiLHtcIm92ZXJsYXlJbmRleFwiOlsyLFwib3ZlcmxheS1pbmRleFwiXSxcImtleWJvYXJkQ2xvc2VcIjpbNCxcImtleWJvYXJkLWNsb3NlXCJdLFwiZW50ZXJBbmltYXRpb25cIjpbMTZdLFwibGVhdmVBbmltYXRpb25cIjpbMTZdLFwiYnV0dG9uc1wiOlsxNl0sXCJjc3NDbGFzc1wiOlsxLFwiY3NzLWNsYXNzXCJdLFwiYmFja2Ryb3BEaXNtaXNzXCI6WzQsXCJiYWNrZHJvcC1kaXNtaXNzXCJdLFwiaGVhZGVyXCI6WzFdLFwic3ViSGVhZGVyXCI6WzEsXCJzdWItaGVhZGVyXCJdLFwidHJhbnNsdWNlbnRcIjpbNF0sXCJhbmltYXRlZFwiOls0XSxcImh0bWxBdHRyaWJ1dGVzXCI6WzE2XSxcInByZXNlbnRcIjpbNjRdLFwiZGlzbWlzc1wiOls2NF0sXCJvbkRpZERpc21pc3NcIjpbNjRdLFwib25XaWxsRGlzbWlzc1wiOls2NF19XV1dLFtcImlvbi1mYWJfM1wiLFtbMzMsXCJpb24tZmFiLWJ1dHRvblwiLHtcImNvbG9yXCI6WzUxM10sXCJhY3RpdmF0ZWRcIjpbNF0sXCJkaXNhYmxlZFwiOls0XSxcImRvd25sb2FkXCI6WzFdLFwiaHJlZlwiOlsxXSxcInJlbFwiOlsxXSxcInJvdXRlckRpcmVjdGlvblwiOlsxLFwicm91dGVyLWRpcmVjdGlvblwiXSxcInJvdXRlckFuaW1hdGlvblwiOlsxNl0sXCJ0YXJnZXRcIjpbMV0sXCJzaG93XCI6WzRdLFwidHJhbnNsdWNlbnRcIjpbNF0sXCJ0eXBlXCI6WzFdLFwic2l6ZVwiOlsxXSxcImNsb3NlSWNvblwiOlsxLFwiY2xvc2UtaWNvblwiXX1dLFsxLFwiaW9uLWZhYlwiLHtcImhvcml6b250YWxcIjpbMV0sXCJ2ZXJ0aWNhbFwiOlsxXSxcImVkZ2VcIjpbNF0sXCJhY3RpdmF0ZWRcIjpbMTAyOF0sXCJjbG9zZVwiOls2NF19XSxbMSxcImlvbi1mYWItbGlzdFwiLHtcImFjdGl2YXRlZFwiOls0XSxcInNpZGVcIjpbMV19XV1dLFtcImlvbi1yZWZyZXNoZXJfMlwiLFtbMCxcImlvbi1yZWZyZXNoZXItY29udGVudFwiLHtcInB1bGxpbmdJY29uXCI6WzEwMjUsXCJwdWxsaW5nLWljb25cIl0sXCJwdWxsaW5nVGV4dFwiOlsxLFwicHVsbGluZy10ZXh0XCJdLFwicmVmcmVzaGluZ1NwaW5uZXJcIjpbMTAyNSxcInJlZnJlc2hpbmctc3Bpbm5lclwiXSxcInJlZnJlc2hpbmdUZXh0XCI6WzEsXCJyZWZyZXNoaW5nLXRleHRcIl19XSxbMzIsXCJpb24tcmVmcmVzaGVyXCIse1wicHVsbE1pblwiOlsyLFwicHVsbC1taW5cIl0sXCJwdWxsTWF4XCI6WzIsXCJwdWxsLW1heFwiXSxcImNsb3NlRHVyYXRpb25cIjpbMSxcImNsb3NlLWR1cmF0aW9uXCJdLFwic25hcGJhY2tEdXJhdGlvblwiOlsxLFwic25hcGJhY2stZHVyYXRpb25cIl0sXCJwdWxsRmFjdG9yXCI6WzIsXCJwdWxsLWZhY3RvclwiXSxcImRpc2FibGVkXCI6WzRdLFwibmF0aXZlUmVmcmVzaGVyXCI6WzMyXSxcInN0YXRlXCI6WzMyXSxcImNvbXBsZXRlXCI6WzY0XSxcImNhbmNlbFwiOls2NF0sXCJnZXRQcm9ncmVzc1wiOls2NF19XV1dLFtcImlvbi1hbGVydFwiLFtbMzQsXCJpb24tYWxlcnRcIix7XCJvdmVybGF5SW5kZXhcIjpbMixcIm92ZXJsYXktaW5kZXhcIl0sXCJrZXlib2FyZENsb3NlXCI6WzQsXCJrZXlib2FyZC1jbG9zZVwiXSxcImVudGVyQW5pbWF0aW9uXCI6WzE2XSxcImxlYXZlQW5pbWF0aW9uXCI6WzE2XSxcImNzc0NsYXNzXCI6WzEsXCJjc3MtY2xhc3NcIl0sXCJoZWFkZXJcIjpbMV0sXCJzdWJIZWFkZXJcIjpbMSxcInN1Yi1oZWFkZXJcIl0sXCJtZXNzYWdlXCI6WzFdLFwiYnV0dG9uc1wiOlsxNl0sXCJpbnB1dHNcIjpbMTA0MF0sXCJiYWNrZHJvcERpc21pc3NcIjpbNCxcImJhY2tkcm9wLWRpc21pc3NcIl0sXCJ0cmFuc2x1Y2VudFwiOls0XSxcImFuaW1hdGVkXCI6WzRdLFwiaHRtbEF0dHJpYnV0ZXNcIjpbMTZdLFwicHJlc2VudFwiOls2NF0sXCJkaXNtaXNzXCI6WzY0XSxcIm9uRGlkRGlzbWlzc1wiOls2NF0sXCJvbldpbGxEaXNtaXNzXCI6WzY0XX0sW1s0LFwia2V5ZG93blwiLFwib25LZXlkb3duXCJdXV1dXSxbXCJpb24tYmFjay1idXR0b25cIixbWzMzLFwiaW9uLWJhY2stYnV0dG9uXCIse1wiY29sb3JcIjpbNTEzXSxcImRlZmF1bHRIcmVmXCI6WzEwMjUsXCJkZWZhdWx0LWhyZWZcIl0sXCJkaXNhYmxlZFwiOls1MTZdLFwiaWNvblwiOlsxXSxcInRleHRcIjpbMV0sXCJ0eXBlXCI6WzFdLFwicm91dGVyQW5pbWF0aW9uXCI6WzE2XX1dXV0sW1wiaW9uLWxvYWRpbmdcIixbWzM0LFwiaW9uLWxvYWRpbmdcIix7XCJvdmVybGF5SW5kZXhcIjpbMixcIm92ZXJsYXktaW5kZXhcIl0sXCJrZXlib2FyZENsb3NlXCI6WzQsXCJrZXlib2FyZC1jbG9zZVwiXSxcImVudGVyQW5pbWF0aW9uXCI6WzE2XSxcImxlYXZlQW5pbWF0aW9uXCI6WzE2XSxcIm1lc3NhZ2VcIjpbMV0sXCJjc3NDbGFzc1wiOlsxLFwiY3NzLWNsYXNzXCJdLFwiZHVyYXRpb25cIjpbMl0sXCJiYWNrZHJvcERpc21pc3NcIjpbNCxcImJhY2tkcm9wLWRpc21pc3NcIl0sXCJzaG93QmFja2Ryb3BcIjpbNCxcInNob3ctYmFja2Ryb3BcIl0sXCJzcGlubmVyXCI6WzEwMjVdLFwidHJhbnNsdWNlbnRcIjpbNF0sXCJhbmltYXRlZFwiOls0XSxcImh0bWxBdHRyaWJ1dGVzXCI6WzE2XSxcInByZXNlbnRcIjpbNjRdLFwiZGlzbWlzc1wiOls2NF0sXCJvbkRpZERpc21pc3NcIjpbNjRdLFwib25XaWxsRGlzbWlzc1wiOls2NF19XV1dLFtcImlvbi10b2FzdFwiLFtbMzMsXCJpb24tdG9hc3RcIix7XCJvdmVybGF5SW5kZXhcIjpbMixcIm92ZXJsYXktaW5kZXhcIl0sXCJjb2xvclwiOls1MTNdLFwiZW50ZXJBbmltYXRpb25cIjpbMTZdLFwibGVhdmVBbmltYXRpb25cIjpbMTZdLFwiY3NzQ2xhc3NcIjpbMSxcImNzcy1jbGFzc1wiXSxcImR1cmF0aW9uXCI6WzJdLFwiaGVhZGVyXCI6WzFdLFwibWVzc2FnZVwiOlsxXSxcImtleWJvYXJkQ2xvc2VcIjpbNCxcImtleWJvYXJkLWNsb3NlXCJdLFwicG9zaXRpb25cIjpbMV0sXCJidXR0b25zXCI6WzE2XSxcInRyYW5zbHVjZW50XCI6WzRdLFwiYW5pbWF0ZWRcIjpbNF0sXCJodG1sQXR0cmlidXRlc1wiOlsxNl0sXCJwcmVzZW50XCI6WzY0XSxcImRpc21pc3NcIjpbNjRdLFwib25EaWREaXNtaXNzXCI6WzY0XSxcIm9uV2lsbERpc21pc3NcIjpbNjRdfV1dXSxbXCJpb24tY2FyZF81XCIsW1szMyxcImlvbi1jYXJkXCIse1wiY29sb3JcIjpbNTEzXSxcImJ1dHRvblwiOls0XSxcInR5cGVcIjpbMV0sXCJkaXNhYmxlZFwiOls0XSxcImRvd25sb2FkXCI6WzFdLFwiaHJlZlwiOlsxXSxcInJlbFwiOlsxXSxcInJvdXRlckRpcmVjdGlvblwiOlsxLFwicm91dGVyLWRpcmVjdGlvblwiXSxcInJvdXRlckFuaW1hdGlvblwiOlsxNl0sXCJ0YXJnZXRcIjpbMV19XSxbMzIsXCJpb24tY2FyZC1jb250ZW50XCJdLFszMyxcImlvbi1jYXJkLWhlYWRlclwiLHtcImNvbG9yXCI6WzUxM10sXCJ0cmFuc2x1Y2VudFwiOls0XX1dLFszMyxcImlvbi1jYXJkLXN1YnRpdGxlXCIse1wiY29sb3JcIjpbNTEzXX1dLFszMyxcImlvbi1jYXJkLXRpdGxlXCIse1wiY29sb3JcIjpbNTEzXX1dXV0sW1wiaW9uLWl0ZW0tb3B0aW9uXzNcIixbWzMzLFwiaW9uLWl0ZW0tb3B0aW9uXCIse1wiY29sb3JcIjpbNTEzXSxcImRpc2FibGVkXCI6WzRdLFwiZG93bmxvYWRcIjpbMV0sXCJleHBhbmRhYmxlXCI6WzRdLFwiaHJlZlwiOlsxXSxcInJlbFwiOlsxXSxcInRhcmdldFwiOlsxXSxcInR5cGVcIjpbMV19XSxbMzIsXCJpb24taXRlbS1vcHRpb25zXCIse1wic2lkZVwiOlsxXSxcImZpcmVTd2lwZUV2ZW50XCI6WzY0XX1dLFswLFwiaW9uLWl0ZW0tc2xpZGluZ1wiLHtcImRpc2FibGVkXCI6WzRdLFwic3RhdGVcIjpbMzJdLFwiZ2V0T3BlbkFtb3VudFwiOls2NF0sXCJnZXRTbGlkaW5nUmF0aW9cIjpbNjRdLFwib3BlblwiOls2NF0sXCJjbG9zZVwiOls2NF0sXCJjbG9zZU9wZW5lZFwiOls2NF19XV1dLFtcImlvbi1pbmZpbml0ZS1zY3JvbGxfMlwiLFtbMzIsXCJpb24taW5maW5pdGUtc2Nyb2xsLWNvbnRlbnRcIix7XCJsb2FkaW5nU3Bpbm5lclwiOlsxMDI1LFwibG9hZGluZy1zcGlubmVyXCJdLFwibG9hZGluZ1RleHRcIjpbMSxcImxvYWRpbmctdGV4dFwiXX1dLFswLFwiaW9uLWluZmluaXRlLXNjcm9sbFwiLHtcInRocmVzaG9sZFwiOlsxXSxcImRpc2FibGVkXCI6WzRdLFwicG9zaXRpb25cIjpbMV0sXCJpc0xvYWRpbmdcIjpbMzJdLFwiY29tcGxldGVcIjpbNjRdfV1dXSxbXCJpb24tcmVvcmRlcl8yXCIsW1szMyxcImlvbi1yZW9yZGVyXCIsbnVsbCxbWzIsXCJjbGlja1wiLFwib25DbGlja1wiXV1dLFswLFwiaW9uLXJlb3JkZXItZ3JvdXBcIix7XCJkaXNhYmxlZFwiOls0XSxcInN0YXRlXCI6WzMyXSxcImNvbXBsZXRlXCI6WzY0XX1dXV0sW1wiaW9uLXNlZ21lbnRfMlwiLFtbMzMsXCJpb24tc2VnbWVudC1idXR0b25cIix7XCJkaXNhYmxlZFwiOls0XSxcImxheW91dFwiOlsxXSxcInR5cGVcIjpbMV0sXCJ2YWx1ZVwiOlsxXSxcImNoZWNrZWRcIjpbMzJdfV0sWzMzLFwiaW9uLXNlZ21lbnRcIix7XCJjb2xvclwiOls1MTNdLFwiZGlzYWJsZWRcIjpbNF0sXCJzY3JvbGxhYmxlXCI6WzRdLFwic3dpcGVHZXN0dXJlXCI6WzQsXCJzd2lwZS1nZXN0dXJlXCJdLFwidmFsdWVcIjpbMTAyNV0sXCJhY3RpdmF0ZWRcIjpbMzJdfV1dXSxbXCJpb24tdGFiLWJhcl8yXCIsW1szMyxcImlvbi10YWItYnV0dG9uXCIse1wiZGlzYWJsZWRcIjpbNF0sXCJkb3dubG9hZFwiOlsxXSxcImhyZWZcIjpbMV0sXCJyZWxcIjpbMV0sXCJsYXlvdXRcIjpbMTAyNV0sXCJzZWxlY3RlZFwiOlsxMDI4XSxcInRhYlwiOlsxXSxcInRhcmdldFwiOlsxXX0sW1s4LFwiaW9uVGFiQmFyQ2hhbmdlZFwiLFwib25UYWJCYXJDaGFuZ2VkXCJdXV0sWzMzLFwiaW9uLXRhYi1iYXJcIix7XCJjb2xvclwiOls1MTNdLFwic2VsZWN0ZWRUYWJcIjpbMSxcInNlbGVjdGVkLXRhYlwiXSxcInRyYW5zbHVjZW50XCI6WzRdLFwia2V5Ym9hcmRWaXNpYmxlXCI6WzMyXX1dXV0sW1wiaW9uLWNoaXBcIixbWzMzLFwiaW9uLWNoaXBcIix7XCJjb2xvclwiOls1MTNdLFwib3V0bGluZVwiOls0XSxcImRpc2FibGVkXCI6WzRdfV1dXSxbXCJpb24tbW9kYWxcIixbWzM0LFwiaW9uLW1vZGFsXCIse1wib3ZlcmxheUluZGV4XCI6WzIsXCJvdmVybGF5LWluZGV4XCJdLFwiZGVsZWdhdGVcIjpbMTZdLFwia2V5Ym9hcmRDbG9zZVwiOls0LFwia2V5Ym9hcmQtY2xvc2VcIl0sXCJlbnRlckFuaW1hdGlvblwiOlsxNl0sXCJsZWF2ZUFuaW1hdGlvblwiOlsxNl0sXCJjb21wb25lbnRcIjpbMV0sXCJjb21wb25lbnRQcm9wc1wiOlsxNl0sXCJjc3NDbGFzc1wiOlsxLFwiY3NzLWNsYXNzXCJdLFwiYmFja2Ryb3BEaXNtaXNzXCI6WzQsXCJiYWNrZHJvcC1kaXNtaXNzXCJdLFwic2hvd0JhY2tkcm9wXCI6WzQsXCJzaG93LWJhY2tkcm9wXCJdLFwiYW5pbWF0ZWRcIjpbNF0sXCJzd2lwZVRvQ2xvc2VcIjpbNCxcInN3aXBlLXRvLWNsb3NlXCJdLFwicHJlc2VudGluZ0VsZW1lbnRcIjpbMTZdLFwiaHRtbEF0dHJpYnV0ZXNcIjpbMTZdLFwicHJlc2VudFwiOls2NF0sXCJkaXNtaXNzXCI6WzY0XSxcIm9uRGlkRGlzbWlzc1wiOls2NF0sXCJvbldpbGxEaXNtaXNzXCI6WzY0XX1dXV0sW1wiaW9uLXBvcG92ZXJcIixbWzM0LFwiaW9uLXBvcG92ZXJcIix7XCJkZWxlZ2F0ZVwiOlsxNl0sXCJvdmVybGF5SW5kZXhcIjpbMixcIm92ZXJsYXktaW5kZXhcIl0sXCJlbnRlckFuaW1hdGlvblwiOlsxNl0sXCJsZWF2ZUFuaW1hdGlvblwiOlsxNl0sXCJjb21wb25lbnRcIjpbMV0sXCJjb21wb25lbnRQcm9wc1wiOlsxNl0sXCJrZXlib2FyZENsb3NlXCI6WzQsXCJrZXlib2FyZC1jbG9zZVwiXSxcImNzc0NsYXNzXCI6WzEsXCJjc3MtY2xhc3NcIl0sXCJiYWNrZHJvcERpc21pc3NcIjpbNCxcImJhY2tkcm9wLWRpc21pc3NcIl0sXCJldmVudFwiOls4XSxcInNob3dCYWNrZHJvcFwiOls0LFwic2hvdy1iYWNrZHJvcFwiXSxcInRyYW5zbHVjZW50XCI6WzRdLFwiYW5pbWF0ZWRcIjpbNF0sXCJodG1sQXR0cmlidXRlc1wiOlsxNl0sXCJwcmVzZW50XCI6WzY0XSxcImRpc21pc3NcIjpbNjRdLFwib25EaWREaXNtaXNzXCI6WzY0XSxcIm9uV2lsbERpc21pc3NcIjpbNjRdfV1dXSxbXCJpb24tc2VhcmNoYmFyXCIsW1szNCxcImlvbi1zZWFyY2hiYXJcIix7XCJjb2xvclwiOls1MTNdLFwiYW5pbWF0ZWRcIjpbNF0sXCJhdXRvY29tcGxldGVcIjpbMV0sXCJhdXRvY29ycmVjdFwiOlsxXSxcImNhbmNlbEJ1dHRvbkljb25cIjpbMSxcImNhbmNlbC1idXR0b24taWNvblwiXSxcImNhbmNlbEJ1dHRvblRleHRcIjpbMSxcImNhbmNlbC1idXR0b24tdGV4dFwiXSxcImNsZWFySWNvblwiOlsxLFwiY2xlYXItaWNvblwiXSxcImRlYm91bmNlXCI6WzJdLFwiZGlzYWJsZWRcIjpbNF0sXCJpbnB1dG1vZGVcIjpbMV0sXCJlbnRlcmtleWhpbnRcIjpbMV0sXCJwbGFjZWhvbGRlclwiOlsxXSxcInNlYXJjaEljb25cIjpbMSxcInNlYXJjaC1pY29uXCJdLFwic2hvd0NhbmNlbEJ1dHRvblwiOlsxLFwic2hvdy1jYW5jZWwtYnV0dG9uXCJdLFwic2hvd0NsZWFyQnV0dG9uXCI6WzEsXCJzaG93LWNsZWFyLWJ1dHRvblwiXSxcInNwZWxsY2hlY2tcIjpbNF0sXCJ0eXBlXCI6WzFdLFwidmFsdWVcIjpbMTAyNV0sXCJmb2N1c2VkXCI6WzMyXSxcIm5vQW5pbWF0ZVwiOlszMl0sXCJzZXRGb2N1c1wiOls2NF0sXCJnZXRJbnB1dEVsZW1lbnRcIjpbNjRdfV1dXSxbXCJpb24tYXBwXzhcIixbWzAsXCJpb24tYXBwXCJdLFszNCxcImlvbi1idXR0b25zXCIse1wiY29sbGFwc2VcIjpbNF19XSxbMSxcImlvbi1jb250ZW50XCIse1wiY29sb3JcIjpbNTEzXSxcImZ1bGxzY3JlZW5cIjpbNF0sXCJmb3JjZU92ZXJzY3JvbGxcIjpbMTAyOCxcImZvcmNlLW92ZXJzY3JvbGxcIl0sXCJzY3JvbGxYXCI6WzQsXCJzY3JvbGwteFwiXSxcInNjcm9sbFlcIjpbNCxcInNjcm9sbC15XCJdLFwic2Nyb2xsRXZlbnRzXCI6WzQsXCJzY3JvbGwtZXZlbnRzXCJdLFwiZ2V0U2Nyb2xsRWxlbWVudFwiOls2NF0sXCJzY3JvbGxUb1RvcFwiOls2NF0sXCJzY3JvbGxUb0JvdHRvbVwiOls2NF0sXCJzY3JvbGxCeVBvaW50XCI6WzY0XSxcInNjcm9sbFRvUG9pbnRcIjpbNjRdfSxbWzgsXCJhcHBsb2FkXCIsXCJvbkFwcExvYWRcIl0sWzIsXCJjbGlja1wiLFwib25DbGlja1wiXV1dLFszNixcImlvbi1mb290ZXJcIix7XCJ0cmFuc2x1Y2VudFwiOls0XX1dLFszNixcImlvbi1oZWFkZXJcIix7XCJjb2xsYXBzZVwiOlsxXSxcInRyYW5zbHVjZW50XCI6WzRdfV0sWzEsXCJpb24tcm91dGVyLW91dGxldFwiLHtcIm1vZGVcIjpbMTAyNV0sXCJkZWxlZ2F0ZVwiOlsxNl0sXCJhbmltYXRlZFwiOls0XSxcImFuaW1hdGlvblwiOlsxNl0sXCJzd2lwZUhhbmRsZXJcIjpbMTZdLFwiY29tbWl0XCI6WzY0XSxcInNldFJvdXRlSWRcIjpbNjRdLFwiZ2V0Um91dGVJZFwiOls2NF19XSxbMzMsXCJpb24tdGl0bGVcIix7XCJjb2xvclwiOls1MTNdLFwic2l6ZVwiOlsxXX1dLFszMyxcImlvbi10b29sYmFyXCIse1wiY29sb3JcIjpbNTEzXX0sW1swLFwiaW9uU3R5bGVcIixcImNoaWxkcmVuU3R5bGVcIl1dXV1dLFtcImlvbi1yb3V0ZV80XCIsW1swLFwiaW9uLXJvdXRlXCIse1widXJsXCI6WzFdLFwiY29tcG9uZW50XCI6WzFdLFwiY29tcG9uZW50UHJvcHNcIjpbMTZdLFwiYmVmb3JlTGVhdmVcIjpbMTZdLFwiYmVmb3JlRW50ZXJcIjpbMTZdfV0sWzAsXCJpb24tcm91dGUtcmVkaXJlY3RcIix7XCJmcm9tXCI6WzFdLFwidG9cIjpbMV19XSxbMCxcImlvbi1yb3V0ZXJcIix7XCJyb290XCI6WzFdLFwidXNlSGFzaFwiOls0LFwidXNlLWhhc2hcIl0sXCJjYW5UcmFuc2l0aW9uXCI6WzY0XSxcInB1c2hcIjpbNjRdLFwiYmFja1wiOls2NF0sXCJwcmludERlYnVnXCI6WzY0XSxcIm5hdkNoYW5nZWRcIjpbNjRdfSxbWzgsXCJwb3BzdGF0ZVwiLFwib25Qb3BTdGF0ZVwiXSxbNCxcImlvbkJhY2tCdXR0b25cIixcIm9uQmFja0J1dHRvblwiXV1dLFsxLFwiaW9uLXJvdXRlci1saW5rXCIse1wiY29sb3JcIjpbNTEzXSxcImhyZWZcIjpbMV0sXCJyZWxcIjpbMV0sXCJyb3V0ZXJEaXJlY3Rpb25cIjpbMSxcInJvdXRlci1kaXJlY3Rpb25cIl0sXCJyb3V0ZXJBbmltYXRpb25cIjpbMTZdLFwidGFyZ2V0XCI6WzFdfV1dXSxbXCJpb24tYXZhdGFyXzNcIixbWzMzLFwiaW9uLWF2YXRhclwiXSxbMzMsXCJpb24tYmFkZ2VcIix7XCJjb2xvclwiOls1MTNdfV0sWzEsXCJpb24tdGh1bWJuYWlsXCJdXV0sW1wiaW9uLWNvbF8zXCIsW1sxLFwiaW9uLWNvbFwiLHtcIm9mZnNldFwiOlsxXSxcIm9mZnNldFhzXCI6WzEsXCJvZmZzZXQteHNcIl0sXCJvZmZzZXRTbVwiOlsxLFwib2Zmc2V0LXNtXCJdLFwib2Zmc2V0TWRcIjpbMSxcIm9mZnNldC1tZFwiXSxcIm9mZnNldExnXCI6WzEsXCJvZmZzZXQtbGdcIl0sXCJvZmZzZXRYbFwiOlsxLFwib2Zmc2V0LXhsXCJdLFwicHVsbFwiOlsxXSxcInB1bGxYc1wiOlsxLFwicHVsbC14c1wiXSxcInB1bGxTbVwiOlsxLFwicHVsbC1zbVwiXSxcInB1bGxNZFwiOlsxLFwicHVsbC1tZFwiXSxcInB1bGxMZ1wiOlsxLFwicHVsbC1sZ1wiXSxcInB1bGxYbFwiOlsxLFwicHVsbC14bFwiXSxcInB1c2hcIjpbMV0sXCJwdXNoWHNcIjpbMSxcInB1c2gteHNcIl0sXCJwdXNoU21cIjpbMSxcInB1c2gtc21cIl0sXCJwdXNoTWRcIjpbMSxcInB1c2gtbWRcIl0sXCJwdXNoTGdcIjpbMSxcInB1c2gtbGdcIl0sXCJwdXNoWGxcIjpbMSxcInB1c2gteGxcIl0sXCJzaXplXCI6WzFdLFwic2l6ZVhzXCI6WzEsXCJzaXplLXhzXCJdLFwic2l6ZVNtXCI6WzEsXCJzaXplLXNtXCJdLFwic2l6ZU1kXCI6WzEsXCJzaXplLW1kXCJdLFwic2l6ZUxnXCI6WzEsXCJzaXplLWxnXCJdLFwic2l6ZVhsXCI6WzEsXCJzaXplLXhsXCJdfSxbWzksXCJyZXNpemVcIixcIm9uUmVzaXplXCJdXV0sWzEsXCJpb24tZ3JpZFwiLHtcImZpeGVkXCI6WzRdfV0sWzEsXCJpb24tcm93XCJdXV0sW1wiaW9uLW5hdl8yXCIsW1sxLFwiaW9uLW5hdlwiLHtcImRlbGVnYXRlXCI6WzE2XSxcInN3aXBlR2VzdHVyZVwiOlsxMDI4LFwic3dpcGUtZ2VzdHVyZVwiXSxcImFuaW1hdGVkXCI6WzRdLFwiYW5pbWF0aW9uXCI6WzE2XSxcInJvb3RQYXJhbXNcIjpbMTZdLFwicm9vdFwiOlsxXSxcInB1c2hcIjpbNjRdLFwiaW5zZXJ0XCI6WzY0XSxcImluc2VydFBhZ2VzXCI6WzY0XSxcInBvcFwiOls2NF0sXCJwb3BUb1wiOls2NF0sXCJwb3BUb1Jvb3RcIjpbNjRdLFwicmVtb3ZlSW5kZXhcIjpbNjRdLFwic2V0Um9vdFwiOls2NF0sXCJzZXRQYWdlc1wiOls2NF0sXCJzZXRSb3V0ZUlkXCI6WzY0XSxcImdldFJvdXRlSWRcIjpbNjRdLFwiZ2V0QWN0aXZlXCI6WzY0XSxcImdldEJ5SW5kZXhcIjpbNjRdLFwiY2FuR29CYWNrXCI6WzY0XSxcImdldFByZXZpb3VzXCI6WzY0XX1dLFswLFwiaW9uLW5hdi1saW5rXCIse1wiY29tcG9uZW50XCI6WzFdLFwiY29tcG9uZW50UHJvcHNcIjpbMTZdLFwicm91dGVyRGlyZWN0aW9uXCI6WzEsXCJyb3V0ZXItZGlyZWN0aW9uXCJdLFwicm91dGVyQW5pbWF0aW9uXCI6WzE2XX1dXV0sW1wiaW9uLXNsaWRlXzJcIixbWzAsXCJpb24tc2xpZGVcIl0sWzM2LFwiaW9uLXNsaWRlc1wiLHtcIm9wdGlvbnNcIjpbOF0sXCJwYWdlclwiOls0XSxcInNjcm9sbGJhclwiOls0XSxcInVwZGF0ZVwiOls2NF0sXCJ1cGRhdGVBdXRvSGVpZ2h0XCI6WzY0XSxcInNsaWRlVG9cIjpbNjRdLFwic2xpZGVOZXh0XCI6WzY0XSxcInNsaWRlUHJldlwiOls2NF0sXCJnZXRBY3RpdmVJbmRleFwiOls2NF0sXCJnZXRQcmV2aW91c0luZGV4XCI6WzY0XSxcImxlbmd0aFwiOls2NF0sXCJpc0VuZFwiOls2NF0sXCJpc0JlZ2lubmluZ1wiOls2NF0sXCJzdGFydEF1dG9wbGF5XCI6WzY0XSxcInN0b3BBdXRvcGxheVwiOls2NF0sXCJsb2NrU3dpcGVUb05leHRcIjpbNjRdLFwibG9ja1N3aXBlVG9QcmV2XCI6WzY0XSxcImxvY2tTd2lwZXNcIjpbNjRdLFwiZ2V0U3dpcGVyXCI6WzY0XX1dXV0sW1wiaW9uLXRhYl8yXCIsW1sxLFwiaW9uLXRhYlwiLHtcImFjdGl2ZVwiOlsxMDI4XSxcImRlbGVnYXRlXCI6WzE2XSxcInRhYlwiOlsxXSxcImNvbXBvbmVudFwiOlsxXSxcInNldEFjdGl2ZVwiOls2NF19XSxbMSxcImlvbi10YWJzXCIse1widXNlUm91dGVyXCI6WzEwMjgsXCJ1c2Utcm91dGVyXCJdLFwic2VsZWN0ZWRUYWJcIjpbMzJdLFwic2VsZWN0XCI6WzY0XSxcImdldFRhYlwiOls2NF0sXCJnZXRTZWxlY3RlZFwiOls2NF0sXCJzZXRSb3V0ZUlkXCI6WzY0XSxcImdldFJvdXRlSWRcIjpbNjRdfV1dXSxbXCJpb24tY2hlY2tib3hcIixbWzMzLFwiaW9uLWNoZWNrYm94XCIse1wiY29sb3JcIjpbNTEzXSxcIm5hbWVcIjpbMV0sXCJjaGVja2VkXCI6WzEwMjhdLFwiaW5kZXRlcm1pbmF0ZVwiOlsxMDI4XSxcImRpc2FibGVkXCI6WzRdLFwidmFsdWVcIjpbMV19XV1dLFtcImlvbi1pbWdcIixbWzEsXCJpb24taW1nXCIse1wiYWx0XCI6WzFdLFwic3JjXCI6WzFdLFwibG9hZFNyY1wiOlszMl0sXCJsb2FkRXJyb3JcIjpbMzJdfV1dXSxbXCJpb24taW5wdXRcIixbWzM0LFwiaW9uLWlucHV0XCIse1wiZmlyZUZvY3VzRXZlbnRzXCI6WzQsXCJmaXJlLWZvY3VzLWV2ZW50c1wiXSxcImNvbG9yXCI6WzUxM10sXCJhY2NlcHRcIjpbMV0sXCJhdXRvY2FwaXRhbGl6ZVwiOlsxXSxcImF1dG9jb21wbGV0ZVwiOlsxXSxcImF1dG9jb3JyZWN0XCI6WzFdLFwiYXV0b2ZvY3VzXCI6WzRdLFwiY2xlYXJJbnB1dFwiOls0LFwiY2xlYXItaW5wdXRcIl0sXCJjbGVhck9uRWRpdFwiOls0LFwiY2xlYXItb24tZWRpdFwiXSxcImRlYm91bmNlXCI6WzJdLFwiZGlzYWJsZWRcIjpbNF0sXCJlbnRlcmtleWhpbnRcIjpbMV0sXCJpbnB1dG1vZGVcIjpbMV0sXCJtYXhcIjpbMV0sXCJtYXhsZW5ndGhcIjpbMl0sXCJtaW5cIjpbMV0sXCJtaW5sZW5ndGhcIjpbMl0sXCJtdWx0aXBsZVwiOls0XSxcIm5hbWVcIjpbMV0sXCJwYXR0ZXJuXCI6WzFdLFwicGxhY2Vob2xkZXJcIjpbMV0sXCJyZWFkb25seVwiOls0XSxcInJlcXVpcmVkXCI6WzRdLFwic3BlbGxjaGVja1wiOls0XSxcInN0ZXBcIjpbMV0sXCJzaXplXCI6WzJdLFwidHlwZVwiOlsxXSxcInZhbHVlXCI6WzEwMzJdLFwiaGFzRm9jdXNcIjpbMzJdLFwic2V0Rm9jdXNcIjpbNjRdLFwic2V0Qmx1clwiOls2NF0sXCJnZXRJbnB1dEVsZW1lbnRcIjpbNjRdfV1dXSxbXCJpb24tcHJvZ3Jlc3MtYmFyXCIsW1szMyxcImlvbi1wcm9ncmVzcy1iYXJcIix7XCJ0eXBlXCI6WzFdLFwicmV2ZXJzZWRcIjpbNF0sXCJ2YWx1ZVwiOlsyXSxcImJ1ZmZlclwiOlsyXSxcImNvbG9yXCI6WzUxM119XV1dLFtcImlvbi1yYW5nZVwiLFtbMzMsXCJpb24tcmFuZ2VcIix7XCJjb2xvclwiOls1MTNdLFwiZGVib3VuY2VcIjpbMl0sXCJuYW1lXCI6WzFdLFwiZHVhbEtub2JzXCI6WzQsXCJkdWFsLWtub2JzXCJdLFwibWluXCI6WzJdLFwibWF4XCI6WzJdLFwicGluXCI6WzRdLFwic25hcHNcIjpbNF0sXCJzdGVwXCI6WzJdLFwidGlja3NcIjpbNF0sXCJkaXNhYmxlZFwiOls0XSxcInZhbHVlXCI6WzEwMjZdLFwicmF0aW9BXCI6WzMyXSxcInJhdGlvQlwiOlszMl0sXCJwcmVzc2VkS25vYlwiOlszMl19XV1dLFtcImlvbi1zcGxpdC1wYW5lXCIsW1szMyxcImlvbi1zcGxpdC1wYW5lXCIse1wiY29udGVudElkXCI6WzUxMyxcImNvbnRlbnQtaWRcIl0sXCJkaXNhYmxlZFwiOls0XSxcIndoZW5cIjpbOF0sXCJ2aXNpYmxlXCI6WzMyXX1dXV0sW1wiaW9uLXRleHRcIixbWzEsXCJpb24tdGV4dFwiLHtcImNvbG9yXCI6WzUxM119XV1dLFtcImlvbi10ZXh0YXJlYVwiLFtbMzQsXCJpb24tdGV4dGFyZWFcIix7XCJmaXJlRm9jdXNFdmVudHNcIjpbNCxcImZpcmUtZm9jdXMtZXZlbnRzXCJdLFwiY29sb3JcIjpbNTEzXSxcImF1dG9jYXBpdGFsaXplXCI6WzFdLFwiYXV0b2ZvY3VzXCI6WzRdLFwiY2xlYXJPbkVkaXRcIjpbMTAyOCxcImNsZWFyLW9uLWVkaXRcIl0sXCJkZWJvdW5jZVwiOlsyXSxcImRpc2FibGVkXCI6WzRdLFwiaW5wdXRtb2RlXCI6WzFdLFwiZW50ZXJrZXloaW50XCI6WzFdLFwibWF4bGVuZ3RoXCI6WzJdLFwibWlubGVuZ3RoXCI6WzJdLFwibmFtZVwiOlsxXSxcInBsYWNlaG9sZGVyXCI6WzFdLFwicmVhZG9ubHlcIjpbNF0sXCJyZXF1aXJlZFwiOls0XSxcInNwZWxsY2hlY2tcIjpbNF0sXCJjb2xzXCI6WzJdLFwicm93c1wiOlsyXSxcIndyYXBcIjpbMV0sXCJhdXRvR3Jvd1wiOls0LFwiYXV0by1ncm93XCJdLFwidmFsdWVcIjpbMTAyNV0sXCJoYXNGb2N1c1wiOlszMl0sXCJzZXRGb2N1c1wiOls2NF0sXCJzZXRCbHVyXCI6WzY0XSxcImdldElucHV0RWxlbWVudFwiOls2NF19XV1dLFtcImlvbi10b2dnbGVcIixbWzMzLFwiaW9uLXRvZ2dsZVwiLHtcImNvbG9yXCI6WzUxM10sXCJuYW1lXCI6WzFdLFwiY2hlY2tlZFwiOlsxMDI4XSxcImRpc2FibGVkXCI6WzRdLFwidmFsdWVcIjpbMV0sXCJhY3RpdmF0ZWRcIjpbMzJdfV1dXSxbXCJpb24tdmlydHVhbC1zY3JvbGxcIixbWzAsXCJpb24tdmlydHVhbC1zY3JvbGxcIix7XCJhcHByb3hJdGVtSGVpZ2h0XCI6WzIsXCJhcHByb3gtaXRlbS1oZWlnaHRcIl0sXCJhcHByb3hIZWFkZXJIZWlnaHRcIjpbMixcImFwcHJveC1oZWFkZXItaGVpZ2h0XCJdLFwiYXBwcm94Rm9vdGVySGVpZ2h0XCI6WzIsXCJhcHByb3gtZm9vdGVyLWhlaWdodFwiXSxcImhlYWRlckZuXCI6WzE2XSxcImZvb3RlckZuXCI6WzE2XSxcIml0ZW1zXCI6WzE2XSxcIml0ZW1IZWlnaHRcIjpbMTZdLFwiaGVhZGVySGVpZ2h0XCI6WzE2XSxcImZvb3RlckhlaWdodFwiOlsxNl0sXCJyZW5kZXJJdGVtXCI6WzE2XSxcInJlbmRlckhlYWRlclwiOlsxNl0sXCJyZW5kZXJGb290ZXJcIjpbMTZdLFwibm9kZVJlbmRlclwiOlsxNl0sXCJkb21SZW5kZXJcIjpbMTZdLFwidG90YWxIZWlnaHRcIjpbMzJdLFwicG9zaXRpb25Gb3JJdGVtXCI6WzY0XSxcImNoZWNrUmFuZ2VcIjpbNjRdLFwiY2hlY2tFbmRcIjpbNjRdfSxbWzksXCJyZXNpemVcIixcIm9uUmVzaXplXCJdXV1dXSxbXCJpb24tZGF0ZXRpbWVfM1wiLFtbMzQsXCJpb24tcGlja2VyXCIse1wib3ZlcmxheUluZGV4XCI6WzIsXCJvdmVybGF5LWluZGV4XCJdLFwia2V5Ym9hcmRDbG9zZVwiOls0LFwia2V5Ym9hcmQtY2xvc2VcIl0sXCJlbnRlckFuaW1hdGlvblwiOlsxNl0sXCJsZWF2ZUFuaW1hdGlvblwiOlsxNl0sXCJidXR0b25zXCI6WzE2XSxcImNvbHVtbnNcIjpbMTZdLFwiY3NzQ2xhc3NcIjpbMSxcImNzcy1jbGFzc1wiXSxcImR1cmF0aW9uXCI6WzJdLFwic2hvd0JhY2tkcm9wXCI6WzQsXCJzaG93LWJhY2tkcm9wXCJdLFwiYmFja2Ryb3BEaXNtaXNzXCI6WzQsXCJiYWNrZHJvcC1kaXNtaXNzXCJdLFwiYW5pbWF0ZWRcIjpbNF0sXCJodG1sQXR0cmlidXRlc1wiOlsxNl0sXCJwcmVzZW50ZWRcIjpbMzJdLFwicHJlc2VudFwiOls2NF0sXCJkaXNtaXNzXCI6WzY0XSxcIm9uRGlkRGlzbWlzc1wiOls2NF0sXCJvbldpbGxEaXNtaXNzXCI6WzY0XSxcImdldENvbHVtblwiOls2NF19XSxbMzMsXCJpb24tZGF0ZXRpbWVcIix7XCJuYW1lXCI6WzFdLFwiZGlzYWJsZWRcIjpbNF0sXCJyZWFkb25seVwiOls0XSxcIm1pblwiOlsxMDI1XSxcIm1heFwiOlsxMDI1XSxcImRpc3BsYXlGb3JtYXRcIjpbMSxcImRpc3BsYXktZm9ybWF0XCJdLFwiZGlzcGxheVRpbWV6b25lXCI6WzEsXCJkaXNwbGF5LXRpbWV6b25lXCJdLFwicGlja2VyRm9ybWF0XCI6WzEsXCJwaWNrZXItZm9ybWF0XCJdLFwiY2FuY2VsVGV4dFwiOlsxLFwiY2FuY2VsLXRleHRcIl0sXCJkb25lVGV4dFwiOlsxLFwiZG9uZS10ZXh0XCJdLFwieWVhclZhbHVlc1wiOls4LFwieWVhci12YWx1ZXNcIl0sXCJtb250aFZhbHVlc1wiOls4LFwibW9udGgtdmFsdWVzXCJdLFwiZGF5VmFsdWVzXCI6WzgsXCJkYXktdmFsdWVzXCJdLFwiaG91clZhbHVlc1wiOls4LFwiaG91ci12YWx1ZXNcIl0sXCJtaW51dGVWYWx1ZXNcIjpbOCxcIm1pbnV0ZS12YWx1ZXNcIl0sXCJtb250aE5hbWVzXCI6WzEsXCJtb250aC1uYW1lc1wiXSxcIm1vbnRoU2hvcnROYW1lc1wiOlsxLFwibW9udGgtc2hvcnQtbmFtZXNcIl0sXCJkYXlOYW1lc1wiOlsxLFwiZGF5LW5hbWVzXCJdLFwiZGF5U2hvcnROYW1lc1wiOlsxLFwiZGF5LXNob3J0LW5hbWVzXCJdLFwicGlja2VyT3B0aW9uc1wiOlsxNl0sXCJwbGFjZWhvbGRlclwiOlsxXSxcInZhbHVlXCI6WzEwMjVdLFwiaXNFeHBhbmRlZFwiOlszMl0sXCJvcGVuXCI6WzY0XX1dLFszMixcImlvbi1waWNrZXItY29sdW1uXCIse1wiY29sXCI6WzE2XX1dXV0sW1wiaW9uLXJhZGlvXzJcIixbWzMzLFwiaW9uLXJhZGlvXCIse1wiY29sb3JcIjpbNTEzXSxcIm5hbWVcIjpbMV0sXCJkaXNhYmxlZFwiOls0XSxcInZhbHVlXCI6WzhdLFwiY2hlY2tlZFwiOlszMl0sXCJidXR0b25UYWJpbmRleFwiOlszMl0sXCJzZXRGb2N1c1wiOls2NF0sXCJzZXRCdXR0b25UYWJpbmRleFwiOls2NF19XSxbMCxcImlvbi1yYWRpby1ncm91cFwiLHtcImFsbG93RW1wdHlTZWxlY3Rpb25cIjpbNCxcImFsbG93LWVtcHR5LXNlbGVjdGlvblwiXSxcIm5hbWVcIjpbMV0sXCJ2YWx1ZVwiOlsxMDMyXX0sW1s0LFwia2V5ZG93blwiLFwib25LZXlkb3duXCJdXV1dXSxbXCJpb24tc3Bpbm5lclwiLFtbMSxcImlvbi1zcGlubmVyXCIse1wiY29sb3JcIjpbNTEzXSxcImR1cmF0aW9uXCI6WzJdLFwibmFtZVwiOlsxXSxcInBhdXNlZFwiOls0XX1dXV0sW1wiaW9uLWJhY2tkcm9wXCIsW1szMyxcImlvbi1iYWNrZHJvcFwiLHtcInZpc2libGVcIjpbNF0sXCJ0YXBwYWJsZVwiOls0XSxcInN0b3BQcm9wYWdhdGlvblwiOls0LFwic3RvcC1wcm9wYWdhdGlvblwiXX0sW1syLFwiY2xpY2tcIixcIm9uTW91c2VEb3duXCJdXV1dXSxbXCJpb24tcmlwcGxlLWVmZmVjdFwiLFtbMSxcImlvbi1yaXBwbGUtZWZmZWN0XCIse1widHlwZVwiOlsxXSxcImFkZFJpcHBsZVwiOls2NF19XV1dLFtcImlvbi1idXR0b25fMlwiLFtbMzMsXCJpb24tYnV0dG9uXCIse1wiY29sb3JcIjpbNTEzXSxcImJ1dHRvblR5cGVcIjpbMTAyNSxcImJ1dHRvbi10eXBlXCJdLFwiZGlzYWJsZWRcIjpbNTE2XSxcImV4cGFuZFwiOls1MTNdLFwiZmlsbFwiOlsxNTM3XSxcInJvdXRlckRpcmVjdGlvblwiOlsxLFwicm91dGVyLWRpcmVjdGlvblwiXSxcInJvdXRlckFuaW1hdGlvblwiOlsxNl0sXCJkb3dubG9hZFwiOlsxXSxcImhyZWZcIjpbMV0sXCJyZWxcIjpbMV0sXCJzaGFwZVwiOls1MTNdLFwic2l6ZVwiOls1MTNdLFwic3Ryb25nXCI6WzRdLFwidGFyZ2V0XCI6WzFdLFwidHlwZVwiOlsxXX1dLFsxLFwiaW9uLWljb25cIix7XCJtb2RlXCI6WzEwMjVdLFwiY29sb3JcIjpbMV0sXCJhcmlhTGFiZWxcIjpbMTUzNyxcImFyaWEtbGFiZWxcIl0sXCJhcmlhSGlkZGVuXCI6WzUxMyxcImFyaWEtaGlkZGVuXCJdLFwiaW9zXCI6WzFdLFwibWRcIjpbMV0sXCJmbGlwUnRsXCI6WzQsXCJmbGlwLXJ0bFwiXSxcIm5hbWVcIjpbNTEzXSxcInNyY1wiOlsxXSxcImljb25cIjpbOF0sXCJzaXplXCI6WzFdLFwibGF6eVwiOls0XSxcInNhbml0aXplXCI6WzRdLFwic3ZnQ29udGVudFwiOlszMl0sXCJpc1Zpc2libGVcIjpbMzJdfV1dXSxbXCJpb24taXRlbV84XCIsW1szMyxcImlvbi1pdGVtLWRpdmlkZXJcIix7XCJjb2xvclwiOls1MTNdLFwic3RpY2t5XCI6WzRdfV0sWzMyLFwiaW9uLWl0ZW0tZ3JvdXBcIl0sWzMzLFwiaW9uLW5vdGVcIix7XCJjb2xvclwiOls1MTNdfV0sWzEsXCJpb24tc2tlbGV0b24tdGV4dFwiLHtcImFuaW1hdGVkXCI6WzRdfV0sWzQ5LFwiaW9uLWl0ZW1cIix7XCJjb2xvclwiOls1MTNdLFwiYnV0dG9uXCI6WzRdLFwiZGV0YWlsXCI6WzRdLFwiZGV0YWlsSWNvblwiOlsxLFwiZGV0YWlsLWljb25cIl0sXCJkaXNhYmxlZFwiOls0XSxcImRvd25sb2FkXCI6WzFdLFwiaHJlZlwiOlsxXSxcInJlbFwiOlsxXSxcImxpbmVzXCI6WzFdLFwicm91dGVyQW5pbWF0aW9uXCI6WzE2XSxcInJvdXRlckRpcmVjdGlvblwiOlsxLFwicm91dGVyLWRpcmVjdGlvblwiXSxcInRhcmdldFwiOlsxXSxcInR5cGVcIjpbMV0sXCJtdWx0aXBsZUlucHV0c1wiOlszMl0sXCJmb2N1c2FibGVcIjpbMzJdfSxbWzAsXCJpb25Db2xvclwiLFwibGFiZWxDb2xvckNoYW5nZWRcIl0sWzAsXCJpb25TdHlsZVwiLFwiaXRlbVN0eWxlXCJdXV0sWzM0LFwiaW9uLWxhYmVsXCIse1wiY29sb3JcIjpbNTEzXSxcInBvc2l0aW9uXCI6WzFdLFwibm9BbmltYXRlXCI6WzMyXX1dLFszMixcImlvbi1saXN0XCIse1wibGluZXNcIjpbMV0sXCJpbnNldFwiOls0XSxcImNsb3NlU2xpZGluZ0l0ZW1zXCI6WzY0XX1dLFszMyxcImlvbi1saXN0LWhlYWRlclwiLHtcImNvbG9yXCI6WzUxM10sXCJsaW5lc1wiOlsxXX1dXV1dJyksbyl9KSl9O2V4cG9ydHtkZWZpbmVDdXN0b21FbGVtZW50c307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@ionic/core/dist/esm-es5/loader.js\n");

/***/ }),

/***/ "./node_modules/@ionic/core/dist/esm-es5/md.transition-eecd3a67.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm-es5/md.transition-eecd3a67.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"mdTransitionAnimation\": () => (/* binding */ mdTransitionAnimation)\n/* harmony export */ });\n/* harmony import */ var _animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./animation-096c6391.js */ \"./node_modules/@ionic/core/dist/esm-es5/animation-096c6391.js\");\n/* harmony import */ var _index_931440b1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-931440b1.js */ \"./node_modules/@ionic/core/dist/esm-es5/index-931440b1.js\");\n/* harmony import */ var _helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers-dd7e4b7b.js */ \"./node_modules/@ionic/core/dist/esm-es5/helpers-dd7e4b7b.js\");\n/* harmony import */ var _index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index-7a8b7a1c.js */ \"./node_modules/@ionic/core/dist/esm-es5/index-7a8b7a1c.js\");\nvar mdTransitionAnimation=function(e,n){var a=\"40px\";var i=\"0px\";var t=n.direction===\"back\";var r=n.enteringEl;var o=n.leavingEl;var m=(0,_index_931440b1_js__WEBPACK_IMPORTED_MODULE_1__.g)(r);var s=m.querySelector(\"ion-toolbar\");var l=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();l.addElement(m).fill(\"both\").beforeRemoveClass(\"ion-page-invisible\");if(t){l.duration(n.duration||200).easing(\"cubic-bezier(0.47,0,0.745,0.715)\")}else{l.duration(n.duration||280).easing(\"cubic-bezier(0.36,0.66,0.04,1)\").fromTo(\"transform\",\"translateY(\"+a+\")\",\"translateY(\"+i+\")\").fromTo(\"opacity\",.01,1)}if(s){var d=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();d.addElement(s);l.addAnimation(d)}if(o&&t){l.duration(n.duration||200).easing(\"cubic-bezier(0.47,0,0.745,0.715)\");var c=(0,_animation_096c6391_js__WEBPACK_IMPORTED_MODULE_0__.c)();c.addElement((0,_index_931440b1_js__WEBPACK_IMPORTED_MODULE_1__.g)(o)).onFinish((function(e){if(e===1&&c.elements.length>0){c.elements[0].style.setProperty(\"display\",\"none\")}})).fromTo(\"transform\",\"translateY(\"+i+\")\",\"translateY(\"+a+\")\").fromTo(\"opacity\",1,0);l.addAnimation(c)}return l};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvZGlzdC9lc20tZXM1L21kLnRyYW5zaXRpb24tZWVjZDNhNjcuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBNEssd0NBQXdDLGFBQWEsWUFBWSwyQkFBMkIsbUJBQW1CLGtCQUFrQixNQUFNLHFEQUFpQixJQUFJLHFDQUFxQyxNQUFNLHlEQUFlLEdBQUcscUVBQXFFLE1BQU0sdUVBQXVFLEtBQUsseUpBQXlKLE1BQU0sTUFBTSx5REFBZSxHQUFHLGdCQUFnQixrQkFBa0IsU0FBUyx1RUFBdUUsTUFBTSx5REFBZSxHQUFHLGFBQWEscURBQWlCLDJCQUEyQiwrQkFBK0IsbURBQW1ELHFGQUFxRixrQkFBa0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvZGlzdC9lc20tZXM1L21kLnRyYW5zaXRpb24tZWVjZDNhNjcuanM/ZTc3YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnR7YyBhcyBjcmVhdGVBbmltYXRpb259ZnJvbVwiLi9hbmltYXRpb24tMDk2YzYzOTEuanNcIjtpbXBvcnR7ZyBhcyBnZXRJb25QYWdlRWxlbWVudH1mcm9tXCIuL2luZGV4LTkzMTQ0MGIxLmpzXCI7aW1wb3J0XCIuL2hlbHBlcnMtZGQ3ZTRiN2IuanNcIjtpbXBvcnRcIi4vaW5kZXgtN2E4YjdhMWMuanNcIjt2YXIgbWRUcmFuc2l0aW9uQW5pbWF0aW9uPWZ1bmN0aW9uKGUsbil7dmFyIGE9XCI0MHB4XCI7dmFyIGk9XCIwcHhcIjt2YXIgdD1uLmRpcmVjdGlvbj09PVwiYmFja1wiO3ZhciByPW4uZW50ZXJpbmdFbDt2YXIgbz1uLmxlYXZpbmdFbDt2YXIgbT1nZXRJb25QYWdlRWxlbWVudChyKTt2YXIgcz1tLnF1ZXJ5U2VsZWN0b3IoXCJpb24tdG9vbGJhclwiKTt2YXIgbD1jcmVhdGVBbmltYXRpb24oKTtsLmFkZEVsZW1lbnQobSkuZmlsbChcImJvdGhcIikuYmVmb3JlUmVtb3ZlQ2xhc3MoXCJpb24tcGFnZS1pbnZpc2libGVcIik7aWYodCl7bC5kdXJhdGlvbihuLmR1cmF0aW9ufHwyMDApLmVhc2luZyhcImN1YmljLWJlemllcigwLjQ3LDAsMC43NDUsMC43MTUpXCIpfWVsc2V7bC5kdXJhdGlvbihuLmR1cmF0aW9ufHwyODApLmVhc2luZyhcImN1YmljLWJlemllcigwLjM2LDAuNjYsMC4wNCwxKVwiKS5mcm9tVG8oXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZVkoXCIrYStcIilcIixcInRyYW5zbGF0ZVkoXCIraStcIilcIikuZnJvbVRvKFwib3BhY2l0eVwiLC4wMSwxKX1pZihzKXt2YXIgZD1jcmVhdGVBbmltYXRpb24oKTtkLmFkZEVsZW1lbnQocyk7bC5hZGRBbmltYXRpb24oZCl9aWYobyYmdCl7bC5kdXJhdGlvbihuLmR1cmF0aW9ufHwyMDApLmVhc2luZyhcImN1YmljLWJlemllcigwLjQ3LDAsMC43NDUsMC43MTUpXCIpO3ZhciBjPWNyZWF0ZUFuaW1hdGlvbigpO2MuYWRkRWxlbWVudChnZXRJb25QYWdlRWxlbWVudChvKSkub25GaW5pc2goKGZ1bmN0aW9uKGUpe2lmKGU9PT0xJiZjLmVsZW1lbnRzLmxlbmd0aD4wKXtjLmVsZW1lbnRzWzBdLnN0eWxlLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiKX19KSkuZnJvbVRvKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGVZKFwiK2krXCIpXCIsXCJ0cmFuc2xhdGVZKFwiK2ErXCIpXCIpLmZyb21UbyhcIm9wYWNpdHlcIiwxLDApO2wuYWRkQW5pbWF0aW9uKGMpfXJldHVybiBsfTtleHBvcnR7bWRUcmFuc2l0aW9uQW5pbWF0aW9ufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@ionic/core/dist/esm-es5/md.transition-eecd3a67.js\n");

/***/ }),

/***/ "./node_modules/@ionic/core/dist/esm-es5/overlays-e9ccff30.js":
/*!********************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm-es5/overlays-e9ccff30.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"B\": () => (/* binding */ BACKDROP),\n/* harmony export */   \"a\": () => (/* binding */ alertController),\n/* harmony export */   \"b\": () => (/* binding */ actionSheetController),\n/* harmony export */   \"c\": () => (/* binding */ popoverController),\n/* harmony export */   \"d\": () => (/* binding */ present),\n/* harmony export */   \"e\": () => (/* binding */ prepareOverlay),\n/* harmony export */   \"f\": () => (/* binding */ dismiss),\n/* harmony export */   \"g\": () => (/* binding */ eventMethod),\n/* harmony export */   \"h\": () => (/* binding */ activeAnimations),\n/* harmony export */   \"i\": () => (/* binding */ isCancel),\n/* harmony export */   \"l\": () => (/* binding */ loadingController),\n/* harmony export */   \"m\": () => (/* binding */ modalController),\n/* harmony export */   \"p\": () => (/* binding */ pickerController),\n/* harmony export */   \"s\": () => (/* binding */ safeCall),\n/* harmony export */   \"t\": () => (/* binding */ toastController)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ionic-global-63a97a32.js */ \"./node_modules/@ionic/core/dist/esm-es5/ionic-global-63a97a32.js\");\n/* harmony import */ var _hardware_back_button_4a6b37fb_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hardware-back-button-4a6b37fb.js */ \"./node_modules/@ionic/core/dist/esm-es5/hardware-back-button-4a6b37fb.js\");\n/* harmony import */ var _helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers-dd7e4b7b.js */ \"./node_modules/@ionic/core/dist/esm-es5/helpers-dd7e4b7b.js\");\nvar lastId=0;var activeAnimations=new WeakMap;var createController=function(e){return{create:function(t){return createOverlay(e,t)},dismiss:function(t,r,n){return dismissOverlay(document,t,r,e,n)},getTop:function(){return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this,void 0,void 0,(function(){return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__generator)(this,(function(t){return[2,getOverlay(document,e)]}))}))}}};var alertController=createController(\"ion-alert\");var actionSheetController=createController(\"ion-action-sheet\");var loadingController=createController(\"ion-loading\");var modalController=createController(\"ion-modal\");var pickerController=createController(\"ion-picker\");var popoverController=createController(\"ion-popover\");var toastController=createController(\"ion-toast\");var prepareOverlay=function(e){if(typeof document!==\"undefined\"){connectListeners(document)}var t=lastId++;e.overlayIndex=t;if(!e.hasAttribute(\"id\")){e.id=\"ion-overlay-\"+t}};var createOverlay=function(e,t){if(typeof customElements!==\"undefined\"){return customElements.whenDefined(e).then((function(){var r=document.createElement(e);r.classList.add(\"overlay-hidden\");Object.assign(r,t);getAppRoot(document).appendChild(r);return new Promise((function(e){return (0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_2__.c)(r,e)}))}))}return Promise.resolve()};var focusableQueryString='[tabindex]:not([tabindex^=\"-\"]), input:not([type=hidden]):not([tabindex^=\"-\"]), textarea:not([tabindex^=\"-\"]), button:not([tabindex^=\"-\"]), select:not([tabindex^=\"-\"]), .ion-focusable:not([tabindex^=\"-\"])';var innerFocusableQueryString=\"input:not([type=hidden]), textarea, button, select\";var focusFirstDescendant=function(e,t){var r=e.querySelector(focusableQueryString);var n=r&&r.shadowRoot;if(n){r=n.querySelector(innerFocusableQueryString)||r}if(r){r.focus()}else{t.focus()}};var focusLastDescendant=function(e,t){var r=Array.from(e.querySelectorAll(focusableQueryString));var n=r.length>0?r[r.length-1]:null;var o=n&&n.shadowRoot;if(o){n=o.querySelector(innerFocusableQueryString)||n}if(n){n.focus()}else{t.focus()}};var trapKeyboardFocus=function(e,t){var r=getOverlay(t);var n=e.target;if(!r||!n){return}if(r===n){r.lastFocus=undefined}else{var o=(0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_2__.g)(r);if(!o.contains(n)){return}var a=o.querySelector(\".ion-overlay-wrapper\");if(!a){return}if(a.contains(n)){r.lastFocus=n}else{var i=r.lastFocus;focusFirstDescendant(a,r);if(i===t.activeElement){focusLastDescendant(a,r)}r.lastFocus=t.activeElement}}};var connectListeners=function(e){if(lastId===0){lastId=1;e.addEventListener(\"focus\",(function(t){return trapKeyboardFocus(t,e)}),true);e.addEventListener(\"ionBackButton\",(function(t){var r=getOverlay(e);if(r&&r.backdropDismiss){t.detail.register(_hardware_back_button_4a6b37fb_js__WEBPACK_IMPORTED_MODULE_1__.OVERLAY_BACK_BUTTON_PRIORITY,(function(){return r.dismiss(undefined,BACKDROP)}))}}));e.addEventListener(\"keyup\",(function(t){if(t.key===\"Escape\"){var r=getOverlay(e);if(r&&r.backdropDismiss){r.dismiss(undefined,BACKDROP)}}}))}};var dismissOverlay=function(e,t,r,n,o){var a=getOverlay(e,n,o);if(!a){return Promise.reject(\"overlay does not exist\")}return a.dismiss(t,r)};var getOverlays=function(e,t){if(t===undefined){t=\"ion-alert,ion-action-sheet,ion-loading,ion-modal,ion-picker,ion-popover,ion-toast\"}return Array.from(e.querySelectorAll(t)).filter((function(e){return e.overlayIndex>0}))};var getOverlay=function(e,t,r){var n=getOverlays(e,t);return r===undefined?n[n.length-1]:n.find((function(e){return e.id===r}))};var setRootAriaHidden=function(e){if(e===void 0){e=false}var t=getAppRoot(document);var r=t.querySelector(\"ion-router-outlet, ion-nav, #ion-view-container-root\");if(!r){return}if(e){r.setAttribute(\"aria-hidden\",\"true\")}else{r.removeAttribute(\"aria-hidden\")}};var present=function(e,t,r,n,o){return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(void 0,void 0,void 0,(function(){var a,i,s;return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__generator)(this,(function(l){switch(l.label){case 0:if(e.presented){return[2]}setRootAriaHidden(true);e.presented=true;e.willPresent.emit();a=(0,_ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_0__.b)(e);i=e.enterAnimation?e.enterAnimation:_ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_0__.c.get(t,a===\"ios\"?r:n);return[4,overlayAnimation(e,i,e.el,o)];case 1:s=l.sent();if(s){e.didPresent.emit()}if(e.el.tagName!==\"ION-TOAST\"){focusPreviousElementOnDismiss(e.el)}if(e.keyboardClose){e.el.focus()}return[2]}}))}))};var focusPreviousElementOnDismiss=function(e){return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(void 0,void 0,void 0,(function(){var t,r;return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__generator)(this,(function(n){switch(n.label){case 0:t=document.activeElement;if(!t){return[2]}r=t&&t.shadowRoot;if(r){t=r.querySelector(innerFocusableQueryString)||t}return[4,e.onDidDismiss()];case 1:n.sent();t.focus();return[2]}}))}))};var dismiss=function(e,t,r,n,o,a,i){return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(void 0,void 0,void 0,(function(){var s,l,u;return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__generator)(this,(function(c){switch(c.label){case 0:if(!e.presented){return[2,false]}setRootAriaHidden(false);e.presented=false;c.label=1;case 1:c.trys.push([1,4,,5]);e.el.style.setProperty(\"pointer-events\",\"none\");e.willDismiss.emit({data:t,role:r});s=(0,_ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_0__.b)(e);l=e.leaveAnimation?e.leaveAnimation:_ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_0__.c.get(n,s===\"ios\"?o:a);if(!(r!==\"gesture\"))return[3,3];return[4,overlayAnimation(e,l,e.el,i)];case 2:c.sent();c.label=3;case 3:e.didDismiss.emit({data:t,role:r});activeAnimations.delete(e);return[3,5];case 4:u=c.sent();console.error(u);return[3,5];case 5:e.el.remove();return[2,true]}}))}))};var getAppRoot=function(e){return e.querySelector(\"ion-app\")||e.body};var overlayAnimation=function(e,t,r,n){return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(void 0,void 0,void 0,(function(){var o,a,i;return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__generator)(this,(function(s){switch(s.label){case 0:r.classList.remove(\"overlay-hidden\");o=r.shadowRoot||e.el;a=t(o,n);if(!e.animated||!_ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_0__.c.getBoolean(\"animated\",true)){a.duration(0)}if(e.keyboardClose){a.beforeAddWrite((function(){var e=r.ownerDocument.activeElement;if(e&&e.matches(\"input, ion-input, ion-textarea\")){e.blur()}}))}i=activeAnimations.get(e)||[];activeAnimations.set(e,(0,tslib__WEBPACK_IMPORTED_MODULE_3__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__spreadArray)([],i),[a]));return[4,a.play()];case 1:s.sent();return[2,true]}}))}))};var eventMethod=function(e,t){var r;var n=new Promise((function(e){return r=e}));onceEvent(e,t,(function(e){r(e.detail)}));return n};var onceEvent=function(e,t,r){var n=function(o){(0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_2__.b)(e,t,n);r(o)};(0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_2__.a)(e,t,n)};var isCancel=function(e){return e===\"cancel\"||e===BACKDROP};var defaultGate=function(e){return e()};var safeCall=function(e,t){if(typeof e===\"function\"){var r=_ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_0__.c.get(\"_zoneGate\",defaultGate);return r((function(){try{return e(t)}catch(r){console.error(r)}}))}return undefined};var BACKDROP=\"backdrop\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@ionic/core/dist/esm-es5/overlays-e9ccff30.js\n");

/***/ }),

/***/ "./node_modules/@ionic/core/dist/esm-es5 lazy recursive ^\\.\\/.*\\.entry\\.js$":
/*!******************************************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm-es5/ lazy ^\.\/.*\.entry\.js$ namespace object ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./ion-action-sheet.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-action-sheet.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-action-sheet_entry_js"
	],
	"./ion-alert.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-alert.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-alert_entry_js"
	],
	"./ion-app_8.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-app_8.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-app_8_entry_js"
	],
	"./ion-avatar_3.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-avatar_3.entry.js",
		"node_modules_ionic_core_dist_esm-es5_ion-avatar_3_entry_js"
	],
	"./ion-back-button.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-back-button.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-back-button_entry_js"
	],
	"./ion-backdrop.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-backdrop.entry.js",
		"node_modules_ionic_core_dist_esm-es5_ion-backdrop_entry_js"
	],
	"./ion-button_2.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-button_2.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-button_2_entry_js"
	],
	"./ion-card_5.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-card_5.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-card_5_entry_js"
	],
	"./ion-checkbox.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-checkbox.entry.js",
		"node_modules_ionic_core_dist_esm-es5_ion-checkbox_entry_js"
	],
	"./ion-chip.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-chip.entry.js",
		"node_modules_ionic_core_dist_esm-es5_ion-chip_entry_js"
	],
	"./ion-col_3.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-col_3.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-col_3_entry_js"
	],
	"./ion-datetime_3.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-datetime_3.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-datetime_3_entry_js"
	],
	"./ion-fab_3.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-fab_3.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-fab_3_entry_js"
	],
	"./ion-img.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-img.entry.js",
		"node_modules_ionic_core_dist_esm-es5_ion-img_entry_js"
	],
	"./ion-infinite-scroll_2.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-infinite-scroll_2.entry.js",
		"node_modules_ionic_core_dist_esm-es5_ion-infinite-scroll_2_entry_js"
	],
	"./ion-input.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-input.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-input_entry_js"
	],
	"./ion-item-option_3.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-item-option_3.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-item-option_3_entry_js"
	],
	"./ion-item_8.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-item_8.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-item_8_entry_js"
	],
	"./ion-loading.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-loading.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-loading_entry_js"
	],
	"./ion-menu_3.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-menu_3.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-menu_3_entry_js"
	],
	"./ion-modal.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-modal.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-modal_entry_js"
	],
	"./ion-nav_2.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-nav_2.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-nav_2_entry_js"
	],
	"./ion-popover.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-popover.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-popover_entry_js"
	],
	"./ion-progress-bar.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-progress-bar.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-progress-bar_entry_js"
	],
	"./ion-radio_2.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-radio_2.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-radio_2_entry_js"
	],
	"./ion-range.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-range.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-range_entry_js"
	],
	"./ion-refresher_2.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-refresher_2.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-refresher_2_entry_js"
	],
	"./ion-reorder_2.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-reorder_2.entry.js",
		"node_modules_ionic_core_dist_esm-es5_ion-reorder_2_entry_js"
	],
	"./ion-ripple-effect.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-ripple-effect.entry.js",
		"node_modules_ionic_core_dist_esm-es5_ion-ripple-effect_entry_js"
	],
	"./ion-route_4.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-route_4.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-route_4_entry_js"
	],
	"./ion-searchbar.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-searchbar.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-searchbar_entry_js"
	],
	"./ion-segment_2.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-segment_2.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-segment_2_entry_js"
	],
	"./ion-select_3.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-select_3.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-select_3_entry_js"
	],
	"./ion-slide_2.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-slide_2.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-slide_2_entry_js"
	],
	"./ion-spinner.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-spinner.entry.js",
		"node_modules_ionic_core_dist_esm-es5_ion-spinner_entry_js"
	],
	"./ion-split-pane.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-split-pane.entry.js",
		"node_modules_ionic_core_dist_esm-es5_ion-split-pane_entry_js"
	],
	"./ion-tab-bar_2.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-tab-bar_2.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-tab-bar_2_entry_js"
	],
	"./ion-tab_2.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-tab_2.entry.js",
		"node_modules_ionic_core_dist_esm-es5_ion-tab_2_entry_js"
	],
	"./ion-text.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-text.entry.js",
		"node_modules_ionic_core_dist_esm-es5_ion-text_entry_js"
	],
	"./ion-textarea.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-textarea.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-textarea_entry_js"
	],
	"./ion-toast.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-toast.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-toast_entry_js"
	],
	"./ion-toggle.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-toggle.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-toggle_entry_js"
	],
	"./ion-virtual-scroll.entry.js": [
		"./node_modules/@ionic/core/dist/esm-es5/ion-virtual-scroll.entry.js",
		"vendors-node_modules_ionic_core_dist_esm-es5_ion-virtual-scroll_entry_js"
	]
};
function webpackAsyncContext(req) {
	if(!__webpack_require__.o(map, req)) {
		return Promise.resolve().then(() => {
			var e = new Error("Cannot find module '" + req + "'");
			e.code = 'MODULE_NOT_FOUND';
			throw e;
		});
	}

	var ids = map[req], id = ids[0];
	return __webpack_require__.e(ids[1]).then(() => {
		return __webpack_require__(id);
	});
}
webpackAsyncContext.keys = () => (Object.keys(map));
webpackAsyncContext.id = "./node_modules/@ionic/core/dist/esm-es5 lazy recursive ^\\.\\/.*\\.entry\\.js$";
module.exports = webpackAsyncContext;

/***/ }),

/***/ "./node_modules/@ionic/core/dist/esm/polyfills/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/polyfills/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"applyPolyfills\": () => (/* binding */ applyPolyfills)\n/* harmony export */ });\nfunction applyPolyfills() {\n  var promises = [];\n  if (typeof window !== 'undefined') {\n    var win = window;\n\n    if (!win.customElements ||\n      (win.Element && (!win.Element.prototype.closest || !win.Element.prototype.matches || !win.Element.prototype.remove || !win.Element.prototype.getRootNode))) {\n      promises.push(__webpack_require__.e(/*! import() | polyfills-dom */ \"polyfills-dom\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./dom.js */ \"./node_modules/@ionic/core/dist/esm/polyfills/dom.js\", 23)));\n    }\n\n    var checkIfURLIsSupported = function() {\n      try {\n        var u = new URL('b', 'http://a');\n        u.pathname = 'c%20d';\n        return (u.href === 'http://a/c%20d') && u.searchParams;\n      } catch (e) {\n        return false;\n      }\n    };\n\n    if (\n      'function' !== typeof Object.assign || !Object.entries ||\n      !Array.prototype.find || !Array.prototype.includes ||\n      !String.prototype.startsWith || !String.prototype.endsWith ||\n      (win.NodeList && !win.NodeList.prototype.forEach) ||\n      !win.fetch ||\n      !checkIfURLIsSupported() ||\n      typeof WeakMap == 'undefined'\n    ) {\n      promises.push(__webpack_require__.e(/*! import() | polyfills-core-js */ \"polyfills-core-js\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./core-js.js */ \"./node_modules/@ionic/core/dist/esm/polyfills/core-js.js\", 23)));\n    }\n  }\n  return Promise.all(promises);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvZGlzdC9lc20vcG9seWZpbGxzL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CLHdNQUEwRDtBQUM5RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isd05BQWtFO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL0Bpb25pYy9jb3JlL2Rpc3QvZXNtL3BvbHlmaWxscy9pbmRleC5qcz82ZjVhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBhcHBseVBvbHlmaWxscygpIHtcbiAgdmFyIHByb21pc2VzID0gW107XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHZhciB3aW4gPSB3aW5kb3c7XG5cbiAgICBpZiAoIXdpbi5jdXN0b21FbGVtZW50cyB8fFxuICAgICAgKHdpbi5FbGVtZW50ICYmICghd2luLkVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3QgfHwgIXdpbi5FbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzIHx8ICF3aW4uRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlIHx8ICF3aW4uRWxlbWVudC5wcm90b3R5cGUuZ2V0Um9vdE5vZGUpKSkge1xuICAgICAgcHJvbWlzZXMucHVzaChpbXBvcnQoLyogd2VicGFja0NodW5rTmFtZTogXCJwb2x5ZmlsbHMtZG9tXCIgKi8gJy4vZG9tLmpzJykpO1xuICAgIH1cblxuICAgIHZhciBjaGVja0lmVVJMSXNTdXBwb3J0ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciB1ID0gbmV3IFVSTCgnYicsICdodHRwOi8vYScpO1xuICAgICAgICB1LnBhdGhuYW1lID0gJ2MlMjBkJztcbiAgICAgICAgcmV0dXJuICh1LmhyZWYgPT09ICdodHRwOi8vYS9jJTIwZCcpICYmIHUuc2VhcmNoUGFyYW1zO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChcbiAgICAgICdmdW5jdGlvbicgIT09IHR5cGVvZiBPYmplY3QuYXNzaWduIHx8ICFPYmplY3QuZW50cmllcyB8fFxuICAgICAgIUFycmF5LnByb3RvdHlwZS5maW5kIHx8ICFBcnJheS5wcm90b3R5cGUuaW5jbHVkZXMgfHxcbiAgICAgICFTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGggfHwgIVN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGggfHxcbiAgICAgICh3aW4uTm9kZUxpc3QgJiYgIXdpbi5Ob2RlTGlzdC5wcm90b3R5cGUuZm9yRWFjaCkgfHxcbiAgICAgICF3aW4uZmV0Y2ggfHxcbiAgICAgICFjaGVja0lmVVJMSXNTdXBwb3J0ZWQoKSB8fFxuICAgICAgdHlwZW9mIFdlYWtNYXAgPT0gJ3VuZGVmaW5lZCdcbiAgICApIHtcbiAgICAgIHByb21pc2VzLnB1c2goaW1wb3J0KC8qIHdlYnBhY2tDaHVua05hbWU6IFwicG9seWZpbGxzLWNvcmUtanNcIiAqLyAnLi9jb3JlLWpzLmpzJykpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@ionic/core/dist/esm/polyfills/index.js\n");

/***/ }),

/***/ "./node_modules/@ionic/core/dist/index.js":
/*!************************************************!*\
  !*** ./node_modules/@ionic/core/dist/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IonicSafeString": () => (/* reexport safe */ _esm_es5_index_js__WEBPACK_IMPORTED_MODULE_0__.IonicSafeString),
/* harmony export */   "IonicSlides": () => (/* reexport safe */ _esm_es5_index_js__WEBPACK_IMPORTED_MODULE_0__.IonicSlides),
/* harmony export */   "IonicSwiper": () => (/* reexport safe */ _esm_es5_index_js__WEBPACK_IMPORTED_MODULE_0__.IonicSwiper),
/* harmony export */   "LIFECYCLE_DID_ENTER": () => (/* reexport safe */ _esm_es5_index_js__WEBPACK_IMPORTED_MODULE_0__.LIFECYCLE_DID_ENTER),
/* harmony export */   "LIFECYCLE_DID_LEAVE": () => (/* reexport safe */ _esm_es5_index_js__WEBPACK_IMPORTED_MODULE_0__.LIFECYCLE_DID_LEAVE),
/* harmony export */   "LIFECYCLE_WILL_ENTER": () => (/* reexport safe */ _esm_es5_index_js__WEBPACK_IMPORTED_MODULE_0__.LIFECYCLE_WILL_ENTER),
/* harmony export */   "LIFECYCLE_WILL_LEAVE": () => (/* reexport safe */ _esm_es5_index_js__WEBPACK_IMPORTED_MODULE_0__.LIFECYCLE_WILL_LEAVE),
/* harmony export */   "LIFECYCLE_WILL_UNLOAD": () => (/* reexport safe */ _esm_es5_index_js__WEBPACK_IMPORTED_MODULE_0__.LIFECYCLE_WILL_UNLOAD),
/* harmony export */   "actionSheetController": () => (/* reexport safe */ _esm_es5_index_js__WEBPACK_IMPORTED_MODULE_0__.actionSheetController),
/* harmony export */   "alertController": () => (/* reexport safe */ _esm_es5_index_js__WEBPACK_IMPORTED_MODULE_0__.alertController),
/* harmony export */   "componentOnReady": () => (/* reexport safe */ _esm_es5_index_js__WEBPACK_IMPORTED_MODULE_0__.componentOnReady),
/* harmony export */   "createAnimation": () => (/* reexport safe */ _esm_es5_index_js__WEBPACK_IMPORTED_MODULE_0__.createAnimation),
/* harmony export */   "createGesture": () => (/* reexport safe */ _esm_es5_index_js__WEBPACK_IMPORTED_MODULE_0__.createGesture),
/* harmony export */   "getMode": () => (/* reexport safe */ _esm_es5_index_js__WEBPACK_IMPORTED_MODULE_0__.getMode),
/* harmony export */   "getPlatforms": () => (/* reexport safe */ _esm_es5_index_js__WEBPACK_IMPORTED_MODULE_0__.getPlatforms),
/* harmony export */   "getTimeGivenProgression": () => (/* reexport safe */ _esm_es5_index_js__WEBPACK_IMPORTED_MODULE_0__.getTimeGivenProgression),
/* harmony export */   "initialize": () => (/* reexport safe */ _esm_es5_index_js__WEBPACK_IMPORTED_MODULE_0__.initialize),
/* harmony export */   "iosTransitionAnimation": () => (/* reexport safe */ _esm_es5_index_js__WEBPACK_IMPORTED_MODULE_0__.iosTransitionAnimation),
/* harmony export */   "isPlatform": () => (/* reexport safe */ _esm_es5_index_js__WEBPACK_IMPORTED_MODULE_0__.isPlatform),
/* harmony export */   "loadingController": () => (/* reexport safe */ _esm_es5_index_js__WEBPACK_IMPORTED_MODULE_0__.loadingController),
/* harmony export */   "mdTransitionAnimation": () => (/* reexport safe */ _esm_es5_index_js__WEBPACK_IMPORTED_MODULE_0__.mdTransitionAnimation),
/* harmony export */   "menuController": () => (/* reexport safe */ _esm_es5_index_js__WEBPACK_IMPORTED_MODULE_0__.menuController),
/* harmony export */   "modalController": () => (/* reexport safe */ _esm_es5_index_js__WEBPACK_IMPORTED_MODULE_0__.modalController),
/* harmony export */   "pickerController": () => (/* reexport safe */ _esm_es5_index_js__WEBPACK_IMPORTED_MODULE_0__.pickerController),
/* harmony export */   "popoverController": () => (/* reexport safe */ _esm_es5_index_js__WEBPACK_IMPORTED_MODULE_0__.popoverController),
/* harmony export */   "setupConfig": () => (/* reexport safe */ _esm_es5_index_js__WEBPACK_IMPORTED_MODULE_0__.setupConfig),
/* harmony export */   "toastController": () => (/* reexport safe */ _esm_es5_index_js__WEBPACK_IMPORTED_MODULE_0__.toastController)
/* harmony export */ });
/* harmony import */ var _esm_es5_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./esm-es5/index.js */ "./node_modules/@ionic/core/dist/esm-es5/index.js");


/***/ }),

/***/ "./node_modules/@ionic/core/loader/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@ionic/core/loader/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"applyPolyfills\": () => (/* reexport safe */ _dist_esm_polyfills_index_js__WEBPACK_IMPORTED_MODULE_0__.applyPolyfills),\n/* harmony export */   \"defineCustomElements\": () => (/* reexport safe */ _dist_esm_es5_loader_js__WEBPACK_IMPORTED_MODULE_1__.defineCustomElements)\n/* harmony export */ });\n/* harmony import */ var _dist_esm_polyfills_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/esm/polyfills/index.js */ \"./node_modules/@ionic/core/dist/esm/polyfills/index.js\");\n/* harmony import */ var _dist_esm_es5_loader_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dist/esm-es5/loader.js */ \"./node_modules/@ionic/core/dist/esm-es5/loader.js\");\n\n(function(){if(\"undefined\"!==typeof window&&void 0!==window.Reflect&&void 0!==window.customElements){var a=HTMLElement;window.HTMLElement=function(){return Reflect.construct(a,[],this.constructor)};HTMLElement.prototype=a.prototype;HTMLElement.prototype.constructor=HTMLElement;Object.setPrototypeOf(HTMLElement,a)}})();\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvbG9hZGVyL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQ0EsWUFBWSx5RkFBeUYsa0JBQWtCLDhCQUE4QixpREFBaUQsa0NBQWtDLDhDQUE4QyxzQ0FBc0M7QUFDN1E7QUFDTCIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AaW9uaWMvY29yZS9sb2FkZXIvaW5kZXguanM/Njc5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbihmdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2Ygd2luZG93JiZ2b2lkIDAhPT13aW5kb3cuUmVmbGVjdCYmdm9pZCAwIT09d2luZG93LmN1c3RvbUVsZW1lbnRzKXt2YXIgYT1IVE1MRWxlbWVudDt3aW5kb3cuSFRNTEVsZW1lbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gUmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSx0aGlzLmNvbnN0cnVjdG9yKX07SFRNTEVsZW1lbnQucHJvdG90eXBlPWEucHJvdG90eXBlO0hUTUxFbGVtZW50LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1IVE1MRWxlbWVudDtPYmplY3Quc2V0UHJvdG90eXBlT2YoSFRNTEVsZW1lbnQsYSl9fSkoKTtcbmV4cG9ydCAqIGZyb20gJy4uL2Rpc3QvZXNtL3BvbHlmaWxscy9pbmRleC5qcyc7XG5leHBvcnQgKiBmcm9tICcuLi9kaXN0L2VzbS1lczUvbG9hZGVyLmpzJztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@ionic/core/loader/index.js\n");

/***/ }),

/***/ "./node_modules/firebase/app/dist/index.esm.js":
/*!*****************************************************!*\
  !*** ./node_modules/firebase/app/dist/index.esm.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FirebaseError\": () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.FirebaseError),\n/* harmony export */   \"SDK_VERSION\": () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.SDK_VERSION),\n/* harmony export */   \"_DEFAULT_ENTRY_NAME\": () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._DEFAULT_ENTRY_NAME),\n/* harmony export */   \"_addComponent\": () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._addComponent),\n/* harmony export */   \"_addOrOverwriteComponent\": () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._addOrOverwriteComponent),\n/* harmony export */   \"_apps\": () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._apps),\n/* harmony export */   \"_clearComponents\": () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._clearComponents),\n/* harmony export */   \"_components\": () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._components),\n/* harmony export */   \"_getProvider\": () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._getProvider),\n/* harmony export */   \"_registerComponent\": () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._registerComponent),\n/* harmony export */   \"_removeServiceInstance\": () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._removeServiceInstance),\n/* harmony export */   \"deleteApp\": () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.deleteApp),\n/* harmony export */   \"getApp\": () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.getApp),\n/* harmony export */   \"getApps\": () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.getApps),\n/* harmony export */   \"initializeApp\": () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.initializeApp),\n/* harmony export */   \"onLog\": () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.onLog),\n/* harmony export */   \"registerVersion\": () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.registerVersion),\n/* harmony export */   \"setLogLevel\": () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.setLogLevel)\n/* harmony export */ });\n/* harmony import */ var _firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/app */ \"./node_modules/@firebase/app/dist/index.esm2017.js\");\n\n\n\nvar name = \"firebase\";\nvar version = \"9.2.0\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n(0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__.registerVersion)(name, version, 'app');\n//# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZmlyZWJhc2UvYXBwL2Rpc3QvaW5kZXguZXNtLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBZ0Q7QUFDbEI7O0FBRTlCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL2ZpcmViYXNlL2FwcC9kaXN0L2luZGV4LmVzbS5qcz8yNjBiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlZ2lzdGVyVmVyc2lvbiB9IGZyb20gJ0BmaXJlYmFzZS9hcHAnO1xuZXhwb3J0ICogZnJvbSAnQGZpcmViYXNlL2FwcCc7XG5cbnZhciBuYW1lID0gXCJmaXJlYmFzZVwiO1xudmFyIHZlcnNpb24gPSBcIjkuMi4wXCI7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnJlZ2lzdGVyVmVyc2lvbihuYW1lLCB2ZXJzaW9uLCAnYXBwJyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lc20uanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/firebase/app/dist/index.esm.js\n");

/***/ }),

/***/ "./node_modules/firebase/auth/dist/index.esm.js":
/*!******************************************************!*\
  !*** ./node_modules/firebase/auth/dist/index.esm.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ActionCodeOperation\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.ActionCodeOperation),\n/* harmony export */   \"ActionCodeURL\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.ActionCodeURL),\n/* harmony export */   \"AuthCredential\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.AuthCredential),\n/* harmony export */   \"AuthErrorCodes\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.AuthErrorCodes),\n/* harmony export */   \"EmailAuthCredential\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.EmailAuthCredential),\n/* harmony export */   \"EmailAuthProvider\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.EmailAuthProvider),\n/* harmony export */   \"FacebookAuthProvider\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.FacebookAuthProvider),\n/* harmony export */   \"FactorId\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.FactorId),\n/* harmony export */   \"GithubAuthProvider\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.GithubAuthProvider),\n/* harmony export */   \"GoogleAuthProvider\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.GoogleAuthProvider),\n/* harmony export */   \"OAuthCredential\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.OAuthCredential),\n/* harmony export */   \"OAuthProvider\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.OAuthProvider),\n/* harmony export */   \"OperationType\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.OperationType),\n/* harmony export */   \"PhoneAuthCredential\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.PhoneAuthCredential),\n/* harmony export */   \"PhoneAuthProvider\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.PhoneAuthProvider),\n/* harmony export */   \"PhoneMultiFactorGenerator\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.PhoneMultiFactorGenerator),\n/* harmony export */   \"ProviderId\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.ProviderId),\n/* harmony export */   \"RecaptchaVerifier\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.RecaptchaVerifier),\n/* harmony export */   \"SAMLAuthProvider\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.SAMLAuthProvider),\n/* harmony export */   \"SignInMethod\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.SignInMethod),\n/* harmony export */   \"TwitterAuthProvider\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.TwitterAuthProvider),\n/* harmony export */   \"applyActionCode\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.applyActionCode),\n/* harmony export */   \"browserLocalPersistence\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.browserLocalPersistence),\n/* harmony export */   \"browserPopupRedirectResolver\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.browserPopupRedirectResolver),\n/* harmony export */   \"browserSessionPersistence\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.browserSessionPersistence),\n/* harmony export */   \"checkActionCode\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.checkActionCode),\n/* harmony export */   \"confirmPasswordReset\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.confirmPasswordReset),\n/* harmony export */   \"connectAuthEmulator\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.connectAuthEmulator),\n/* harmony export */   \"createUserWithEmailAndPassword\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.createUserWithEmailAndPassword),\n/* harmony export */   \"debugErrorMap\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.debugErrorMap),\n/* harmony export */   \"deleteUser\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.deleteUser),\n/* harmony export */   \"fetchSignInMethodsForEmail\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.fetchSignInMethodsForEmail),\n/* harmony export */   \"getAdditionalUserInfo\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.getAdditionalUserInfo),\n/* harmony export */   \"getAuth\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.getAuth),\n/* harmony export */   \"getIdToken\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.getIdToken),\n/* harmony export */   \"getIdTokenResult\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.getIdTokenResult),\n/* harmony export */   \"getMultiFactorResolver\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.getMultiFactorResolver),\n/* harmony export */   \"getRedirectResult\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.getRedirectResult),\n/* harmony export */   \"inMemoryPersistence\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.inMemoryPersistence),\n/* harmony export */   \"indexedDBLocalPersistence\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.indexedDBLocalPersistence),\n/* harmony export */   \"initializeAuth\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.initializeAuth),\n/* harmony export */   \"isSignInWithEmailLink\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.isSignInWithEmailLink),\n/* harmony export */   \"linkWithCredential\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.linkWithCredential),\n/* harmony export */   \"linkWithPhoneNumber\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.linkWithPhoneNumber),\n/* harmony export */   \"linkWithPopup\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.linkWithPopup),\n/* harmony export */   \"linkWithRedirect\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.linkWithRedirect),\n/* harmony export */   \"multiFactor\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.multiFactor),\n/* harmony export */   \"onAuthStateChanged\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.onAuthStateChanged),\n/* harmony export */   \"onIdTokenChanged\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.onIdTokenChanged),\n/* harmony export */   \"parseActionCodeURL\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.parseActionCodeURL),\n/* harmony export */   \"prodErrorMap\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.prodErrorMap),\n/* harmony export */   \"reauthenticateWithCredential\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.reauthenticateWithCredential),\n/* harmony export */   \"reauthenticateWithPhoneNumber\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.reauthenticateWithPhoneNumber),\n/* harmony export */   \"reauthenticateWithPopup\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.reauthenticateWithPopup),\n/* harmony export */   \"reauthenticateWithRedirect\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.reauthenticateWithRedirect),\n/* harmony export */   \"reload\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.reload),\n/* harmony export */   \"sendEmailVerification\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.sendEmailVerification),\n/* harmony export */   \"sendPasswordResetEmail\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.sendPasswordResetEmail),\n/* harmony export */   \"sendSignInLinkToEmail\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.sendSignInLinkToEmail),\n/* harmony export */   \"setPersistence\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.setPersistence),\n/* harmony export */   \"signInAnonymously\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.signInAnonymously),\n/* harmony export */   \"signInWithCredential\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.signInWithCredential),\n/* harmony export */   \"signInWithCustomToken\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.signInWithCustomToken),\n/* harmony export */   \"signInWithEmailAndPassword\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.signInWithEmailAndPassword),\n/* harmony export */   \"signInWithEmailLink\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.signInWithEmailLink),\n/* harmony export */   \"signInWithPhoneNumber\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.signInWithPhoneNumber),\n/* harmony export */   \"signInWithPopup\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.signInWithPopup),\n/* harmony export */   \"signInWithRedirect\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.signInWithRedirect),\n/* harmony export */   \"signOut\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.signOut),\n/* harmony export */   \"unlink\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.unlink),\n/* harmony export */   \"updateCurrentUser\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.updateCurrentUser),\n/* harmony export */   \"updateEmail\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.updateEmail),\n/* harmony export */   \"updatePassword\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.updatePassword),\n/* harmony export */   \"updatePhoneNumber\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.updatePhoneNumber),\n/* harmony export */   \"updateProfile\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.updateProfile),\n/* harmony export */   \"useDeviceLanguage\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.useDeviceLanguage),\n/* harmony export */   \"verifyBeforeUpdateEmail\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.verifyBeforeUpdateEmail),\n/* harmony export */   \"verifyPasswordResetCode\": () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.verifyPasswordResetCode)\n/* harmony export */ });\n/* harmony import */ var _firebase_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/auth */ \"./node_modules/@firebase/auth/dist/esm2017/index.js\");\n\n//# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZmlyZWJhc2UvYXV0aC9kaXN0L2luZGV4LmVzbS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQStCO0FBQy9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL2ZpcmViYXNlL2F1dGgvZGlzdC9pbmRleC5lc20uanM/ZWE3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICdAZmlyZWJhc2UvYXV0aCc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lc20uanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/firebase/auth/dist/index.esm.js\n");

/***/ }),

/***/ "./node_modules/tslib/tslib.es6.js":
/*!*****************************************!*\
  !*** ./node_modules/tslib/tslib.es6.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"__extends\": () => (/* binding */ __extends),\n/* harmony export */   \"__assign\": () => (/* binding */ __assign),\n/* harmony export */   \"__rest\": () => (/* binding */ __rest),\n/* harmony export */   \"__decorate\": () => (/* binding */ __decorate),\n/* harmony export */   \"__param\": () => (/* binding */ __param),\n/* harmony export */   \"__metadata\": () => (/* binding */ __metadata),\n/* harmony export */   \"__awaiter\": () => (/* binding */ __awaiter),\n/* harmony export */   \"__generator\": () => (/* binding */ __generator),\n/* harmony export */   \"__createBinding\": () => (/* binding */ __createBinding),\n/* harmony export */   \"__exportStar\": () => (/* binding */ __exportStar),\n/* harmony export */   \"__values\": () => (/* binding */ __values),\n/* harmony export */   \"__read\": () => (/* binding */ __read),\n/* harmony export */   \"__spread\": () => (/* binding */ __spread),\n/* harmony export */   \"__spreadArrays\": () => (/* binding */ __spreadArrays),\n/* harmony export */   \"__spreadArray\": () => (/* binding */ __spreadArray),\n/* harmony export */   \"__await\": () => (/* binding */ __await),\n/* harmony export */   \"__asyncGenerator\": () => (/* binding */ __asyncGenerator),\n/* harmony export */   \"__asyncDelegator\": () => (/* binding */ __asyncDelegator),\n/* harmony export */   \"__asyncValues\": () => (/* binding */ __asyncValues),\n/* harmony export */   \"__makeTemplateObject\": () => (/* binding */ __makeTemplateObject),\n/* harmony export */   \"__importStar\": () => (/* binding */ __importStar),\n/* harmony export */   \"__importDefault\": () => (/* binding */ __importDefault),\n/* harmony export */   \"__classPrivateFieldGet\": () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   \"__classPrivateFieldSet\": () => (/* binding */ __classPrivateFieldSet)\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nvar __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nfunction __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tslib/tslib.es6.js\n");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/app */ \"./node_modules/firebase/app/dist/index.esm.js\");\n/* harmony import */ var firebase_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/auth */ \"./node_modules/firebase/auth/dist/index.esm.js\");\n/* harmony import */ var _ionic_native_bluetooth_serial__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ionic-native/bluetooth-serial */ \"./node_modules/@ionic-native/bluetooth-serial/index.js\");\n/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ionic/angular */ \"./node_modules/@ionic/angular/fesm5/ionic-angular.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyB59QXwzGzzlc1DlIq4bn-8rGYNl-YEFIQ\",\r\n  authDomain: \"red-purificadores.firebaseapp.com\",\r\n  databaseURL: \"https://red-purificadores-default-rtdb.firebaseio.com\",\r\n  projectId: \"red-purificadores\",\r\n  storageBucket: \"red-purificadores.appspot.com\",   \r\n  messagingSenderId: \"465692295067\",\r\n  appId: \"1:465692295067:web:63afb8986188b79c06eb3e\",\r\n  measurementId: \"G-YQG5EHENT8\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = (0,firebase_app__WEBPACK_IMPORTED_MODULE_0__.initializeApp)(firebaseConfig);\r\n\r\nconst btnIniciarSesion  = document.getElementById('btnIniciarSesion');\r\nconst conSesionIniciada = document.getElementById('conSesionIniciada');\r\nconst conSesionCerrada  = document.getElementById('conSesionCerrada');\r\nconst detallesDeUsuario = document.getElementById('detallesDeUsuario');\r\nconst cuerpo            = document.getElementById('cuerpo');\r\n\r\n\r\n\r\nconst auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)(app);\r\nconst provider = new firebase_auth__WEBPACK_IMPORTED_MODULE_1__.GoogleAuthProvider();\r\n\r\nbtnIniciarSesion.onclick = () => (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.signInWithPopup)(auth, provider)\r\n    .then((result) => {\r\n        const credential = firebase_auth__WEBPACK_IMPORTED_MODULE_1__.GoogleAuthProvider.credentialFromResult(result);\r\n        const token = credential.accessToken;\r\n        const user = result.user;\r\n        console.log('Sesion iniciada con exito');\r\n    })\r\n    .catch((error) => {\r\n        console.log('Error al iniciar sesion');\r\n        console.log(error.code);\r\n        console.log(error.message);\r\n    });\r\n\r\nbtnCerrarSesion.onclick = () => (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.signOut)(auth)\r\n    .then((result) => {\r\n        console.log('Sesion cerrada con exito');\r\n    })\r\n    .catch((error) => {\r\n        console.log(error.code);\r\n        console.log(error.message);\r\n    });\r\n\r\n(0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.onAuthStateChanged)(auth, user => {\r\n    if (user != null) {\r\n        conSesionIniciada.hidden = false;\r\n        conSesionCerrada.hidden = true;\r\n        cuerpo.hidden = false;\r\n        // detallesDeUsuario.hidden = false;\r\n        detallesDeUsuario.innerHTML = `<h3>Hola ${user.displayName}!</h3>`;\r\n            // <p>ID de usuario: ${user.uid}</p>\r\n    } else {\r\n        conSesionIniciada.hidden = true;\r\n        conSesionCerrada.hidden = false;\r\n        cuerpo.hidden = true;\r\n        // detallesDeUsuario.hidden = true;\r\n        detallesDeUsuario.innerHTML = `<h3>Inicia Sesión! 👉</h3>`;\r\n    }\r\n});\r\n\r\n// Configurar Bluetooth y backgroud task\r\n\r\nconst platform = (0,_ionic_angular__WEBPACK_IMPORTED_MODULE_3__.Platform)();\r\nconst bluetooth = (0,_ionic_native_bluetooth_serial__WEBPACK_IMPORTED_MODULE_2__.BluetoothSerial)();\r\n\r\nconst buscarConexion = async () => {\r\n    return new Promise((resolve, reject) => {\r\n        if (bluetooth.isEnabled()) {\r\n            let dispositivos;\r\n            bluetooth.list()\r\n                .then((response) => {\r\n                    dispositivos = response;\r\n                });\r\n        \r\n            dispositivos.forEach(dispositivo => {\r\n                if (dispositivo.name === 'PurLuft') {\r\n                    if (platform.is('ios'))     bluetooth.connect(dispositivo.uuid);\r\n                    if (platform.is('android')) bluetooth.connect(dispositivo.address);\r\n                }\r\n            });\r\n        }\r\n        resolve(true);\r\n    });\r\n}\r\n\r\n// Mostrar pagina de carga\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    new Promise(resolve => { setTimeout(resolve, 1000) })\r\n        .then(() => {\r\n            document.querySelector('.pagina').style.display = 'block';\r\n            document.querySelector('#cargandoPagina').style.display = 'none';\r\n        });\r\n});\r\n\r\n//determinar en que plataforma se trabaja y configurar backgournd fetch \r\n\r\nif (undefined.platform.is('ios')) {\r\n    var backgroundFetchConfig = {\r\n        minimumFetchInterval: 15\r\n    }\r\n} else if (undefined.platform.is('android')) {\r\n    var backgroundFetchConfig = {\r\n        minimumFetchInterval: 15,\r\n        enableHeadless: false,   \r\n        stopOnTerminate: true, \r\n        startOnBoot: true,\r\n        forceAlarmManager: false,\r\n        requiredNetworkType: BackgroundFetch.NETWORK_TYPE_NONE,\r\n        requiresBatteryNotLow: false,\r\n        requiresCharging: false,\r\n        requiresDeviceIdle: false,\r\n        requiresStorageNotLow: false\r\n    }\r\n}\r\n\r\nlet status = BackgroundFetch.configure(backgroundFetchConfig, async (taskId) => {\r\n        console.log(\"[Background fetch] taskId: \", taskId);\r\n        const result = await buscarConexion();\r\n\r\n        BackgroundFetch.finish(taskId);\r\n    }, async (taskId) => {\r\n        BackgroundFetch.finish(taskId); \r\n    });\r\n\r\nif (location.hostname === 'localhost')  {\r\n    (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.connectAuthEmulator)(auth, 'http://localhost:9099');\r\n    // connectFirestoreEmulator(db,'localhost', 8080);\r\n}\r\n\r\n/* // Funcion que posiblemente sea util en el futuro\r\nfunction setVisible(elementOrSelector, visible) {\r\n    // This bit is so you can pass in the name as a string or the reference directly\r\n    (typeof elementOrSelector === 'string' ?\r\n        document.querySelector(elementOrSelector) : elementOrSelector)\r\n    .style.display =\r\n        visible ? 'block' : 'none';\r\n}\r\n*///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/create fake namespace object */
/******/ 	(() => {
/******/ 		var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
/******/ 		var leafPrototypes;
/******/ 		// create a fake namespace object
/******/ 		// mode & 1: value is a module id, require it
/******/ 		// mode & 2: merge all properties of value into the ns
/******/ 		// mode & 4: return value when already ns object
/******/ 		// mode & 16: return value when it's Promise-like
/******/ 		// mode & 8|1: behave like require
/******/ 		__webpack_require__.t = function(value, mode) {
/******/ 			if(mode & 1) value = this(value);
/******/ 			if(mode & 8) return value;
/******/ 			if(typeof value === 'object' && value) {
/******/ 				if((mode & 4) && value.__esModule) return value;
/******/ 				if((mode & 16) && typeof value.then === 'function') return value;
/******/ 			}
/******/ 			var ns = Object.create(null);
/******/ 			__webpack_require__.r(ns);
/******/ 			var def = {};
/******/ 			leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 			for(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 				Object.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));
/******/ 			}
/******/ 			def['default'] = () => (value);
/******/ 			__webpack_require__.d(ns, def);
/******/ 			return ns;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".bundle.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "app:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			;
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.f.j = (chunkId, promises) => {
/******/ 				// JSONP chunk loading for javascript
/******/ 				var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 				if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 		
/******/ 					// a Promise means "currently loading".
/******/ 					if(installedChunkData) {
/******/ 						promises.push(installedChunkData[2]);
/******/ 					} else {
/******/ 						if(true) { // all chunks have JS
/******/ 							// setup Promise in chunk cache
/******/ 							var promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));
/******/ 							promises.push(installedChunkData[2] = promise);
/******/ 		
/******/ 							// start chunk loading
/******/ 							var url = __webpack_require__.p + __webpack_require__.u(chunkId);
/******/ 							// create error before stack unwound to get useful stacktrace later
/******/ 							var error = new Error();
/******/ 							var loadingEnded = (event) => {
/******/ 								if(__webpack_require__.o(installedChunks, chunkId)) {
/******/ 									installedChunkData = installedChunks[chunkId];
/******/ 									if(installedChunkData !== 0) installedChunks[chunkId] = undefined;
/******/ 									if(installedChunkData) {
/******/ 										var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 										var realSrc = event && event.target && event.target.src;
/******/ 										error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 										error.name = 'ChunkLoadError';
/******/ 										error.type = errorType;
/******/ 										error.request = realSrc;
/******/ 										installedChunkData[1](error);
/******/ 									}
/******/ 								}
/******/ 							};
/******/ 							__webpack_require__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);
/******/ 						} else installedChunks[chunkId] = 0;
/******/ 					}
/******/ 				}
/******/ 		};
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkIds[i]] = 0;
/******/ 			}
/******/ 		
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkapp"] = self["webpackChunkapp"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;